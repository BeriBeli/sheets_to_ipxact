
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jakarta.xml.bind
import java.lang
import java.math
import java.util
import javax.xml.namespace
import org
import typing



class AbstractionDefPortConstraintsType:
    def __init__(self): ...
    def getContent(self) -> java.util.List[typing.Any]: ...

class AbstractionDefinition:
    def __init__(self): ...
    def getAssertions(self) -> 'Assertions': ...
    def getBusType(self) -> 'LibraryRefType': ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getExtends(self) -> 'LibraryRefType': ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getPorts(self) -> 'AbstractionDefinition.Ports': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAssertions(self, assertions: 'Assertions') -> None: ...
    def setBusType(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setExtends(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPorts(self, ports: 'AbstractionDefinition.Ports') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['AbstractionDefinition.Ports.Port']: ...
        class Port:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getLogicalName(self) -> java.lang.String: ...
            def getPackets(self) -> 'PortPacketsType': ...
            def getShortDescription(self) -> java.lang.String: ...
            def getTransactional(self) -> 'AbstractionDefinition.Ports.Port.Transactional': ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def getWire(self) -> 'Wire': ...
            def isMatch(self) -> bool: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setLogicalName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMatch(self, boolean: bool) -> None: ...
            def setPackets(self, portPacketsType: 'PortPacketsType') -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setTransactional(self, transactional: 'AbstractionDefinition.Ports.Port.Transactional') -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            def setWire(self, wire: 'Wire') -> None: ...
            class Transactional:
                def __init__(self): ...
                def getOnInitiator(self) -> 'AbstractionDefinition.Ports.Port.Transactional.OnInitiator': ...
                def getOnSystem(self) -> java.util.List['AbstractionDefinition.Ports.Port.Transactional.OnSystem']: ...
                def getOnTarget(self) -> 'AbstractionDefinition.Ports.Port.Transactional.OnTarget': ...
                def getQualifier(self) -> 'QualifierType': ...
                def setOnInitiator(self, onInitiator: 'AbstractionDefinition.Ports.Port.Transactional.OnInitiator') -> None: ...
                def setOnTarget(self, onTarget: 'AbstractionDefinition.Ports.Port.Transactional.OnTarget') -> None: ...
                def setQualifier(self, qualifierType: 'QualifierType') -> None: ...
                class OnInitiator:
                    def __init__(self): ...
                    def getBusWidth(self) -> 'UnsignedPositiveIntExpression': ...
                    def getInitiative(self) -> java.lang.String: ...
                    def getKind(self) -> 'Kind': ...
                    def getPresence(self) -> 'PresenceType': ...
                    def getProtocol(self) -> 'Protocol': ...
                    def setBusWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
                    def setInitiative(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setKind(self, kind: 'Kind') -> None: ...
                    def setPresence(self, presenceType: 'PresenceType') -> None: ...
                    def setProtocol(self, protocol: 'Protocol') -> None: ...
                class OnSystem:
                    def __init__(self): ...
                    def getBusWidth(self) -> 'UnsignedPositiveIntExpression': ...
                    def getGroup(self) -> java.lang.String: ...
                    def getId(self) -> java.lang.String: ...
                    def getInitiative(self) -> java.lang.String: ...
                    def getKind(self) -> 'Kind': ...
                    def getPresence(self) -> 'PresenceType': ...
                    def getProtocol(self) -> 'Protocol': ...
                    def setBusWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
                    def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setInitiative(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setKind(self, kind: 'Kind') -> None: ...
                    def setPresence(self, presenceType: 'PresenceType') -> None: ...
                    def setProtocol(self, protocol: 'Protocol') -> None: ...
                class OnTarget:
                    def __init__(self): ...
                    def getBusWidth(self) -> 'UnsignedPositiveIntExpression': ...
                    def getInitiative(self) -> java.lang.String: ...
                    def getKind(self) -> 'Kind': ...
                    def getPresence(self) -> 'PresenceType': ...
                    def getProtocol(self) -> 'Protocol': ...
                    def setBusWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
                    def setInitiative(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setKind(self, kind: 'Kind') -> None: ...
                    def setPresence(self, presenceType: 'PresenceType') -> None: ...
                    def setProtocol(self, protocol: 'Protocol') -> None: ...

class AbstractionTypes:
    def __init__(self): ...
    def getAbstractionType(self) -> java.util.List['AbstractionTypes.AbstractionType']: ...
    class AbstractionType:
        def __init__(self): ...
        def getAbstractionRef(self) -> 'ConfigurableLibraryRefType': ...
        def getId(self) -> java.lang.String: ...
        def getPortMaps(self) -> 'AbstractionTypes.AbstractionType.PortMaps': ...
        def getViewRef(self) -> java.util.List['ViewRef']: ...
        def setAbstractionRef(self, configurableLibraryRefType: 'ConfigurableLibraryRefType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setPortMaps(self, portMaps: 'AbstractionTypes.AbstractionType.PortMaps') -> None: ...
        class PortMaps:
            def __init__(self): ...
            def getPortMap(self) -> java.util.List['AbstractionTypes.AbstractionType.PortMaps.PortMap']: ...
            class PortMap:
                def __init__(self): ...
                def getId(self) -> java.lang.String: ...
                def getInvert(self) -> java.lang.String: ...
                def getLogicalPort(self) -> 'AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort': ...
                def getLogicalTieOff(self) -> 'UnsignedBitVectorExpression': ...
                def getPhysicalPort(self) -> 'AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort': ...
                def getVendorExtensions(self) -> 'VendorExtensions': ...
                def isIsInformative(self) -> bool: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setInvert(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setIsInformative(self, boolean: bool) -> None: ...
                def setLogicalPort(self, logicalPort: 'AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort') -> None: ...
                def setLogicalTieOff(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
                def setPhysicalPort(self, physicalPort: 'AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort') -> None: ...
                def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
                class LogicalPort:
                    def __init__(self): ...
                    def getId(self) -> java.lang.String: ...
                    def getName(self) -> java.lang.String: ...
                    def getRange(self) -> 'Range': ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setRange(self, range: 'Range') -> None: ...
                class PhysicalPort:
                    def __init__(self): ...
                    def getId(self) -> java.lang.String: ...
                    def getName(self) -> java.lang.String: ...
                    def getPartSelect(self) -> 'PartSelect': ...
                    def getSubPort(self) -> java.util.List['AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort.SubPort']: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setPartSelect(self, partSelect: 'PartSelect') -> None: ...
                    class SubPort:
                        def __init__(self): ...
                        def getId(self) -> java.lang.String: ...
                        def getName(self) -> java.lang.String: ...
                        def getPartSelect(self) -> 'PartSelect': ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setPartSelect(self, partSelect: 'PartSelect') -> None: ...

class AbstractorBusInterfaceType:
    def __init__(self): ...
    def getAbstractionTypes(self) -> AbstractionTypes: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAbstractionTypes(self, abstractionTypes: AbstractionTypes) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class AbstractorGenerators:
    def __init__(self): ...
    def getAbstractorGenerator(self) -> java.util.List['InstanceGeneratorType']: ...

class AbstractorModeType(java.lang.Enum['AbstractorModeType']):
    INITIATOR: typing.ClassVar['AbstractorModeType'] = ...
    TARGET: typing.ClassVar['AbstractorModeType'] = ...
    DIRECT: typing.ClassVar['AbstractorModeType'] = ...
    SYSTEM: typing.ClassVar['AbstractorModeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'AbstractorModeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'AbstractorModeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['AbstractorModeType']: ...

class AbstractorModelType:
    def __init__(self): ...
    def getInstantiations(self) -> 'AbstractorModelType.Instantiations': ...
    def getPorts(self) -> 'AbstractorModelType.Ports': ...
    def getViews(self) -> 'AbstractorModelType.Views': ...
    def setInstantiations(self, instantiations: 'AbstractorModelType.Instantiations') -> None: ...
    def setPorts(self, ports: 'AbstractorModelType.Ports') -> None: ...
    def setViews(self, views: 'AbstractorModelType.Views') -> None: ...
    class Instantiations:
        def __init__(self): ...
        def getComponentInstantiation(self) -> java.util.List['ComponentInstantiationType']: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['AbstractorPortType']: ...
    class Views:
        def __init__(self): ...
        def getView(self) -> java.util.List['AbstractorModelType.Views.View']: ...
        class View:
            def __init__(self): ...
            def getComponentInstantiationRef(self) -> java.lang.String: ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getEnvIdentifier(self) -> java.util.List['AbstractorModelType.Views.View.EnvIdentifier']: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setComponentInstantiationRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class EnvIdentifier:
                def __init__(self): ...
                def getId(self) -> java.lang.String: ...
                def getValue(self) -> java.lang.String: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AbstractorPortStructuredType:
    def __init__(self): ...
    def getInterface(self) -> 'AbstractorPortStructuredType.Interface': ...
    def getStruct(self) -> 'AbstractorPortStructuredType.Struct': ...
    def getStructPortTypeDefs(self) -> 'StructPortTypeDefs': ...
    def getSubPorts(self) -> 'AbstractorPortStructuredType.SubPorts': ...
    def getUnion(self) -> 'AbstractorPortStructuredType.Union': ...
    def getVectors(self) -> 'ExtendedVectorsType': ...
    def isPacked(self) -> bool: ...
    def setInterface(self, interface: 'AbstractorPortStructuredType.Interface') -> None: ...
    def setPacked(self, boolean: bool) -> None: ...
    def setStruct(self, struct: 'AbstractorPortStructuredType.Struct') -> None: ...
    def setStructPortTypeDefs(self, structPortTypeDefs: 'StructPortTypeDefs') -> None: ...
    def setSubPorts(self, subPorts: 'AbstractorPortStructuredType.SubPorts') -> None: ...
    def setUnion(self, union: 'AbstractorPortStructuredType.Union') -> None: ...
    def setVectors(self, extendedVectorsType: 'ExtendedVectorsType') -> None: ...
    class Interface:
        def __init__(self): ...
        def isPhantom(self) -> bool: ...
        def setPhantom(self, boolean: bool) -> None: ...
    class Struct:
        def __init__(self): ...
        def getDirection(self) -> 'ComponentPortDirectionType': ...
        def setDirection(self, componentPortDirectionType: 'ComponentPortDirectionType') -> None: ...
    class SubPorts:
        def __init__(self): ...
        def getSubPort(self) -> java.util.List['AbstractorSubPortType']: ...
    class Union:
        def __init__(self): ...
        def getDirection(self) -> 'ComponentPortDirectionType': ...
        def setDirection(self, componentPortDirectionType: 'ComponentPortDirectionType') -> None: ...

class AbstractorPortTransactionalType:
    def __init__(self): ...
    def getBusWidth(self) -> 'UnsignedIntExpression': ...
    def getConnection(self) -> 'AbstractorPortTransactionalType.Connection': ...
    def getInitiative(self) -> 'InitiativeType': ...
    def getKind(self) -> 'Kind': ...
    def getProtocol(self) -> 'Protocol': ...
    def getQualifier(self) -> 'QualifierType': ...
    def getTransTypeDefs(self) -> 'TransTypeDefs': ...
    def isAllLogicalInitiativesAllowed(self) -> bool: ...
    def setAllLogicalInitiativesAllowed(self, boolean: bool) -> None: ...
    def setBusWidth(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setConnection(self, connection: 'AbstractorPortTransactionalType.Connection') -> None: ...
    def setInitiative(self, initiativeType: 'InitiativeType') -> None: ...
    def setKind(self, kind: 'Kind') -> None: ...
    def setProtocol(self, protocol: 'Protocol') -> None: ...
    def setQualifier(self, qualifierType: 'QualifierType') -> None: ...
    def setTransTypeDefs(self, transTypeDefs: 'TransTypeDefs') -> None: ...
    class Connection:
        def __init__(self): ...
        def getMaxConnections(self) -> 'UnsignedIntExpression': ...
        def getMinConnections(self) -> 'UnsignedIntExpression': ...
        def setMaxConnections(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setMinConnections(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class AbstractorPortType:
    def __init__(self): ...
    def getAccess(self) -> 'PortAccessType': ...
    def getArrays(self) -> 'Arrays': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getStructured(self) -> AbstractorPortStructuredType: ...
    def getTransactional(self) -> AbstractorPortTransactionalType: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWire(self) -> 'AbstractorPortWireType': ...
    def setAccess(self, portAccessType: 'PortAccessType') -> None: ...
    def setArrays(self, arrays: 'Arrays') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setStructured(self, abstractorPortStructuredType: AbstractorPortStructuredType) -> None: ...
    def setTransactional(self, abstractorPortTransactionalType: AbstractorPortTransactionalType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setWire(self, abstractorPortWireType: 'AbstractorPortWireType') -> None: ...

class AbstractorSubPortType:
    def __init__(self): ...
    def getAccess(self) -> 'PortAccessType': ...
    def getArrays(self) -> 'Arrays': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getStructured(self) -> AbstractorPortStructuredType: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWire(self) -> 'AbstractorPortWireType': ...
    def isIsIO(self) -> bool: ...
    def setAccess(self, portAccessType: 'PortAccessType') -> None: ...
    def setArrays(self, arrays: 'Arrays') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsIO(self, boolean: bool) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setStructured(self, abstractorPortStructuredType: AbstractorPortStructuredType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setWire(self, abstractorPortWireType: 'AbstractorPortWireType') -> None: ...

class AbstractorType:
    def __init__(self): ...
    def getAbstractorGenerators(self) -> AbstractorGenerators: ...
    def getAbstractorInterfaces(self) -> 'AbstractorType.AbstractorInterfaces': ...
    def getAbstractorMode(self) -> 'AbstractorType.AbstractorMode': ...
    def getAssertions(self) -> 'Assertions': ...
    def getBusType(self) -> 'LibraryRefType': ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFileSets(self) -> 'FileSets': ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getModel(self) -> AbstractorModelType: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAbstractorGenerators(self, abstractorGenerators: AbstractorGenerators) -> None: ...
    def setAbstractorInterfaces(self, abstractorInterfaces: 'AbstractorType.AbstractorInterfaces') -> None: ...
    def setAbstractorMode(self, abstractorMode: 'AbstractorType.AbstractorMode') -> None: ...
    def setAssertions(self, assertions: 'Assertions') -> None: ...
    def setBusType(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSets(self, fileSets: 'FileSets') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModel(self, abstractorModelType: AbstractorModelType) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class AbstractorInterfaces:
        def __init__(self): ...
        def getAbstractorInterface(self) -> java.util.List[AbstractorBusInterfaceType]: ...
    class AbstractorMode:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def getValue(self) -> AbstractorModeType: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, abstractorModeType: AbstractorModeType) -> None: ...

class AccessPolicies:
    def __init__(self): ...
    def getAccessPolicy(self) -> java.util.List['AccessPolicies.AccessPolicy']: ...
    class AccessPolicy:
        def __init__(self): ...
        def getAccess(self) -> 'AccessType': ...
        def getId(self) -> java.lang.String: ...
        def getModeRef(self) -> java.util.List['ModeRef']: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setAccess(self, accessType: 'AccessType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class AccessPropertiesType:
    def __init__(self): ...
    def getAccessEntryTypeRef(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def setAccessEntryTypeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AccessRestrictionType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getModeRef(self) -> java.util.List['ModeRef']: ...
    def getReadAccessMask(self) -> 'UnsignedBitVectorExpression': ...
    def getWriteAccessMask(self) -> 'UnsignedBitVectorExpression': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReadAccessMask(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setWriteAccessMask(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...

class AccessRestrictionsType:
    def __init__(self): ...
    def getAccessRestriction(self) -> java.util.List[AccessRestrictionType]: ...

class AccessType(java.lang.Enum['AccessType']):
    READ_ONLY: typing.ClassVar['AccessType'] = ...
    WRITE_ONLY: typing.ClassVar['AccessType'] = ...
    READ_WRITE: typing.ClassVar['AccessType'] = ...
    WRITE_ONCE: typing.ClassVar['AccessType'] = ...
    READ_WRITE_ONCE: typing.ClassVar['AccessType'] = ...
    NO_ACCESS: typing.ClassVar['AccessType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'AccessType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'AccessType': ...
    @staticmethod
    def values() -> typing.MutableSequence['AccessType']: ...

class AdHocConnection:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getPortReferences(self) -> 'AdHocConnection.PortReferences': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTiedValue(self) -> 'ComplexTiedValueExpression': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPortReferences(self, portReferences: 'AdHocConnection.PortReferences') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTiedValue(self, complexTiedValueExpression: 'ComplexTiedValueExpression') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class PortReferences:
        def __init__(self): ...
        def getContent(self) -> java.util.List[typing.Any]: ...
        class InternalPortReference:
            def __init__(self): ...
            def getComponentInstanceRef(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getPartSelect(self) -> 'PartSelect': ...
            def getPortRef(self) -> java.lang.String: ...
            def getSubPortReference(self) -> java.util.List['SubPortReference']: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setComponentInstanceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setPartSelect(self, partSelect: 'PartSelect') -> None: ...
            def setPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class AdHocConnections:
    def __init__(self): ...
    def getAdHocConnection(self) -> java.util.List[AdHocConnection]: ...

class AddrSpaceRefType:
    def __init__(self): ...
    def getAddressSpaceRef(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAddressSpaceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class AddressBankDefinitionType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'AddressBankDefinitionType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> 'BankAlignmentType': ...
    def getBankDefinitionRef(self) -> 'AddressBankDefinitionType.BankDefinitionRef': ...
    def getBaseAddress(self) -> 'UnsignedLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'AddressBankDefinitionType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: 'BankAlignmentType') -> None: ...
    def setBankDefinitionRef(self, bankDefinitionRef: 'AddressBankDefinitionType.BankDefinitionRef') -> None: ...
    def setBaseAddress(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...
    class BankDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AddressBankType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'AddressBankType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBankOrSubspaceMap(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> 'BankAlignmentType': ...
    def getBankDefinitionRef(self) -> 'AddressBankType.BankDefinitionRef': ...
    def getBaseAddress(self) -> 'UnsignedLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'AddressBankType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: 'BankAlignmentType') -> None: ...
    def setBankDefinitionRef(self, bankDefinitionRef: 'AddressBankType.BankDefinitionRef') -> None: ...
    def setBaseAddress(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...
    class BankDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AddressBlockDefinitions:
    def __init__(self): ...
    def getAddressBlockDefinition(self) -> java.util.List['AddressBlockDefinitions.AddressBlockDefinition']: ...
    class AddressBlockDefinition:
        def __init__(self): ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> 'Parameters': ...
        def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
        def getRegisterData(self) -> java.util.List[typing.Any]: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getUsage(self) -> 'UsageType': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
        def isVolatile(self) -> bool: ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: 'Parameters') -> None: ...
        def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setUsage(self, usageType: 'UsageType') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...
        def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...

class AddressBlockRef:
    def __init__(self): ...
    def getAddressBlockRef(self) -> java.lang.String: ...
    def getIndices(self) -> 'IndicesType': ...
    def setAddressBlockRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndices(self, indicesType: 'IndicesType') -> None: ...

class AddressBlockType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'AddressBlockType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockDefinitionRef(self) -> 'AddressBlockType.AddressBlockDefinitionRef': ...
    def getArray(self) -> 'Array': ...
    def getBaseAddress(self) -> 'UnsignedLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
    def getRegisterData(self) -> java.util.List[typing.Any]: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
    def isMisalignmentAllowed(self) -> bool: ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'AddressBlockType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setAddressBlockDefinitionRef(self, addressBlockDefinitionRef: 'AddressBlockType.AddressBlockDefinitionRef') -> None: ...
    def setArray(self, array: 'Array') -> None: ...
    def setBaseAddress(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMisalignmentAllowed(self, boolean: bool) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SlicedAccessHandle']: ...
    class AddressBlockDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AddressSpaces:
    def __init__(self): ...
    def getAddressSpace(self) -> java.util.List['AddressSpaces.AddressSpace']: ...
    class AddressSpace:
        def __init__(self): ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getLocalMemoryMap(self) -> 'LocalMemoryMapType': ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> 'Parameters': ...
        def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
        def getSegments(self) -> 'AddressSpaces.AddressSpace.Segments': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLocalMemoryMap(self, localMemoryMapType: 'LocalMemoryMapType') -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: 'Parameters') -> None: ...
        def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setSegments(self, segments: 'AddressSpaces.AddressSpace.Segments') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
        class Segments:
            def __init__(self): ...
            def getSegment(self) -> java.util.List['AddressSpaces.AddressSpace.Segments.Segment']: ...
            class Segment:
                def __init__(self): ...
                def getAddressOffset(self) -> 'UnsignedLongintExpression': ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getId(self) -> java.lang.String: ...
                def getName(self) -> java.lang.String: ...
                def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
                def getShortDescription(self) -> java.lang.String: ...
                def getVendorExtensions(self) -> 'VendorExtensions': ...
                def setAddressOffset(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
                def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class AlternateRegisterRef:
    def __init__(self): ...
    def getAlternateRegisterRef(self) -> java.lang.String: ...
    def setAlternateRegisterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AlternateRegisters:
    def __init__(self): ...
    def getAlternateRegister(self) -> java.util.List['AlternateRegisters.AlternateRegister']: ...
    class AlternateRegister:
        def __init__(self): ...
        def getAccessHandles(self) -> 'AlternateRegisters.AlternateRegister.AccessHandles': ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getField(self) -> java.util.List['FieldType']: ...
        def getId(self) -> java.lang.String: ...
        def getModeRef(self) -> java.util.List['ModeRef']: ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> 'Parameters': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setAccessHandles(self, accessHandles: 'AlternateRegisters.AlternateRegister.AccessHandles') -> None: ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: 'Parameters') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...
        class AccessHandles:
            def __init__(self): ...
            def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...

class ApiType(java.lang.Enum['ApiType']):
    TGI_2009: typing.ClassVar['ApiType'] = ...
    TGI_2014_BASE: typing.ClassVar['ApiType'] = ...
    TGI_2014_EXTENDED: typing.ClassVar['ApiType'] = ...
    TGI_2022_BASE: typing.ClassVar['ApiType'] = ...
    TGI_2022_EXTENDED: typing.ClassVar['ApiType'] = ...
    NONE: typing.ClassVar['ApiType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ApiType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ApiType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ApiType']: ...

class Array:
    def __init__(self): ...
    def getDim(self) -> java.util.List['Dim']: ...
    def getStride(self) -> 'Stride': ...
    def setStride(self, stride: 'Stride') -> None: ...

class Arrays:
    def __init__(self): ...
    def getArray(self) -> java.util.List['Arrays.Array']: ...
    class Array:
        def __init__(self): ...
        def getArrayId(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getLeft(self) -> 'UnsignedIntExpression': ...
        def getRight(self) -> 'UnsignedIntExpression': ...
        def setArrayId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class Assertion:
    def __init__(self): ...
    def getAssert(self) -> 'UnsignedBitExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def setAssert(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Assertions:
    def __init__(self): ...
    def getAssertion(self) -> java.util.List[Assertion]: ...

class BankAlignmentType(java.lang.Enum['BankAlignmentType']):
    SERIAL: typing.ClassVar['BankAlignmentType'] = ...
    PARALLEL: typing.ClassVar['BankAlignmentType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'BankAlignmentType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'BankAlignmentType': ...
    @staticmethod
    def values() -> typing.MutableSequence['BankAlignmentType']: ...

class BankDefinitions:
    def __init__(self): ...
    def getBankDefinition(self) -> java.util.List['BankDefinitions.BankDefinition']: ...
    class BankDefinition:
        def __init__(self): ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> 'Parameters': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getUsage(self) -> 'UsageType': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: 'Parameters') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setUsage(self, usageType: 'UsageType') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...

class BankRef:
    def __init__(self): ...
    def getBankRef(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def setBankRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BankedBlockType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'BankedBlockType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
    def getRegisterData(self) -> java.util.List[typing.Any]: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'BankedBlockType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SlicedAccessHandle']: ...

class BankedSubspaceType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getInitiatorRef(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInitiatorRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class BusDefinition:
    def __init__(self): ...
    def getAssertions(self) -> Assertions: ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getExtends(self) -> 'LibraryRefType': ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getMaxInitiators(self) -> 'UnsignedIntExpression': ...
    def getMaxTargets(self) -> 'UnsignedIntExpression': ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getSystemGroupNames(self) -> 'BusDefinition.SystemGroupNames': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def isBroadcast(self) -> bool: ...
    def isDirectConnection(self) -> bool: ...
    def isIsAddressable(self) -> bool: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setBroadcast(self, boolean: bool) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDirectConnection(self, boolean: bool) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setExtends(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsAddressable(self, boolean: bool) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaxInitiators(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setMaxTargets(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSystemGroupNames(self, systemGroupNames: 'BusDefinition.SystemGroupNames') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class SystemGroupNames:
        def __init__(self): ...
        def getSystemGroupName(self) -> java.util.List['BusDefinition.SystemGroupNames.SystemGroupName']: ...
        class SystemGroupName:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BusInterfaces:
    def __init__(self): ...
    def getBusInterface(self) -> java.util.List['BusInterfaceType']: ...

class Catalog:
    def __init__(self): ...
    def getAbstractionDefinitions(self) -> 'IpxactFilesType': ...
    def getAbstractors(self) -> 'IpxactFilesType': ...
    def getBusDefinitions(self) -> 'IpxactFilesType': ...
    def getCatalogs(self) -> 'IpxactFilesType': ...
    def getComponents(self) -> 'IpxactFilesType': ...
    def getDescription(self) -> java.lang.String: ...
    def getDesignConfigurations(self) -> 'IpxactFilesType': ...
    def getDesigns(self) -> 'IpxactFilesType': ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorChains(self) -> 'IpxactFilesType': ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeDefinitions(self) -> 'IpxactFilesType': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAbstractionDefinitions(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setAbstractors(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setBusDefinitions(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setCatalogs(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setComponents(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDesignConfigurations(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setDesigns(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setGeneratorChains(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeDefinitions(self, ipxactFilesType: 'IpxactFilesType') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class CellClassValueType(java.lang.Enum['CellClassValueType']):
    COMBINATIONAL: typing.ClassVar['CellClassValueType'] = ...
    SEQUENTIAL: typing.ClassVar['CellClassValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellClassValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellClassValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellClassValueType']: ...

class CellFunctionValueType(java.lang.Enum['CellFunctionValueType']):
    NAND_2: typing.ClassVar['CellFunctionValueType'] = ...
    BUF: typing.ClassVar['CellFunctionValueType'] = ...
    INV: typing.ClassVar['CellFunctionValueType'] = ...
    MUX_21: typing.ClassVar['CellFunctionValueType'] = ...
    DFF: typing.ClassVar['CellFunctionValueType'] = ...
    LATCH: typing.ClassVar['CellFunctionValueType'] = ...
    XOR_2: typing.ClassVar['CellFunctionValueType'] = ...
    OTHER: typing.ClassVar['CellFunctionValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellFunctionValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellFunctionValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellFunctionValueType']: ...

class CellSpecification:
    def __init__(self): ...
    def getCellClass(self) -> CellClassValueType: ...
    def getCellFunction(self) -> 'CellSpecification.CellFunction': ...
    def getCellStrength(self) -> 'CellStrengthValueType': ...
    def setCellClass(self, cellClassValueType: CellClassValueType) -> None: ...
    def setCellFunction(self, cellFunction: 'CellSpecification.CellFunction') -> None: ...
    def setCellStrength(self, cellStrengthValueType: 'CellStrengthValueType') -> None: ...
    class CellFunction:
        def __init__(self): ...
        def getOther(self) -> java.lang.String: ...
        def getValue(self) -> CellFunctionValueType: ...
        def setOther(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, cellFunctionValueType: CellFunctionValueType) -> None: ...

class CellStrengthValueType(java.lang.Enum['CellStrengthValueType']):
    LOW: typing.ClassVar['CellStrengthValueType'] = ...
    MEDIAN: typing.ClassVar['CellStrengthValueType'] = ...
    HIGH: typing.ClassVar['CellStrengthValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellStrengthValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellStrengthValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellStrengthValueType']: ...

class Channels:
    def __init__(self): ...
    def getChannel(self) -> java.util.List['Channels.Channel']: ...
    class Channel:
        def __init__(self): ...
        def getBusInterfaceRef(self) -> java.util.List['Channels.Channel.BusInterfaceRef']: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        class BusInterfaceRef:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getLocalName(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setLocalName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ClearboxElementRefType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLocation(self) -> java.util.List['SlicesType']: ...
    def getName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ClearboxElementType:
    def __init__(self): ...
    def getClearboxType(self) -> 'SimpleClearboxType': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isDriveable(self) -> bool: ...
    def setClearboxType(self, simpleClearboxType: 'SimpleClearboxType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDriveable(self, boolean: bool) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ComplexBaseExpression:
    def __init__(self): ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getValue(self) -> java.lang.String: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ComplexTiedValueExpression:
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getValue(self) -> java.lang.String: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ComponentGenerators:
    def __init__(self): ...
    def getComponentGenerator(self) -> java.util.List['InstanceGeneratorType']: ...

class ComponentInstance:
    def __init__(self): ...
    def getComponentRef(self) -> 'ConfigurableLibraryRefType': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getInstanceName(self) -> java.lang.String: ...
    def getPowerDomainLinks(self) -> 'PowerDomainLinks': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setComponentRef(self, configurableLibraryRefType: 'ConfigurableLibraryRefType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPowerDomainLinks(self, powerDomainLinks: 'PowerDomainLinks') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ComponentInstances:
    def __init__(self): ...
    def getComponentInstance(self) -> java.util.List[ComponentInstance]: ...

class ComponentInstantiationType:
    def __init__(self): ...
    def getArchitectureName(self) -> java.lang.String: ...
    def getClearboxElementRefs(self) -> 'ComponentInstantiationType.ClearboxElementRefs': ...
    def getConfigurationName(self) -> java.lang.String: ...
    def getConstraintSetRef(self) -> java.util.List['ConstraintSetRef']: ...
    def getDefaultFileBuilder(self) -> java.util.List['FileBuilderType']: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFileSetRef(self) -> java.util.List['FileSetRef']: ...
    def getId(self) -> java.lang.String: ...
    def getLanguage(self) -> 'LanguageType': ...
    def getLibraryName(self) -> java.lang.String: ...
    def getModuleName(self) -> java.lang.String: ...
    def getModuleParameters(self) -> 'ComponentInstantiationType.ModuleParameters': ...
    def getName(self) -> java.lang.String: ...
    def getPackageName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isIsVirtual(self) -> bool: ...
    def setArchitectureName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setClearboxElementRefs(self, clearboxElementRefs: 'ComponentInstantiationType.ClearboxElementRefs') -> None: ...
    def setConfigurationName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsVirtual(self, boolean: bool) -> None: ...
    def setLanguage(self, languageType: 'LanguageType') -> None: ...
    def setLibraryName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModuleName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModuleParameters(self, moduleParameters: 'ComponentInstantiationType.ModuleParameters') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPackageName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ClearboxElementRefs:
        def __init__(self): ...
        def getClearboxElementRef(self) -> java.util.List[ClearboxElementRefType]: ...
    class ModuleParameters:
        def __init__(self): ...
        def getModuleParameter(self) -> java.util.List['ModuleParameterType']: ...

class ComponentPortDirectionType(java.lang.Enum['ComponentPortDirectionType']):
    IN: typing.ClassVar['ComponentPortDirectionType'] = ...
    OUT: typing.ClassVar['ComponentPortDirectionType'] = ...
    INOUT: typing.ClassVar['ComponentPortDirectionType'] = ...
    PHANTOM: typing.ClassVar['ComponentPortDirectionType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ComponentPortDirectionType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ComponentPortDirectionType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ComponentPortDirectionType']: ...

class ComponentType:
    def __init__(self): ...
    def getAddressSpaces(self) -> AddressSpaces: ...
    def getAssertions(self) -> Assertions: ...
    def getBusInterfaces(self) -> BusInterfaces: ...
    def getChannels(self) -> Channels: ...
    def getChoices(self) -> 'Choices': ...
    def getClearboxElements(self) -> 'ComponentType.ClearboxElements': ...
    def getComponentGenerators(self) -> ComponentGenerators: ...
    def getCpus(self) -> 'ComponentType.Cpus': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFileSets(self) -> 'FileSets': ...
    def getId(self) -> java.lang.String: ...
    def getIndirectInterfaces(self) -> 'IndirectInterfaces': ...
    def getLibrary(self) -> java.lang.String: ...
    def getMemoryMaps(self) -> 'MemoryMaps': ...
    def getModel(self) -> 'ModelType': ...
    def getModes(self) -> 'ComponentType.Modes': ...
    def getName(self) -> java.lang.String: ...
    def getOtherClockDrivers(self) -> 'OtherClocks': ...
    def getParameters(self) -> 'Parameters': ...
    def getPowerDomains(self) -> 'ComponentType.PowerDomains': ...
    def getResetTypes(self) -> 'ComponentType.ResetTypes': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeDefinitions(self) -> 'ComponentType.TypeDefinitions': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAddressSpaces(self, addressSpaces: AddressSpaces) -> None: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setBusInterfaces(self, busInterfaces: BusInterfaces) -> None: ...
    def setChannels(self, channels: Channels) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setClearboxElements(self, clearboxElements: 'ComponentType.ClearboxElements') -> None: ...
    def setComponentGenerators(self, componentGenerators: ComponentGenerators) -> None: ...
    def setCpus(self, cpus: 'ComponentType.Cpus') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSets(self, fileSets: 'FileSets') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndirectInterfaces(self, indirectInterfaces: 'IndirectInterfaces') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMemoryMaps(self, memoryMaps: 'MemoryMaps') -> None: ...
    def setModel(self, modelType: 'ModelType') -> None: ...
    def setModes(self, modes: 'ComponentType.Modes') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOtherClockDrivers(self, otherClocks: 'OtherClocks') -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPowerDomains(self, powerDomains: 'ComponentType.PowerDomains') -> None: ...
    def setResetTypes(self, resetTypes: 'ComponentType.ResetTypes') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeDefinitions(self, typeDefinitions: 'ComponentType.TypeDefinitions') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ClearboxElements:
        def __init__(self): ...
        def getClearboxElement(self) -> java.util.List[ClearboxElementType]: ...
    class Cpus:
        def __init__(self): ...
        def getCpu(self) -> java.util.List['ComponentType.Cpus.Cpu']: ...
        class Cpu:
            def __init__(self): ...
            def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getExecutableImage(self) -> java.util.List['ExecutableImage']: ...
            def getId(self) -> java.lang.String: ...
            def getMemoryMapRef(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getParameters(self) -> 'Parameters': ...
            def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
            def getRegions(self) -> 'ComponentType.Cpus.Cpu.Regions': ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
            def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setParameters(self, parameters: 'Parameters') -> None: ...
            def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
            def setRegions(self, regions: 'ComponentType.Cpus.Cpu.Regions') -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
            class Regions:
                def __init__(self): ...
                def getRegion(self) -> java.util.List['ComponentType.Cpus.Cpu.Regions.Region']: ...
                class Region:
                    def __init__(self): ...
                    def getAddressOffset(self) -> 'UnsignedLongintExpression': ...
                    def getDescription(self) -> java.lang.String: ...
                    def getDisplayName(self) -> java.lang.String: ...
                    def getId(self) -> java.lang.String: ...
                    def getName(self) -> java.lang.String: ...
                    def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
                    def getShortDescription(self) -> java.lang.String: ...
                    def getVendorExtensions(self) -> 'VendorExtensions': ...
                    def setAddressOffset(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
                    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
                    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Modes:
        def __init__(self): ...
        def getMode(self) -> java.util.List['ComponentType.Modes.Mode']: ...
        class Mode:
            def __init__(self): ...
            def getCondition(self) -> 'UnresolvedUnsignedBitExpression': ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getFieldSlice(self) -> java.util.List['ComponentType.Modes.Mode.FieldSlice']: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getPortSlice(self) -> java.util.List['ComponentType.Modes.Mode.PortSlice']: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setCondition(self, unresolvedUnsignedBitExpression: 'UnresolvedUnsignedBitExpression') -> None: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class FieldSlice:
                def __init__(self): ...
                def getAddressBlockRef(self) -> AddressBlockRef: ...
                def getAddressSpaceRef(self) -> 'ComponentType.Modes.Mode.FieldSlice.AddressSpaceRef': ...
                def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
                def getBankRef(self) -> java.util.List[BankRef]: ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getFieldRef(self) -> 'FieldRef': ...
                def getId(self) -> java.lang.String: ...
                def getMemoryMapRef(self) -> 'ComponentType.Modes.Mode.FieldSlice.MemoryMapRef': ...
                def getMemoryRemapRef(self) -> 'MemoryRemapRef': ...
                def getName(self) -> java.lang.String: ...
                def getRange(self) -> 'Range': ...
                def getRegisterFileRef(self) -> java.util.List['RegisterFileRef']: ...
                def getRegisterRef(self) -> 'RegisterRef': ...
                def getShortDescription(self) -> java.lang.String: ...
                def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
                def setAddressSpaceRef(self, addressSpaceRef: 'ComponentType.Modes.Mode.FieldSlice.AddressSpaceRef') -> None: ...
                def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFieldRef(self, fieldRef: 'FieldRef') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMemoryMapRef(self, memoryMapRef: 'ComponentType.Modes.Mode.FieldSlice.MemoryMapRef') -> None: ...
                def setMemoryRemapRef(self, memoryRemapRef: 'MemoryRemapRef') -> None: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRange(self, range: 'Range') -> None: ...
                def setRegisterRef(self, registerRef: 'RegisterRef') -> None: ...
                def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                class AddressSpaceRef:
                    def __init__(self): ...
                    def getAddressSpaceRef(self) -> java.lang.String: ...
                    def setAddressSpaceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                class MemoryMapRef:
                    def __init__(self): ...
                    def getMemoryMapRef(self) -> java.lang.String: ...
                    def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class PortSlice:
                def __init__(self): ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getId(self) -> java.lang.String: ...
                def getName(self) -> java.lang.String: ...
                def getPartSelect(self) -> 'PartSelect': ...
                def getPortRef(self) -> 'ComponentType.Modes.Mode.PortSlice.PortRef': ...
                def getShortDescription(self) -> java.lang.String: ...
                def getSubPortReference(self) -> java.util.List['SubPortReference']: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setPartSelect(self, partSelect: 'PartSelect') -> None: ...
                def setPortRef(self, portRef: 'ComponentType.Modes.Mode.PortSlice.PortRef') -> None: ...
                def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                class PortRef:
                    def __init__(self): ...
                    def getPortRef(self) -> java.lang.String: ...
                    def setPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class PowerDomains:
        def __init__(self): ...
        def getPowerDomain(self) -> java.util.List['ComponentType.PowerDomains.PowerDomain']: ...
        class PowerDomain:
            def __init__(self): ...
            def getAlwaysOn(self) -> 'UnsignedBitExpression': ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getParameters(self) -> 'Parameters': ...
            def getShortDescription(self) -> java.lang.String: ...
            def getSubDomainOf(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setAlwaysOn(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setParameters(self, parameters: 'Parameters') -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setSubDomainOf(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ResetTypes:
        def __init__(self): ...
        def getResetType(self) -> java.util.List['ComponentType.ResetTypes.ResetType']: ...
        class ResetType:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class TypeDefinitions:
        def __init__(self): ...
        def getExternalTypeDefinitions(self) -> java.util.List['ExternalTypeDefinitions']: ...

class ConfigurableArrays:
    def __init__(self): ...
    def getArray(self) -> java.util.List['ConfigurableArrays.Array']: ...
    class Array:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getLeft(self) -> 'UnsignedIntExpression': ...
        def getRight(self) -> 'UnsignedIntExpression': ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class ConfigurableElementValues:
    def __init__(self): ...
    def getConfigurableElementValue(self) -> java.util.List['ConfigurableElementValue']: ...

class ConfigurableLibraryRefType:
    def __init__(self): ...
    def getConfigurableElementValues(self) -> ConfigurableElementValues: ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVersion(self) -> java.lang.String: ...
    def setConfigurableElementValues(self, configurableElementValues: ConfigurableElementValues) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ConstraintSet:
    def __init__(self): ...
    def getConstraintSetId(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getDriveConstraint(self) -> 'DriveConstraint': ...
    def getId(self) -> java.lang.String: ...
    def getLoadConstraint(self) -> 'LoadConstraint': ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTimingConstraint(self) -> java.util.List['TimingConstraint']: ...
    def getVector(self) -> 'ConstraintSet.Vector': ...
    def setConstraintSetId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDriveConstraint(self, driveConstraint: 'DriveConstraint') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLoadConstraint(self, loadConstraint: 'LoadConstraint') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVector(self, vector: 'ConstraintSet.Vector') -> None: ...
    class Vector:
        def __init__(self): ...
        def getLeft(self) -> 'UnsignedIntExpression': ...
        def getRight(self) -> 'UnsignedIntExpression': ...
        def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class ConstraintSetRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLocalName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLocalName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ConstraintSets:
    def __init__(self): ...
    def getConstraintSet(self) -> java.util.List[ConstraintSet]: ...

class DataTypeType(java.lang.Enum['DataTypeType']):
    INT: typing.ClassVar['DataTypeType'] = ...
    UNSIGNED_INT: typing.ClassVar['DataTypeType'] = ...
    LONG: typing.ClassVar['DataTypeType'] = ...
    UNSIGNED_LONG: typing.ClassVar['DataTypeType'] = ...
    FLOAT: typing.ClassVar['DataTypeType'] = ...
    DOUBLE: typing.ClassVar['DataTypeType'] = ...
    CHAR: typing.ClassVar['DataTypeType'] = ...
    VOID: typing.ClassVar['DataTypeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DataTypeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DataTypeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DataTypeType']: ...

class DelayValueType(java.lang.Enum['DelayValueType']):
    MIN: typing.ClassVar['DelayValueType'] = ...
    MAX: typing.ClassVar['DelayValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DelayValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DelayValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DelayValueType']: ...

class DelayValueUnitType(java.lang.Enum['DelayValueUnitType']):
    PS: typing.ClassVar['DelayValueUnitType'] = ...
    NS: typing.ClassVar['DelayValueUnitType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DelayValueUnitType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DelayValueUnitType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DelayValueUnitType']: ...

class Design:
    def __init__(self): ...
    def getAdHocConnections(self) -> AdHocConnections: ...
    def getAssertions(self) -> Assertions: ...
    def getChoices(self) -> 'Choices': ...
    def getComponentInstances(self) -> ComponentInstances: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getInterconnections(self) -> 'Interconnections': ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAdHocConnections(self, adHocConnections: AdHocConnections) -> None: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setComponentInstances(self, componentInstances: ComponentInstances) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInterconnections(self, interconnections: 'Interconnections') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class DesignConfiguration:
    def __init__(self): ...
    def getAssertions(self) -> Assertions: ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDesignRef(self) -> 'LibraryRefType': ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorChainConfiguration(self) -> java.util.List[ConfigurableLibraryRefType]: ...
    def getId(self) -> java.lang.String: ...
    def getInterconnectionConfiguration(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration']: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def getViewConfiguration(self) -> java.util.List['DesignConfiguration.ViewConfiguration']: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDesignRef(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class InterconnectionConfiguration:
        def __init__(self): ...
        def getAbstractorInstances(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration.AbstractorInstances']: ...
        def getId(self) -> java.lang.String: ...
        def getInterconnectionRef(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setInterconnectionRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        class AbstractorInstances:
            def __init__(self): ...
            def getAbstractorInstance(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration.AbstractorInstances.AbstractorInstance']: ...
            def getId(self) -> java.lang.String: ...
            def getInterfaceRef(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration.AbstractorInstances.InterfaceRef']: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class AbstractorInstance:
                def __init__(self): ...
                def getAbstractorRef(self) -> ConfigurableLibraryRefType: ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getId(self) -> java.lang.String: ...
                def getInstanceName(self) -> java.lang.String: ...
                def getShortDescription(self) -> java.lang.String: ...
                def getViewName(self) -> java.lang.String: ...
                def setAbstractorRef(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setViewName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class InterfaceRef:
                def __init__(self): ...
                def getBusRef(self) -> java.lang.String: ...
                def getComponentRef(self) -> java.lang.String: ...
                def getId(self) -> java.lang.String: ...
                def getVendorExtensions(self) -> 'VendorExtensions': ...
                def setBusRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setComponentRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ViewConfiguration:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getInstanceName(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getView(self) -> 'DesignConfiguration.ViewConfiguration.View': ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setView(self, view: 'DesignConfiguration.ViewConfiguration.View') -> None: ...
        class View:
            def __init__(self): ...
            def getConfigurableElementValues(self) -> ConfigurableElementValues: ...
            def getViewRef(self) -> java.lang.String: ...
            def setConfigurableElementValues(self, configurableElementValues: ConfigurableElementValues) -> None: ...
            def setViewRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class DesignConfigurationInstantiationType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDesignConfigurationRef(self) -> ConfigurableLibraryRefType: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getLanguage(self) -> 'LanguageType': ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDesignConfigurationRef(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLanguage(self, languageType: 'LanguageType') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class DesignInstantiationType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDesignRef(self) -> ConfigurableLibraryRefType: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDesignRef(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class Direction(java.lang.Enum['Direction']):
    IN: typing.ClassVar['Direction'] = ...
    OUT: typing.ClassVar['Direction'] = ...
    INOUT: typing.ClassVar['Direction'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'Direction': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Direction': ...
    @staticmethod
    def values() -> typing.MutableSequence['Direction']: ...

class DomainTypeDef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getTypeDefinition(self) -> java.util.List['DomainTypeDef.TypeDefinition']: ...
    def getTypeName(self) -> 'DomainTypeDef.TypeName': ...
    def getViewRef(self) -> java.util.List['DomainTypeDef.ViewRef']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeName(self, typeName: 'DomainTypeDef.TypeName') -> None: ...
    class TypeDefinition:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class TypeName:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class DomainTypeDefs:
    def __init__(self): ...
    def getDomainTypeDef(self) -> java.util.List[DomainTypeDef]: ...

class DriveConstraint:
    def __init__(self): ...
    def getCellSpecification(self) -> CellSpecification: ...
    def setCellSpecification(self, cellSpecification: CellSpecification) -> None: ...

class DriverType:
    def __init__(self): ...
    def getClockDriver(self) -> 'ClockDriver': ...
    def getDefaultValue(self) -> 'QualifiedExpression': ...
    def getId(self) -> java.lang.String: ...
    def getRange(self) -> 'Range': ...
    def getSingleShotDriver(self) -> 'SingleShotDriver': ...
    def getViewRef(self) -> java.util.List['DriverType.ViewRef']: ...
    def setClockDriver(self, clockDriver: 'ClockDriver') -> None: ...
    def setDefaultValue(self, qualifiedExpression: 'QualifiedExpression') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRange(self, range: 'Range') -> None: ...
    def setSingleShotDriver(self, singleShotDriver: 'SingleShotDriver') -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Drivers:
    def __init__(self): ...
    def getDriver(self) -> java.util.List[DriverType]: ...

class EdgeValueType(java.lang.Enum['EdgeValueType']):
    RISE: typing.ClassVar['EdgeValueType'] = ...
    FALL: typing.ClassVar['EdgeValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'EdgeValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'EdgeValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['EdgeValueType']: ...

class EndianessType(java.lang.Enum['EndianessType']):
    BIG: typing.ClassVar['EndianessType'] = ...
    LITTLE: typing.ClassVar['EndianessType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'EndianessType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'EndianessType': ...
    @staticmethod
    def values() -> typing.MutableSequence['EndianessType']: ...

class EnumeratedValueType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> java.lang.String: ...
    def getValue(self) -> 'UnsignedBitVectorExpression': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class EnumeratedValues:
    def __init__(self): ...
    def getEnumeratedValue(self) -> java.util.List[EnumeratedValueType]: ...
    def getEnumerationDefinitionRef(self) -> 'EnumeratedValues.EnumerationDefinitionRef': ...
    def setEnumerationDefinitionRef(self, enumerationDefinitionRef: 'EnumeratedValues.EnumerationDefinitionRef') -> None: ...
    class EnumerationDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class EnumerationDefinitions:
    def __init__(self): ...
    def getEnumerationDefinition(self) -> java.util.List['EnumerationDefinitions.EnumerationDefinition']: ...
    class EnumerationDefinition:
        def __init__(self): ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getEnumeratedValue(self) -> java.util.List[EnumeratedValueType]: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getWidth(self) -> 'UnsignedPositiveIntExpression': ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...

class ExecutableImage:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFileSetRefGroup(self) -> 'ExecutableImage.FileSetRefGroup': ...
    def getId(self) -> java.lang.String: ...
    def getImageId(self) -> java.lang.String: ...
    def getImageType(self) -> java.lang.String: ...
    def getLanguageTools(self) -> 'ExecutableImage.LanguageTools': ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSetRefGroup(self, fileSetRefGroup: 'ExecutableImage.FileSetRefGroup') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setImageId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setImageType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLanguageTools(self, languageTools: 'ExecutableImage.LanguageTools') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class FileSetRefGroup:
        def __init__(self): ...
        def getFileSetRef(self) -> java.util.List['FileSetRef']: ...
    class LanguageTools:
        def __init__(self): ...
        def getContent(self) -> java.util.List[typing.Any]: ...
        class FileBuilder:
            def __init__(self): ...
            def getCommand(self) -> 'StringExpression': ...
            def getFileType(self) -> 'FileType': ...
            def getFlags(self) -> 'StringExpression': ...
            def getId(self) -> java.lang.String: ...
            def getReplaceDefaultFlags(self) -> 'UnsignedBitExpression': ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setCommand(self, stringExpression: 'StringExpression') -> None: ...
            def setFileType(self, fileType: 'FileType') -> None: ...
            def setFlags(self, stringExpression: 'StringExpression') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setReplaceDefaultFlags(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ExtendedVectorsType:
    def __init__(self): ...
    def getVector(self) -> java.util.List['ExtendedVectorsType.Vector']: ...
    class Vector:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getLeft(self) -> 'UnsignedIntExpression': ...
        def getRight(self) -> 'UnsignedIntExpression': ...
        def getVectorId(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setVectorId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ExternalPortReference:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPartSelect(self) -> 'PartSelect': ...
    def getPortRef(self) -> java.lang.String: ...
    def getSubPortReference(self) -> java.util.List['SubPortReference']: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPartSelect(self, partSelect: 'PartSelect') -> None: ...
    def setPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ExternalTypeDefinitions:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getModeLinks(self) -> 'ModeLinks': ...
    def getName(self) -> java.lang.String: ...
    def getResetTypeLinks(self) -> 'ResetTypeLinks': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeDefinitionsRef(self) -> ConfigurableLibraryRefType: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getViewLinks(self) -> 'ViewLinks': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModeLinks(self, modeLinks: 'ModeLinks') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setResetTypeLinks(self, resetTypeLinks: 'ResetTypeLinks') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeDefinitionsRef(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setViewLinks(self, viewLinks: 'ViewLinks') -> None: ...

class FieldAccessPolicyDefinitionRef:
    def __init__(self): ...
    def getTypeDefinitions(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FieldAccessPolicyDefinitions:
    def __init__(self): ...
    def getFieldAccessPolicyDefinition(self) -> java.util.List['FieldAccessPolicyDefinitions.FieldAccessPolicyDefinition']: ...
    class FieldAccessPolicyDefinition:
        def __init__(self): ...
        def getAccess(self) -> AccessType: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getModifiedWriteValue(self) -> 'ModifiedWriteValue': ...
        def getName(self) -> java.lang.String: ...
        def getReadAction(self) -> 'ReadAction': ...
        def getReadResponse(self) -> 'UnsignedBitVectorExpression': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getWriteValueConstraint(self) -> 'WriteValueConstraintType': ...
        def setAccess(self, accessType: AccessType) -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setModifiedWriteValue(self, modifiedWriteValue: 'ModifiedWriteValue') -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setReadAction(self, readAction: 'ReadAction') -> None: ...
        def setReadResponse(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setWriteValueConstraint(self, writeValueConstraintType: 'WriteValueConstraintType') -> None: ...

class FieldAccessPropertiesType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FieldDefinitions:
    def __init__(self): ...
    def getFieldDefinition(self) -> java.util.List['FieldDefinitions.FieldDefinition']: ...
    class FieldDefinition:
        def __init__(self): ...
        def getBitWidth(self) -> 'UnsignedPositiveIntExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getEnumeratedValues(self) -> EnumeratedValues: ...
        def getFieldAccessPolicies(self) -> 'FieldType.FieldAccessPolicies': ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getResets(self) -> 'FieldDefinitions.FieldDefinition.Resets': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setBitWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setEnumeratedValues(self, enumeratedValues: EnumeratedValues) -> None: ...
        def setFieldAccessPolicies(self, fieldAccessPolicies: 'FieldType.FieldAccessPolicies') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setResets(self, resets: 'FieldDefinitions.FieldDefinition.Resets') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...
        class Resets:
            def __init__(self): ...
            def getReset(self) -> java.util.List['Reset']: ...

class FieldMap:
    def __init__(self): ...
    def getFieldSlice(self) -> 'FieldMap.FieldSlice': ...
    def getId(self) -> java.lang.String: ...
    def getModeRef(self) -> java.util.List['FieldMap.ModeRef']: ...
    def getPartSelect(self) -> 'PartSelect': ...
    def getSubPortReference(self) -> java.util.List['SubPortReference']: ...
    def setFieldSlice(self, fieldSlice: 'FieldMap.FieldSlice') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPartSelect(self, partSelect: 'PartSelect') -> None: ...
    class FieldSlice:
        def __init__(self): ...
        def getAddressBlockRef(self) -> AddressBlockRef: ...
        def getAddressSpaceRef(self) -> ComponentType.Modes.Mode.FieldSlice.AddressSpaceRef: ...
        def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
        def getBankRef(self) -> java.util.List[BankRef]: ...
        def getFieldRef(self) -> 'FieldRef': ...
        def getMemoryMapRef(self) -> ComponentType.Modes.Mode.FieldSlice.MemoryMapRef: ...
        def getMemoryRemapRef(self) -> 'MemoryRemapRef': ...
        def getRange(self) -> 'Range': ...
        def getRegisterFileRef(self) -> java.util.List['RegisterFileRef']: ...
        def getRegisterRef(self) -> 'RegisterRef': ...
        def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
        def setAddressSpaceRef(self, addressSpaceRef: ComponentType.Modes.Mode.FieldSlice.AddressSpaceRef) -> None: ...
        def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
        def setFieldRef(self, fieldRef: 'FieldRef') -> None: ...
        def setMemoryMapRef(self, memoryMapRef: ComponentType.Modes.Mode.FieldSlice.MemoryMapRef) -> None: ...
        def setMemoryRemapRef(self, memoryRemapRef: 'MemoryRemapRef') -> None: ...
        def setRange(self, range: 'Range') -> None: ...
        def setRegisterRef(self, registerRef: 'RegisterRef') -> None: ...
    class ModeRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getPriority(self) -> java.math.BigInteger: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setPriority(self, bigInteger: java.math.BigInteger) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FieldMaps:
    def __init__(self): ...
    def getFieldMap(self) -> java.util.List[FieldMap]: ...

class FieldRef:
    def __init__(self): ...
    def getFieldRef(self) -> java.lang.String: ...
    def getIndices(self) -> 'IndicesType': ...
    def setFieldRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndices(self, indicesType: 'IndicesType') -> None: ...

class FileBuilderType:
    def __init__(self): ...
    def getCommand(self) -> 'StringExpression': ...
    def getFileType(self) -> 'FileType': ...
    def getFlags(self) -> 'StringExpression': ...
    def getId(self) -> java.lang.String: ...
    def getReplaceDefaultFlags(self) -> 'UnsignedBitExpression': ...
    def setCommand(self, stringExpression: 'StringExpression') -> None: ...
    def setFileType(self, fileType: 'FileType') -> None: ...
    def setFlags(self, stringExpression: 'StringExpression') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReplaceDefaultFlags(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...

class FileSetRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLocalName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLocalName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class FileSets:
    def __init__(self): ...
    def getFileSet(self) -> java.util.List['FileSetType']: ...

class FileType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLibext(self) -> java.lang.String: ...
    def getUser(self) -> java.lang.String: ...
    def getValue(self) -> 'SimpleFileType': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibext(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUser(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, simpleFileType: 'SimpleFileType') -> None: ...

class FormatType(java.lang.Enum['FormatType']):
    BIT: typing.ClassVar['FormatType'] = ...
    BYTE: typing.ClassVar['FormatType'] = ...
    SHORTINT: typing.ClassVar['FormatType'] = ...
    INT: typing.ClassVar['FormatType'] = ...
    LONGINT: typing.ClassVar['FormatType'] = ...
    SHORTREAL: typing.ClassVar['FormatType'] = ...
    REAL: typing.ClassVar['FormatType'] = ...
    STRING: typing.ClassVar['FormatType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'FormatType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FormatType': ...
    @staticmethod
    def values() -> typing.MutableSequence['FormatType']: ...

class GeneratorChain:
    def __init__(self): ...
    def getAssertions(self) -> Assertions: ...
    def getChainGroup(self) -> java.util.List['GeneratorChain.ChainGroup']: ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorChainSelectorOrComponentGeneratorSelectorOrGenerator(self) -> java.util.List[typing.Any]: ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def isHidden(self) -> bool: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setHidden(self, boolean: bool) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ChainGroup:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class GeneratorChainSelector:
        def __init__(self): ...
        def getGeneratorChainRef(self) -> ConfigurableLibraryRefType: ...
        def getGroupSelector(self) -> 'GroupSelector': ...
        def getId(self) -> java.lang.String: ...
        def isUnique(self) -> bool: ...
        def setGeneratorChainRef(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
        def setGroupSelector(self, groupSelector: 'GroupSelector') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setUnique(self, boolean: bool) -> None: ...

class GeneratorRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class GeneratorSelectorType:
    def __init__(self): ...
    def getGroupSelector(self) -> 'GroupSelector': ...
    def getId(self) -> java.lang.String: ...
    def setGroupSelector(self, groupSelector: 'GroupSelector') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class GeneratorType:
    def __init__(self): ...
    def getApiService(self) -> java.lang.String: ...
    def getApiType(self) -> 'GeneratorType.ApiType': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorExe(self) -> 'IpxactURI': ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getPhase(self) -> 'RealExpression': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTransportMethods(self) -> 'GeneratorType.TransportMethods': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isHidden(self) -> bool: ...
    def setApiService(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setApiType(self, apiType: 'GeneratorType.ApiType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setGeneratorExe(self, ipxactURI: 'IpxactURI') -> None: ...
    def setHidden(self, boolean: bool) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPhase(self, realExpression: 'RealExpression') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTransportMethods(self, transportMethods: 'GeneratorType.TransportMethods') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ApiType:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> ApiType: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, apiType: ApiType) -> None: ...
    class TransportMethods:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getTransportMethod(self) -> 'GeneratorType.TransportMethods.TransportMethod': ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTransportMethod(self, transportMethod: 'GeneratorType.TransportMethods.TransportMethod') -> None: ...
        class TransportMethod:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> 'TransportMethodType': ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, transportMethodType: 'TransportMethodType') -> None: ...

class GroupSelector:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getMultipleGroupSelectionOperator(self) -> java.lang.String: ...
    def getName(self) -> java.util.List['GroupSelector.Name']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMultipleGroupSelectionOperator(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Name:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class HierInterfaceType:
    def __init__(self): ...
    def getBusRef(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setBusRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class IndicesType:
    def __init__(self): ...
    def getIndex(self) -> java.util.List['Index']: ...

class IndirectAddressRef:
    def __init__(self): ...
    def getAddressBlockRef(self) -> AddressBlockRef: ...
    def getAddressSpaceRef(self) -> 'IndirectAddressRef.AddressSpaceRef': ...
    def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
    def getBankRef(self) -> java.util.List[BankRef]: ...
    def getFieldRef(self) -> FieldRef: ...
    def getMemoryMapRef(self) -> 'IndirectAddressRef.MemoryMapRef': ...
    def getMemoryRemapRef(self) -> 'MemoryRemapRef': ...
    def getRegisterFileRef(self) -> java.util.List['RegisterFileRef']: ...
    def getRegisterRef(self) -> 'RegisterRef': ...
    def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
    def setAddressSpaceRef(self, addressSpaceRef: 'IndirectAddressRef.AddressSpaceRef') -> None: ...
    def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
    def setFieldRef(self, fieldRef: FieldRef) -> None: ...
    def setMemoryMapRef(self, memoryMapRef: 'IndirectAddressRef.MemoryMapRef') -> None: ...
    def setMemoryRemapRef(self, memoryRemapRef: 'MemoryRemapRef') -> None: ...
    def setRegisterRef(self, registerRef: 'RegisterRef') -> None: ...
    class AddressSpaceRef:
        def __init__(self): ...
        def getAddressSpaceRef(self) -> java.lang.String: ...
        def setAddressSpaceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class MemoryMapRef:
        def __init__(self): ...
        def getMemoryMapRef(self) -> java.lang.String: ...
        def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class IndirectDataRef:
    def __init__(self): ...
    def getAddressBlockRef(self) -> AddressBlockRef: ...
    def getAddressSpaceRef(self) -> IndirectAddressRef.AddressSpaceRef: ...
    def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
    def getBankRef(self) -> java.util.List[BankRef]: ...
    def getFieldRef(self) -> FieldRef: ...
    def getMemoryMapRef(self) -> IndirectAddressRef.MemoryMapRef: ...
    def getMemoryRemapRef(self) -> 'MemoryRemapRef': ...
    def getRegisterFileRef(self) -> java.util.List['RegisterFileRef']: ...
    def getRegisterRef(self) -> 'RegisterRef': ...
    def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
    def setAddressSpaceRef(self, addressSpaceRef: IndirectAddressRef.AddressSpaceRef) -> None: ...
    def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
    def setFieldRef(self, fieldRef: FieldRef) -> None: ...
    def setMemoryMapRef(self, memoryMapRef: IndirectAddressRef.MemoryMapRef) -> None: ...
    def setMemoryRemapRef(self, memoryRemapRef: 'MemoryRemapRef') -> None: ...
    def setRegisterRef(self, registerRef: 'RegisterRef') -> None: ...

class IndirectInterfaceType:
    def __init__(self): ...
    def getBitsInLau(self) -> 'UnsignedPositiveLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEndianness(self) -> EndianessType: ...
    def getId(self) -> java.lang.String: ...
    def getIndirectAddressRef(self) -> IndirectAddressRef: ...
    def getIndirectDataRef(self) -> IndirectDataRef: ...
    def getMemoryMapRef(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTransparentBridge(self) -> java.util.List['TransparentBridge']: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setBitsInLau(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEndianness(self, endianessType: EndianessType) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndirectAddressRef(self, indirectAddressRef: IndirectAddressRef) -> None: ...
    def setIndirectDataRef(self, indirectDataRef: IndirectDataRef) -> None: ...
    def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class IndirectInterfaces:
    def __init__(self): ...
    def getIndirectInterface(self) -> java.util.List[IndirectInterfaceType]: ...

class InitiativeType(java.lang.Enum['InitiativeType']):
    REQUIRES: typing.ClassVar['InitiativeType'] = ...
    PROVIDES: typing.ClassVar['InitiativeType'] = ...
    BOTH: typing.ClassVar['InitiativeType'] = ...
    PHANTOM: typing.ClassVar['InitiativeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'InitiativeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'InitiativeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['InitiativeType']: ...

class Interconnection:
    def __init__(self): ...
    def getContent(self) -> java.util.List[typing.Any]: ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Interconnections:
    def __init__(self): ...
    def getInterconnectionOrMonitorInterconnection(self) -> java.util.List[typing.Any]: ...

class InterfaceType:
    def __init__(self): ...
    def getBusRef(self) -> java.lang.String: ...
    def getComponentInstanceRef(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def setBusRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setComponentInstanceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class IpxactFileType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> 'IpxactURI': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVlnv(self) -> 'LibraryRefType': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, ipxactURI: 'IpxactURI') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVlnv(self, libraryRefType: 'LibraryRefType') -> None: ...

class IpxactFilesType:
    def __init__(self): ...
    def getIpxactFile(self) -> java.util.List[IpxactFileType]: ...

class IpxactURI:
    def __init__(self): ...
    def getValue(self) -> java.lang.String: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Kind:
    def __init__(self): ...
    def getCustom(self) -> java.lang.String: ...
    def getValue(self) -> 'KindType': ...
    def setCustom(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, kindType: 'KindType') -> None: ...

class KindType(java.lang.Enum['KindType']):
    TLM_PORT: typing.ClassVar['KindType'] = ...
    TLM_SOCKET: typing.ClassVar['KindType'] = ...
    SIMPLE_SOCKET: typing.ClassVar['KindType'] = ...
    MULTI_SOCKET: typing.ClassVar['KindType'] = ...
    CUSTOM: typing.ClassVar['KindType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'KindType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'KindType': ...
    @staticmethod
    def values() -> typing.MutableSequence['KindType']: ...

class LanguageType:
    def __init__(self): ...
    def getValue(self) -> java.lang.String: ...
    def isStrict(self) -> bool: ...
    def setStrict(self, boolean: bool) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LibraryRefType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVersion(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LinkerCommandFile:
    def __init__(self): ...
    def getCommandLineSwitch(self) -> 'StringExpression': ...
    def getEnable(self) -> 'UnsignedBitExpression': ...
    def getGeneratorRef(self) -> java.util.List[GeneratorRef]: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> 'StringExpression': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setCommandLineSwitch(self, stringExpression: 'StringExpression') -> None: ...
    def setEnable(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, stringExpression: 'StringExpression') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class LoadConstraint:
    def __init__(self): ...
    def getCellSpecification(self) -> CellSpecification: ...
    def getCount(self) -> 'UnsignedPositiveIntExpression': ...
    def setCellSpecification(self, cellSpecification: CellSpecification) -> None: ...
    def setCount(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...

class LocalAddressBankType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'LocalAddressBankType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> BankAlignmentType: ...
    def getBaseAddress(self) -> 'UnsignedLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'LocalAddressBankType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: BankAlignmentType) -> None: ...
    def setBaseAddress(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...

class LocalBankedBankType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'LocalBankedBankType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> BankAlignmentType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'LocalBankedBankType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: BankAlignmentType) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...

class LocalMemoryMapType:
    def __init__(self): ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class MemoryMapDefinitions:
    def __init__(self): ...
    def getMemoryMapDefinition(self) -> java.util.List['MemoryMapDefinitions.MemoryMapDefinition']: ...
    class MemoryMapDefinition:
        def __init__(self): ...
        def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getMemoryRemap(self) -> java.util.List['MemoryRemapDefinitionType']: ...
        def getName(self) -> java.lang.String: ...
        def getShared(self) -> 'SharedType': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setShared(self, sharedType: 'SharedType') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class MemoryMapRefType:
    def __init__(self): ...
    def getMemoryMapRef(self) -> java.lang.String: ...
    def getModeRef(self) -> java.util.List['MemoryMapRefType.ModeRef']: ...
    def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ModeRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryMapType:
    def __init__(self): ...
    def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMemoryMap(self) -> java.util.List[typing.Any]: ...
    def getMemoryMapDefinitionRef(self) -> 'MemoryMapType.MemoryMapDefinitionRef': ...
    def getMemoryRemap(self) -> java.util.List['MemoryRemapType']: ...
    def getName(self) -> java.lang.String: ...
    def getShared(self) -> 'SharedType': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMemoryMapDefinitionRef(self, memoryMapDefinitionRef: 'MemoryMapType.MemoryMapDefinitionRef') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShared(self, sharedType: 'SharedType') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class MemoryMapDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryMaps:
    def __init__(self): ...
    def getMemoryMap(self) -> java.util.List[MemoryMapType]: ...

class MemoryRemapDefinitions:
    def __init__(self): ...
    def getMemoryRemapDefinition(self) -> java.util.List['MemoryRemapDefinitions.MemoryRemapDefinition']: ...
    class MemoryRemapDefinition:
        def __init__(self): ...
        def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class MemoryRemapRef:
    def __init__(self): ...
    def getMemoryRemapRef(self) -> java.lang.String: ...
    def setMemoryRemapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryRemapType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMemoryMap(self) -> java.util.List[typing.Any]: ...
    def getModeRef(self) -> java.util.List['ModeRef']: ...
    def getName(self) -> java.lang.String: ...
    def getRemapDefinitionRef(self) -> 'MemoryRemapType.RemapDefinitionRef': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRemapDefinitionRef(self, remapDefinitionRef: 'MemoryRemapType.RemapDefinitionRef') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class RemapDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ModeLinks:
    def __init__(self): ...
    def getModeLink(self) -> java.util.List['ModeLinks.ModeLink']: ...
    class ModeLink:
        def __init__(self): ...
        def getExternalModeReference(self) -> 'ModeLinks.ModeLink.ExternalModeReference': ...
        def getId(self) -> java.lang.String: ...
        def getModeReference(self) -> 'ModeLinks.ModeLink.ModeReference': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setExternalModeReference(self, externalModeReference: 'ModeLinks.ModeLink.ExternalModeReference') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setModeReference(self, modeReference: 'ModeLinks.ModeLink.ModeReference') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        class ExternalModeReference:
            def __init__(self): ...
            def getModeRef(self) -> java.lang.String: ...
            def setModeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class ModeReference:
            def __init__(self): ...
            def getModeRef(self) -> java.lang.String: ...
            def setModeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ModeRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPriority(self) -> java.math.BigInteger: ...
    def getValue(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPriority(self, bigInteger: java.math.BigInteger) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ModelType:
    def __init__(self): ...
    def getInstantiations(self) -> 'ModelType.Instantiations': ...
    def getPorts(self) -> 'ModelType.Ports': ...
    def getViews(self) -> 'ModelType.Views': ...
    def setInstantiations(self, instantiations: 'ModelType.Instantiations') -> None: ...
    def setPorts(self, ports: 'ModelType.Ports') -> None: ...
    def setViews(self, views: 'ModelType.Views') -> None: ...
    class Instantiations:
        def __init__(self): ...
        def getInstantiationsGroup(self) -> java.util.List[typing.Any]: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['Port']: ...
    class Views:
        def __init__(self): ...
        def getView(self) -> java.util.List['ModelType.Views.View']: ...
        class View:
            def __init__(self): ...
            def getComponentInstantiationRef(self) -> java.lang.String: ...
            def getDescription(self) -> java.lang.String: ...
            def getDesignConfigurationInstantiationRef(self) -> java.lang.String: ...
            def getDesignInstantiationRef(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getEnvIdentifier(self) -> java.util.List['ModelType.Views.View.EnvIdentifier']: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setComponentInstantiationRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDesignConfigurationInstantiationRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDesignInstantiationRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class EnvIdentifier:
                def __init__(self): ...
                def getId(self) -> java.lang.String: ...
                def getValue(self) -> java.lang.String: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ModifiedWriteValue:
    def __init__(self): ...
    def getModify(self) -> java.lang.String: ...
    def getValue(self) -> 'ModifiedWriteValueType': ...
    def setModify(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, modifiedWriteValueType: 'ModifiedWriteValueType') -> None: ...

class ModifiedWriteValueType(java.lang.Enum['ModifiedWriteValueType']):
    ONE_TO_CLEAR: typing.ClassVar['ModifiedWriteValueType'] = ...
    ONE_TO_SET: typing.ClassVar['ModifiedWriteValueType'] = ...
    ONE_TO_TOGGLE: typing.ClassVar['ModifiedWriteValueType'] = ...
    ZERO_TO_CLEAR: typing.ClassVar['ModifiedWriteValueType'] = ...
    ZERO_TO_SET: typing.ClassVar['ModifiedWriteValueType'] = ...
    ZERO_TO_TOGGLE: typing.ClassVar['ModifiedWriteValueType'] = ...
    CLEAR: typing.ClassVar['ModifiedWriteValueType'] = ...
    SET: typing.ClassVar['ModifiedWriteValueType'] = ...
    MODIFY: typing.ClassVar['ModifiedWriteValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ModifiedWriteValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ModifiedWriteValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ModifiedWriteValueType']: ...

class ModuleParameterArrays:
    def __init__(self): ...
    def getArray(self) -> java.util.List['ModuleParameterArrays.Array']: ...
    class Array:
        def __init__(self): ...
        def getArrayId(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getLeft(self) -> 'UnsignedIntExpression': ...
        def getRight(self) -> 'UnsignedIntExpression': ...
        def setArrayId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class ModuleParameterType:
    def __init__(self): ...
    def getArrays(self) -> ModuleParameterArrays: ...
    def getChoiceRef(self) -> java.lang.String: ...
    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
    def getConstrained(self) -> java.util.List[java.lang.String]: ...
    def getDataType(self) -> java.lang.String: ...
    def getDataTypeDefinition(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMaximum(self) -> java.lang.String: ...
    def getMinimum(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOrder(self) -> float: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameterId(self) -> java.lang.String: ...
    def getPrefix(self) -> java.lang.String: ...
    def getPrompt(self) -> java.lang.String: ...
    def getResolve(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getSign(self) -> 'SignType': ...
    def getType(self) -> FormatType: ...
    def getUnit(self) -> java.lang.String: ...
    def getUsageType(self) -> java.lang.String: ...
    def getValue(self) -> 'StringExpression': ...
    def getVectors(self) -> 'ModuleParameterType.Vectors': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setArrays(self, moduleParameterArrays: ModuleParameterArrays) -> None: ...
    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDataType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDataTypeDefinition(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOrder(self, float: float) -> None: ...
    def setParameterId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPrefix(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setResolve(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSign(self, signType: 'SignType') -> None: ...
    def setType(self, formatType: FormatType) -> None: ...
    def setUnit(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsageType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, stringExpression: 'StringExpression') -> None: ...
    def setVectors(self, vectors: 'ModuleParameterType.Vectors') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Vectors:
        def __init__(self): ...
        def getVector(self) -> java.util.List['ModuleParameterType.Vectors.Vector']: ...
        class Vector:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getLeft(self) -> 'UnsignedIntExpression': ...
            def getRight(self) -> 'UnsignedIntExpression': ...
            def getVectorId(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
            def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
            def setVectorId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MonitorInterconnection:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMonitorInterface(self) -> java.util.List['MonitorInterfaceType']: ...
    def getMonitoredActiveInterface(self) -> 'MonitorInterfaceType': ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMonitoredActiveInterface(self, monitorInterfaceType: 'MonitorInterfaceType') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class NameValuePairType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getValue(self) -> 'StringExpression': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, stringExpression: 'StringExpression') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ObjectFactory:
    def __init__(self): ...
    def createAbstractionDefPortConstraintsType(self) -> AbstractionDefPortConstraintsType: ...
    def createAbstractionDefinition(self) -> AbstractionDefinition: ...
    def createAbstractionDefinitionPorts(self) -> AbstractionDefinition.Ports: ...
    def createAbstractionDefinitionPortsPort(self) -> AbstractionDefinition.Ports.Port: ...
    def createAbstractionDefinitionPortsPortTransactional(self) -> AbstractionDefinition.Ports.Port.Transactional: ...
    def createAbstractionDefinitionPortsPortTransactionalOnInitiator(self) -> AbstractionDefinition.Ports.Port.Transactional.OnInitiator: ...
    def createAbstractionDefinitionPortsPortTransactionalOnSystem(self) -> AbstractionDefinition.Ports.Port.Transactional.OnSystem: ...
    def createAbstractionDefinitionPortsPortTransactionalOnTarget(self) -> AbstractionDefinition.Ports.Port.Transactional.OnTarget: ...
    def createAbstractionTypes(self) -> AbstractionTypes: ...
    def createAbstractionTypesAbstractionType(self) -> AbstractionTypes.AbstractionType: ...
    def createAbstractionTypesAbstractionTypePortMaps(self) -> AbstractionTypes.AbstractionType.PortMaps: ...
    def createAbstractionTypesAbstractionTypePortMapsPortMap(self) -> AbstractionTypes.AbstractionType.PortMaps.PortMap: ...
    def createAbstractionTypesAbstractionTypePortMapsPortMapLogicalPort(self) -> AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort: ...
    def createAbstractionTypesAbstractionTypePortMapsPortMapPhysicalPort(self) -> AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort: ...
    def createAbstractionTypesAbstractionTypePortMapsPortMapPhysicalPortSubPort(self) -> AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort.SubPort: ...
    def createAbstractor(self, abstractorType: AbstractorType) -> jakarta.xml.bind.JAXBElement[AbstractorType]: ...
    def createAbstractorBusInterfaceType(self) -> AbstractorBusInterfaceType: ...
    def createAbstractorGenerator(self, instanceGeneratorType: 'InstanceGeneratorType') -> jakarta.xml.bind.JAXBElement['InstanceGeneratorType']: ...
    def createAbstractorGenerators(self) -> AbstractorGenerators: ...
    def createAbstractorModelType(self) -> AbstractorModelType: ...
    def createAbstractorModelTypeInstantiations(self) -> AbstractorModelType.Instantiations: ...
    def createAbstractorModelTypePorts(self) -> AbstractorModelType.Ports: ...
    def createAbstractorModelTypeViews(self) -> AbstractorModelType.Views: ...
    def createAbstractorModelTypeViewsView(self) -> AbstractorModelType.Views.View: ...
    def createAbstractorModelTypeViewsViewEnvIdentifier(self) -> AbstractorModelType.Views.View.EnvIdentifier: ...
    def createAbstractorPortStructuredType(self) -> AbstractorPortStructuredType: ...
    def createAbstractorPortStructuredTypeInterface(self) -> AbstractorPortStructuredType.Interface: ...
    def createAbstractorPortStructuredTypeStruct(self) -> AbstractorPortStructuredType.Struct: ...
    def createAbstractorPortStructuredTypeSubPorts(self) -> AbstractorPortStructuredType.SubPorts: ...
    def createAbstractorPortStructuredTypeUnion(self) -> AbstractorPortStructuredType.Union: ...
    def createAbstractorPortTransactionalType(self) -> AbstractorPortTransactionalType: ...
    def createAbstractorPortTransactionalTypeConnection(self) -> AbstractorPortTransactionalType.Connection: ...
    def createAbstractorPortType(self) -> AbstractorPortType: ...
    def createAbstractorPortWireType(self) -> 'AbstractorPortWireType': ...
    def createAbstractorSubPortType(self) -> AbstractorSubPortType: ...
    def createAbstractorType(self) -> AbstractorType: ...
    def createAbstractorTypeAbstractorInterfaces(self) -> AbstractorType.AbstractorInterfaces: ...
    def createAbstractorTypeAbstractorMode(self) -> AbstractorType.AbstractorMode: ...
    def createAccess(self, accessType: AccessType) -> jakarta.xml.bind.JAXBElement[AccessType]: ...
    def createAccessPolicies(self) -> AccessPolicies: ...
    def createAccessPoliciesAccessPolicy(self) -> AccessPolicies.AccessPolicy: ...
    def createAccessPropertiesType(self) -> AccessPropertiesType: ...
    def createAccessRestrictionType(self) -> AccessRestrictionType: ...
    def createAccessRestrictions(self, accessRestrictionsType: AccessRestrictionsType) -> jakarta.xml.bind.JAXBElement[AccessRestrictionsType]: ...
    def createAccessRestrictionsType(self) -> AccessRestrictionsType: ...
    def createActiveInterface(self) -> 'ActiveInterface': ...
    def createActiveInterfaceExcludePorts(self) -> 'ActiveInterface.ExcludePorts': ...
    def createActiveInterfaceExcludePortsExcludePort(self) -> 'ActiveInterface.ExcludePorts.ExcludePort': ...
    def createAdHocConnection(self) -> AdHocConnection: ...
    def createAdHocConnectionPortReferences(self) -> AdHocConnection.PortReferences: ...
    @typing.overload
    def createAdHocConnectionPortReferencesInternalPortReference(self, internalPortReference: AdHocConnection.PortReferences.InternalPortReference) -> jakarta.xml.bind.JAXBElement[AdHocConnection.PortReferences.InternalPortReference]: ...
    @typing.overload
    def createAdHocConnectionPortReferencesInternalPortReference(self) -> AdHocConnection.PortReferences.InternalPortReference: ...
    def createAdHocConnections(self) -> AdHocConnections: ...
    def createAddrSpaceRefType(self) -> AddrSpaceRefType: ...
    def createAddressBankDefinitionType(self) -> AddressBankDefinitionType: ...
    def createAddressBankDefinitionTypeAccessHandles(self) -> AddressBankDefinitionType.AccessHandles: ...
    def createAddressBankDefinitionTypeBankDefinitionRef(self) -> AddressBankDefinitionType.BankDefinitionRef: ...
    def createAddressBankType(self) -> AddressBankType: ...
    def createAddressBankTypeAccessHandles(self) -> AddressBankType.AccessHandles: ...
    def createAddressBankTypeBankDefinitionRef(self) -> AddressBankType.BankDefinitionRef: ...
    def createAddressBlock(self, addressBlockType: AddressBlockType) -> jakarta.xml.bind.JAXBElement[AddressBlockType]: ...
    def createAddressBlockDefinitions(self) -> AddressBlockDefinitions: ...
    def createAddressBlockDefinitionsAddressBlockDefinition(self) -> AddressBlockDefinitions.AddressBlockDefinition: ...
    def createAddressBlockRef(self) -> AddressBlockRef: ...
    def createAddressBlockType(self) -> AddressBlockType: ...
    def createAddressBlockTypeAccessHandles(self) -> AddressBlockType.AccessHandles: ...
    def createAddressBlockTypeAddressBlockDefinitionRef(self) -> AddressBlockType.AddressBlockDefinitionRef: ...
    def createAddressSpaces(self) -> AddressSpaces: ...
    def createAddressSpacesAddressSpace(self) -> AddressSpaces.AddressSpace: ...
    def createAddressSpacesAddressSpaceSegments(self) -> AddressSpaces.AddressSpace.Segments: ...
    def createAddressSpacesAddressSpaceSegmentsSegment(self) -> AddressSpaces.AddressSpace.Segments.Segment: ...
    def createAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> jakarta.xml.bind.JAXBElement['UnsignedPositiveLongintExpression']: ...
    def createAlternateRegisterRef(self) -> AlternateRegisterRef: ...
    def createAlternateRegisters(self) -> AlternateRegisters: ...
    def createAlternateRegistersAlternateRegister(self) -> AlternateRegisters.AlternateRegister: ...
    def createAlternateRegistersAlternateRegisterAccessHandles(self) -> AlternateRegisters.AlternateRegister.AccessHandles: ...
    def createAlwaysOn(self, unsignedBitExpression: 'UnsignedBitExpression') -> jakarta.xml.bind.JAXBElement['UnsignedBitExpression']: ...
    def createArray(self) -> Array: ...
    def createArrays(self) -> Arrays: ...
    def createArraysArray(self) -> Arrays.Array: ...
    def createAssertion(self) -> Assertion: ...
    def createAssertions(self) -> Assertions: ...
    def createBank(self, addressBankType: AddressBankType) -> jakarta.xml.bind.JAXBElement[AddressBankType]: ...
    def createBankDefinitions(self) -> BankDefinitions: ...
    def createBankDefinitionsBankDefinition(self) -> BankDefinitions.BankDefinition: ...
    def createBankRef(self) -> BankRef: ...
    def createBankedBankType(self) -> 'BankedBankType': ...
    def createBankedBankTypeAccessHandles(self) -> 'BankedBankType.AccessHandles': ...
    def createBankedBankTypeBank(self) -> 'BankedBankType.Bank': ...
    def createBankedBankTypeBankDefinitionRef(self) -> 'BankedBankType.BankDefinitionRef': ...
    def createBankedBlockType(self) -> BankedBlockType: ...
    def createBankedBlockTypeAccessHandles(self) -> BankedBlockType.AccessHandles: ...
    def createBankedDefinitionBankType(self) -> 'BankedDefinitionBankType': ...
    def createBankedDefinitionBankTypeAccessHandles(self) -> 'BankedDefinitionBankType.AccessHandles': ...
    def createBankedDefinitionBankTypeBank(self) -> 'BankedDefinitionBankType.Bank': ...
    def createBankedDefinitionBankTypeBankDefinitionRef(self) -> 'BankedDefinitionBankType.BankDefinitionRef': ...
    def createBankedSubspaceType(self) -> BankedSubspaceType: ...
    def createBaseAddress(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> jakarta.xml.bind.JAXBElement['UnsignedLongintExpression']: ...
    def createBitStride(self) -> 'BitStride': ...
    def createBitsInLau(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> jakarta.xml.bind.JAXBElement['UnsignedPositiveLongintExpression']: ...
    def createBusDefinition(self) -> BusDefinition: ...
    def createBusDefinitionSystemGroupNames(self) -> BusDefinition.SystemGroupNames: ...
    def createBusDefinitionSystemGroupNamesSystemGroupName(self) -> BusDefinition.SystemGroupNames.SystemGroupName: ...
    def createBusInterface(self, busInterfaceType: 'BusInterfaceType') -> jakarta.xml.bind.JAXBElement['BusInterfaceType']: ...
    def createBusInterfaceType(self) -> 'BusInterfaceType': ...
    def createBusInterfaceTypeInitiator(self) -> 'BusInterfaceType.Initiator': ...
    def createBusInterfaceTypeInitiatorAddressSpaceRef(self) -> 'BusInterfaceType.Initiator.AddressSpaceRef': ...
    def createBusInterfaceTypeInitiatorAddressSpaceRefModeRef(self) -> 'BusInterfaceType.Initiator.AddressSpaceRef.ModeRef': ...
    def createBusInterfaceTypeMirroredSystem(self) -> 'BusInterfaceType.MirroredSystem': ...
    def createBusInterfaceTypeMirroredTarget(self) -> 'BusInterfaceType.MirroredTarget': ...
    def createBusInterfaceTypeMirroredTargetBaseAddresses(self) -> 'BusInterfaceType.MirroredTarget.BaseAddresses': ...
    def createBusInterfaceTypeMirroredTargetBaseAddressesRemapAddresses(self) -> 'BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses': ...
    def createBusInterfaceTypeMirroredTargetBaseAddressesRemapAddressesRemapAddress(self) -> 'BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses.RemapAddress': ...
    def createBusInterfaceTypeMonitor(self) -> 'BusInterfaceType.Monitor': ...
    def createBusInterfaceTypeSystem(self) -> 'BusInterfaceType.System': ...
    def createBusInterfaceTypeTarget(self) -> 'BusInterfaceType.Target': ...
    def createBusInterfaceTypeTargetFileSetRefGroup(self) -> 'BusInterfaceType.Target.FileSetRefGroup': ...
    def createBusInterfaces(self) -> BusInterfaces: ...
    def createBusWidth(self, unsignedIntExpression: 'UnsignedIntExpression') -> jakarta.xml.bind.JAXBElement['UnsignedIntExpression']: ...
    def createCatalog(self) -> Catalog: ...
    def createCellSpecification(self) -> CellSpecification: ...
    def createCellSpecificationCellFunction(self) -> CellSpecification.CellFunction: ...
    def createChannels(self) -> Channels: ...
    def createChannelsChannel(self) -> Channels.Channel: ...
    def createChannelsChannelBusInterfaceRef(self) -> Channels.Channel.BusInterfaceRef: ...
    def createChoices(self) -> 'Choices': ...
    def createChoicesChoice(self) -> 'Choices.Choice': ...
    def createChoicesChoiceEnumeration(self) -> 'Choices.Choice.Enumeration': ...
    def createClearboxElementRefType(self) -> ClearboxElementRefType: ...
    def createClearboxElementType(self) -> ClearboxElementType: ...
    def createClockDriver(self) -> 'ClockDriver': ...
    def createClockDriverType(self) -> 'ClockDriverType': ...
    def createClockDriverTypeClockPeriod(self) -> 'ClockDriverType.ClockPeriod': ...
    def createClockDriverTypeClockPulseDuration(self) -> 'ClockDriverType.ClockPulseDuration': ...
    def createClockDriverTypeClockPulseOffset(self) -> 'ClockDriverType.ClockPulseOffset': ...
    def createComplexBaseExpression(self) -> ComplexBaseExpression: ...
    def createComplexTiedValueExpression(self) -> ComplexTiedValueExpression: ...
    def createComponent(self, componentType: ComponentType) -> jakarta.xml.bind.JAXBElement[ComponentType]: ...
    def createComponentGenerator(self, instanceGeneratorType: 'InstanceGeneratorType') -> jakarta.xml.bind.JAXBElement['InstanceGeneratorType']: ...
    def createComponentGenerators(self) -> ComponentGenerators: ...
    def createComponentInstance(self) -> ComponentInstance: ...
    def createComponentInstances(self) -> ComponentInstances: ...
    def createComponentInstantiationType(self) -> ComponentInstantiationType: ...
    def createComponentInstantiationTypeClearboxElementRefs(self) -> ComponentInstantiationType.ClearboxElementRefs: ...
    def createComponentInstantiationTypeModuleParameters(self) -> ComponentInstantiationType.ModuleParameters: ...
    def createComponentType(self) -> ComponentType: ...
    def createComponentTypeClearboxElements(self) -> ComponentType.ClearboxElements: ...
    def createComponentTypeCpus(self) -> ComponentType.Cpus: ...
    def createComponentTypeCpusCpu(self) -> ComponentType.Cpus.Cpu: ...
    def createComponentTypeCpusCpuRegions(self) -> ComponentType.Cpus.Cpu.Regions: ...
    def createComponentTypeCpusCpuRegionsRegion(self) -> ComponentType.Cpus.Cpu.Regions.Region: ...
    def createComponentTypeModes(self) -> ComponentType.Modes: ...
    def createComponentTypeModesMode(self) -> ComponentType.Modes.Mode: ...
    def createComponentTypeModesModeFieldSlice(self) -> ComponentType.Modes.Mode.FieldSlice: ...
    def createComponentTypeModesModeFieldSliceAddressSpaceRef(self) -> ComponentType.Modes.Mode.FieldSlice.AddressSpaceRef: ...
    def createComponentTypeModesModeFieldSliceMemoryMapRef(self) -> ComponentType.Modes.Mode.FieldSlice.MemoryMapRef: ...
    def createComponentTypeModesModePortSlice(self) -> ComponentType.Modes.Mode.PortSlice: ...
    def createComponentTypeModesModePortSlicePortRef(self) -> ComponentType.Modes.Mode.PortSlice.PortRef: ...
    def createComponentTypePowerDomains(self) -> ComponentType.PowerDomains: ...
    def createComponentTypePowerDomainsPowerDomain(self) -> ComponentType.PowerDomains.PowerDomain: ...
    def createComponentTypeResetTypes(self) -> ComponentType.ResetTypes: ...
    def createComponentTypeResetTypesResetType(self) -> ComponentType.ResetTypes.ResetType: ...
    def createComponentTypeTypeDefinitions(self) -> ComponentType.TypeDefinitions: ...
    def createConfigurableArrays(self) -> ConfigurableArrays: ...
    def createConfigurableArraysArray(self) -> ConfigurableArrays.Array: ...
    def createConfigurableElementValue(self) -> 'ConfigurableElementValue': ...
    def createConfigurableElementValues(self) -> ConfigurableElementValues: ...
    def createConfigurableLibraryRefType(self) -> ConfigurableLibraryRefType: ...
    def createConstraintSet(self) -> ConstraintSet: ...
    def createConstraintSetRef(self) -> ConstraintSetRef: ...
    def createConstraintSetVector(self) -> ConstraintSet.Vector: ...
    def createConstraintSets(self) -> ConstraintSets: ...
    def createDefaultValue(self, qualifiedExpression: 'QualifiedExpression') -> jakarta.xml.bind.JAXBElement['QualifiedExpression']: ...
    def createDependency(self) -> 'Dependency': ...
    def createDescription(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createDesign(self) -> Design: ...
    def createDesignConfiguration(self) -> DesignConfiguration: ...
    def createDesignConfigurationInstantiationType(self) -> DesignConfigurationInstantiationType: ...
    def createDesignConfigurationInterconnectionConfiguration(self) -> DesignConfiguration.InterconnectionConfiguration: ...
    def createDesignConfigurationInterconnectionConfigurationAbstractorInstances(self) -> DesignConfiguration.InterconnectionConfiguration.AbstractorInstances: ...
    def createDesignConfigurationInterconnectionConfigurationAbstractorInstancesAbstractorInstance(self) -> DesignConfiguration.InterconnectionConfiguration.AbstractorInstances.AbstractorInstance: ...
    def createDesignConfigurationInterconnectionConfigurationAbstractorInstancesInterfaceRef(self) -> DesignConfiguration.InterconnectionConfiguration.AbstractorInstances.InterfaceRef: ...
    def createDesignConfigurationViewConfiguration(self) -> DesignConfiguration.ViewConfiguration: ...
    def createDesignConfigurationViewConfigurationView(self) -> DesignConfiguration.ViewConfiguration.View: ...
    def createDesignInstantiationType(self) -> DesignInstantiationType: ...
    def createDim(self) -> 'Dim': ...
    def createDisplayName(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createDomainTypeDef(self) -> DomainTypeDef: ...
    def createDomainTypeDefTypeDefinition(self) -> DomainTypeDef.TypeDefinition: ...
    def createDomainTypeDefTypeName(self) -> DomainTypeDef.TypeName: ...
    def createDomainTypeDefViewRef(self) -> DomainTypeDef.ViewRef: ...
    def createDomainTypeDefs(self) -> DomainTypeDefs: ...
    def createDriveConstraint(self) -> DriveConstraint: ...
    def createDriver(self, driverType: DriverType) -> jakarta.xml.bind.JAXBElement[DriverType]: ...
    def createDriverType(self) -> DriverType: ...
    def createDriverTypeViewRef(self) -> DriverType.ViewRef: ...
    def createDrivers(self) -> Drivers: ...
    def createEnumeratedValueType(self) -> EnumeratedValueType: ...
    def createEnumeratedValues(self) -> EnumeratedValues: ...
    def createEnumeratedValuesEnumerationDefinitionRef(self) -> EnumeratedValues.EnumerationDefinitionRef: ...
    def createEnumerationDefinitions(self) -> EnumerationDefinitions: ...
    def createEnumerationDefinitionsEnumerationDefinition(self) -> EnumerationDefinitions.EnumerationDefinition: ...
    def createExecutableImage(self) -> ExecutableImage: ...
    def createExecutableImageFileSetRefGroup(self) -> ExecutableImage.FileSetRefGroup: ...
    def createExecutableImageLanguageTools(self) -> ExecutableImage.LanguageTools: ...
    @typing.overload
    def createExecutableImageLanguageToolsFileBuilder(self, fileBuilder: ExecutableImage.LanguageTools.FileBuilder) -> jakarta.xml.bind.JAXBElement[ExecutableImage.LanguageTools.FileBuilder]: ...
    @typing.overload
    def createExecutableImageLanguageToolsFileBuilder(self) -> ExecutableImage.LanguageTools.FileBuilder: ...
    def createExecutableImageLanguageToolsLinker(self, stringExpression: 'StringExpression') -> jakarta.xml.bind.JAXBElement['StringExpression']: ...
    def createExecutableImageLanguageToolsLinkerFlags(self, stringExpression: 'StringExpression') -> jakarta.xml.bind.JAXBElement['StringExpression']: ...
    def createExtendedVectorsType(self) -> ExtendedVectorsType: ...
    def createExtendedVectorsTypeVector(self) -> ExtendedVectorsType.Vector: ...
    def createExternalPortReference(self) -> ExternalPortReference: ...
    def createExternalTypeDefinitions(self) -> ExternalTypeDefinitions: ...
    def createFieldAccessPolicyDefinitionRef(self) -> FieldAccessPolicyDefinitionRef: ...
    def createFieldAccessPolicyDefinitions(self) -> FieldAccessPolicyDefinitions: ...
    def createFieldAccessPolicyDefinitionsFieldAccessPolicyDefinition(self) -> FieldAccessPolicyDefinitions.FieldAccessPolicyDefinition: ...
    def createFieldAccessPropertiesType(self) -> FieldAccessPropertiesType: ...
    def createFieldDefinitions(self) -> FieldDefinitions: ...
    def createFieldDefinitionsFieldDefinition(self) -> FieldDefinitions.FieldDefinition: ...
    def createFieldDefinitionsFieldDefinitionResets(self) -> FieldDefinitions.FieldDefinition.Resets: ...
    def createFieldMap(self) -> FieldMap: ...
    def createFieldMapFieldSlice(self) -> FieldMap.FieldSlice: ...
    def createFieldMapModeRef(self) -> FieldMap.ModeRef: ...
    def createFieldMaps(self) -> FieldMaps: ...
    def createFieldRef(self) -> FieldRef: ...
    def createFieldType(self) -> 'FieldType': ...
    def createFieldTypeAccessHandles(self) -> 'FieldType.AccessHandles': ...
    def createFieldTypeAliasOf(self) -> 'FieldType.AliasOf': ...
    def createFieldTypeArray(self) -> 'FieldType.Array': ...
    def createFieldTypeFieldAccessPolicies(self) -> 'FieldType.FieldAccessPolicies': ...
    def createFieldTypeFieldAccessPoliciesFieldAccessPolicy(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy': ...
    def createFieldTypeFieldAccessPoliciesFieldAccessPolicyBroadcasts(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Broadcasts': ...
    def createFieldTypeFieldAccessPoliciesFieldAccessPolicyBroadcastsBroadcastTo(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Broadcasts.BroadcastTo': ...
    def createFieldTypeFieldAccessPoliciesFieldAccessPolicyTestable(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable': ...
    def createFieldTypeFieldDefinitionRef(self) -> 'FieldType.FieldDefinitionRef': ...
    def createFieldTypeResets(self) -> 'FieldType.Resets': ...
    def createFile(self) -> 'File': ...
    def createFileBuildCommand(self) -> 'File.BuildCommand': ...
    def createFileBuildCommandFlags(self) -> 'File.BuildCommand.Flags': ...
    def createFileBuilderType(self) -> FileBuilderType: ...
    def createFileExportedName(self) -> 'File.ExportedName': ...
    def createFileImageType(self) -> 'File.ImageType': ...
    def createFileIsIncludeFile(self) -> 'File.IsIncludeFile': ...
    def createFileLogicalName(self) -> 'File.LogicalName': ...
    def createFileSet(self, fileSetType: 'FileSetType') -> jakarta.xml.bind.JAXBElement['FileSetType']: ...
    def createFileSetRef(self) -> FileSetRef: ...
    def createFileSetType(self) -> 'FileSetType': ...
    def createFileSetTypeFunction(self) -> 'FileSetType.Function': ...
    def createFileSetTypeFunctionArgument(self) -> 'FileSetType.Function.Argument': ...
    def createFileSetTypeFunctionSourceFile(self) -> 'FileSetType.Function.SourceFile': ...
    def createFileSetTypeGroup(self) -> 'FileSetType.Group': ...
    def createFileSets(self) -> FileSets: ...
    def createFileType(self) -> FileType: ...
    def createGenerator(self) -> 'Generator': ...
    def createGeneratorChain(self) -> GeneratorChain: ...
    def createGeneratorChainChainGroup(self) -> GeneratorChain.ChainGroup: ...
    def createGeneratorChainGeneratorChainSelector(self) -> GeneratorChain.GeneratorChainSelector: ...
    def createGeneratorRef(self) -> GeneratorRef: ...
    def createGeneratorSelectorType(self) -> GeneratorSelectorType: ...
    def createGeneratorType(self) -> GeneratorType: ...
    def createGeneratorTypeApiType(self) -> GeneratorType.ApiType: ...
    def createGeneratorTypeTransportMethods(self) -> GeneratorType.TransportMethods: ...
    def createGeneratorTypeTransportMethodsTransportMethod(self) -> GeneratorType.TransportMethods.TransportMethod: ...
    def createGroup(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createGroupSelector(self) -> GroupSelector: ...
    def createGroupSelectorName(self) -> GroupSelector.Name: ...
    def createHierInterfaceType(self) -> HierInterfaceType: ...
    def createIndex(self) -> 'Index': ...
    def createIndices(self, indicesType: IndicesType) -> jakarta.xml.bind.JAXBElement[IndicesType]: ...
    def createIndicesType(self) -> IndicesType: ...
    def createIndirectAddressRef(self) -> IndirectAddressRef: ...
    def createIndirectAddressRefAddressSpaceRef(self) -> IndirectAddressRef.AddressSpaceRef: ...
    def createIndirectAddressRefMemoryMapRef(self) -> IndirectAddressRef.MemoryMapRef: ...
    def createIndirectDataRef(self) -> IndirectDataRef: ...
    def createIndirectInterface(self, indirectInterfaceType: IndirectInterfaceType) -> jakarta.xml.bind.JAXBElement[IndirectInterfaceType]: ...
    def createIndirectInterfaceType(self) -> IndirectInterfaceType: ...
    def createIndirectInterfaces(self) -> IndirectInterfaces: ...
    def createInitiative(self, initiativeType: InitiativeType) -> jakarta.xml.bind.JAXBElement[InitiativeType]: ...
    def createInstanceGeneratorType(self) -> 'InstanceGeneratorType': ...
    def createInstanceGeneratorTypeGroup(self) -> 'InstanceGeneratorType.Group': ...
    def createInstanceName(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createInterconnection(self) -> Interconnection: ...
    def createInterconnectionHierInterface(self, hierInterfaceType: HierInterfaceType) -> jakarta.xml.bind.JAXBElement[HierInterfaceType]: ...
    def createInterconnectionName(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createInterconnections(self) -> Interconnections: ...
    def createInterfaceType(self) -> InterfaceType: ...
    def createIpxactFileType(self) -> IpxactFileType: ...
    def createIpxactFilesType(self) -> IpxactFilesType: ...
    def createIpxactURI(self) -> IpxactURI: ...
    def createKind(self) -> Kind: ...
    def createLanguageType(self) -> LanguageType: ...
    def createLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> jakarta.xml.bind.JAXBElement['UnsignedIntExpression']: ...
    def createLibraryRefType(self) -> LibraryRefType: ...
    def createLinkerCommandFile(self) -> LinkerCommandFile: ...
    def createLoadConstraint(self) -> LoadConstraint: ...
    def createLocalAddressBankType(self) -> LocalAddressBankType: ...
    def createLocalAddressBankTypeAccessHandles(self) -> LocalAddressBankType.AccessHandles: ...
    def createLocalBankedBankType(self) -> LocalBankedBankType: ...
    def createLocalBankedBankTypeAccessHandles(self) -> LocalBankedBankType.AccessHandles: ...
    def createLocalMemoryMapType(self) -> LocalMemoryMapType: ...
    def createMemoryMapDefinitions(self) -> MemoryMapDefinitions: ...
    def createMemoryMapDefinitionsMemoryMapDefinition(self) -> MemoryMapDefinitions.MemoryMapDefinition: ...
    def createMemoryMapRef(self, memoryMapRefType: MemoryMapRefType) -> jakarta.xml.bind.JAXBElement[MemoryMapRefType]: ...
    def createMemoryMapRefType(self) -> MemoryMapRefType: ...
    def createMemoryMapRefTypeModeRef(self) -> MemoryMapRefType.ModeRef: ...
    def createMemoryMapType(self) -> MemoryMapType: ...
    def createMemoryMapTypeMemoryMapDefinitionRef(self) -> MemoryMapType.MemoryMapDefinitionRef: ...
    def createMemoryMaps(self) -> MemoryMaps: ...
    def createMemoryRemap(self, memoryRemapType: MemoryRemapType) -> jakarta.xml.bind.JAXBElement[MemoryRemapType]: ...
    def createMemoryRemapDefinitionType(self) -> 'MemoryRemapDefinitionType': ...
    def createMemoryRemapDefinitionTypeBank(self) -> 'MemoryRemapDefinitionType.Bank': ...
    def createMemoryRemapDefinitionTypeRemapDefinitionRef(self) -> 'MemoryRemapDefinitionType.RemapDefinitionRef': ...
    def createMemoryRemapDefinitions(self) -> MemoryRemapDefinitions: ...
    def createMemoryRemapDefinitionsMemoryRemapDefinition(self) -> MemoryRemapDefinitions.MemoryRemapDefinition: ...
    def createMemoryRemapRef(self) -> MemoryRemapRef: ...
    def createMemoryRemapType(self) -> MemoryRemapType: ...
    def createMemoryRemapTypeRemapDefinitionRef(self) -> MemoryRemapType.RemapDefinitionRef: ...
    def createModeLinks(self) -> ModeLinks: ...
    def createModeLinksModeLink(self) -> ModeLinks.ModeLink: ...
    def createModeLinksModeLinkExternalModeReference(self) -> ModeLinks.ModeLink.ExternalModeReference: ...
    def createModeLinksModeLinkModeReference(self) -> ModeLinks.ModeLink.ModeReference: ...
    def createModeRef(self) -> ModeRef: ...
    def createModel(self, modelType: ModelType) -> jakarta.xml.bind.JAXBElement[ModelType]: ...
    def createModelType(self) -> ModelType: ...
    def createModelTypeInstantiations(self) -> ModelType.Instantiations: ...
    def createModelTypePorts(self) -> ModelType.Ports: ...
    def createModelTypeViews(self) -> ModelType.Views: ...
    def createModelTypeViewsView(self) -> ModelType.Views.View: ...
    def createModelTypeViewsViewEnvIdentifier(self) -> ModelType.Views.View.EnvIdentifier: ...
    def createModifiedWriteValue(self) -> ModifiedWriteValue: ...
    def createModuleParameterArrays(self) -> ModuleParameterArrays: ...
    def createModuleParameterArraysArray(self) -> ModuleParameterArrays.Array: ...
    def createModuleParameterType(self) -> ModuleParameterType: ...
    def createModuleParameterTypeVectors(self) -> ModuleParameterType.Vectors: ...
    def createModuleParameterTypeVectorsVector(self) -> ModuleParameterType.Vectors.Vector: ...
    def createMonitorInterconnection(self) -> MonitorInterconnection: ...
    def createMonitorInterfaceType(self) -> 'MonitorInterfaceType': ...
    def createNameValuePairType(self) -> NameValuePairType: ...
    def createOtherClockDriver(self) -> 'OtherClockDriver': ...
    def createOtherClocks(self) -> 'OtherClocks': ...
    def createPackets(self, portPacketsType: 'PortPacketsType') -> jakarta.xml.bind.JAXBElement['PortPacketsType']: ...
    def createParameter(self, parameterType: 'ParameterType') -> jakarta.xml.bind.JAXBElement['ParameterType']: ...
    def createParameterType(self) -> 'ParameterType': ...
    def createParameters(self) -> 'Parameters': ...
    def createPartSelect(self) -> 'PartSelect': ...
    def createPathSegmentType(self) -> 'PathSegmentType': ...
    def createPayload(self) -> 'Payload': ...
    def createPayloadExtension(self) -> 'Payload.Extension': ...
    def createPhase(self, realExpression: 'RealExpression') -> jakarta.xml.bind.JAXBElement['RealExpression']: ...
    def createPort(self) -> 'Port': ...
    def createPortAccessHandle(self) -> 'PortAccessHandle': ...
    def createPortAccessHandleIndices(self) -> 'PortAccessHandle.Indices': ...
    def createPortAccessHandleIndicesIndex(self) -> 'PortAccessHandle.Indices.Index': ...
    def createPortAccessHandleViewRef(self) -> 'PortAccessHandle.ViewRef': ...
    @typing.overload
    def createPortAccessType(self, simplePortAccessType: 'SimplePortAccessType') -> jakarta.xml.bind.JAXBElement['SimplePortAccessType']: ...
    @typing.overload
    def createPortAccessType(self) -> 'PortAccessType': ...
    def createPortAccessTypeAccessHandles(self) -> 'PortAccessType.AccessHandles': ...
    def createPortPacketFieldType(self) -> 'PortPacketFieldType': ...
    def createPortPacketFieldsType(self) -> 'PortPacketFieldsType': ...
    def createPortPacketType(self) -> 'PortPacketType': ...
    def createPortPacketsType(self) -> 'PortPacketsType': ...
    def createPortPathSegmentType(self) -> 'PortPathSegmentType': ...
    def createPortSliceType(self) -> 'PortSliceType': ...
    def createPortSliceTypePathSegments(self) -> 'PortSliceType.PathSegments': ...
    def createPortSlicesType(self) -> 'PortSlicesType': ...
    def createPortStructuredType(self) -> 'PortStructuredType': ...
    def createPortStructuredTypeSubPorts(self) -> 'PortStructuredType.SubPorts': ...
    def createPortTransactionalType(self) -> 'PortTransactionalType': ...
    def createPortTransactionalTypeConnection(self) -> 'PortTransactionalType.Connection': ...
    def createPortTransactionalTypePowerConstraints(self) -> 'PortTransactionalType.PowerConstraints': ...
    def createPortType(self) -> 'PortType': ...
    def createPortWireType(self) -> 'PortWireType': ...
    def createPortWireTypePowerConstraints(self) -> 'PortWireType.PowerConstraints': ...
    def createPowerDomainLinks(self) -> 'PowerDomainLinks': ...
    def createPowerDomainLinksPowerDomainLink(self) -> 'PowerDomainLinks.PowerDomainLink': ...
    def createPowerDomainLinksPowerDomainLinkInternalPowerDomainReference(self) -> 'PowerDomainLinks.PowerDomainLink.InternalPowerDomainReference': ...
    def createPowerDomainRef(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createPresence(self, presenceType: 'PresenceType') -> jakarta.xml.bind.JAXBElement['PresenceType']: ...
    def createProtocol(self) -> 'Protocol': ...
    def createProtocolProtocolType(self) -> 'Protocol.ProtocolType': ...
    def createQualifiedExpression(self) -> 'QualifiedExpression': ...
    def createQualifierType(self) -> 'QualifierType': ...
    def createQualifierTypeIsClockEn(self) -> 'QualifierType.IsClockEn': ...
    def createQualifierTypeIsFlowControl(self) -> 'QualifierType.IsFlowControl': ...
    def createQualifierTypeIsPowerEn(self) -> 'QualifierType.IsPowerEn': ...
    def createQualifierTypeIsReset(self) -> 'QualifierType.IsReset': ...
    def createQualifierTypeIsUser(self) -> 'QualifierType.IsUser': ...
    def createRange(self) -> 'Range': ...
    def createReadAction(self) -> 'ReadAction': ...
    def createReadResponse(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> jakarta.xml.bind.JAXBElement['UnsignedBitVectorExpression']: ...
    def createRealExpression(self) -> 'RealExpression': ...
    def createRegisterDefinitions(self) -> 'RegisterDefinitions': ...
    def createRegisterDefinitionsRegisterDefinition(self) -> 'RegisterDefinitions.RegisterDefinition': ...
    def createRegisterFile(self) -> 'RegisterFile': ...
    def createRegisterFileAccessHandles(self) -> 'RegisterFile.AccessHandles': ...
    def createRegisterFileDefinitions(self) -> 'RegisterFileDefinitions': ...
    def createRegisterFileDefinitionsRegisterFileDefinition(self) -> 'RegisterFileDefinitions.RegisterFileDefinition': ...
    def createRegisterFileRef(self) -> 'RegisterFileRef': ...
    def createRegisterFileRegister(self) -> 'RegisterFile.Register': ...
    def createRegisterFileRegisterAccessHandles(self) -> 'RegisterFile.Register.AccessHandles': ...
    def createRegisterFileRegisterFileDefinitionRef(self) -> 'RegisterFile.RegisterFileDefinitionRef': ...
    def createRegisterFileRegisterRegisterDefinitionRef(self) -> 'RegisterFile.Register.RegisterDefinitionRef': ...
    def createRegisterRef(self) -> 'RegisterRef': ...
    def createRequiresDriver(self) -> 'RequiresDriver': ...
    def createReset(self) -> 'Reset': ...
    def createResetTypeLinks(self) -> 'ResetTypeLinks': ...
    def createResetTypeLinksResetTypeLink(self) -> 'ResetTypeLinks.ResetTypeLink': ...
    def createResetTypeLinksResetTypeLinkExternalResetTypeReference(self) -> 'ResetTypeLinks.ResetTypeLink.ExternalResetTypeReference': ...
    def createResetTypeLinksResetTypeLinkResetTypeReference(self) -> 'ResetTypeLinks.ResetTypeLink.ResetTypeReference': ...
    def createRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> jakarta.xml.bind.JAXBElement['UnsignedIntExpression']: ...
    def createServiceTypeDef(self) -> 'ServiceTypeDef': ...
    def createServiceTypeDefTypeDefinition(self) -> 'ServiceTypeDef.TypeDefinition': ...
    def createServiceTypeDefTypeName(self) -> 'ServiceTypeDef.TypeName': ...
    def createShortDescription(self, string: typing.Union[java.lang.String, str]) -> jakarta.xml.bind.JAXBElement[java.lang.String]: ...
    def createSignalTypeDef(self) -> 'SignalTypeDef': ...
    def createSignalTypeDefViewRef(self) -> 'SignalTypeDef.ViewRef': ...
    def createSignalTypeDefs(self) -> 'SignalTypeDefs': ...
    def createSignedLongintExpression(self) -> 'SignedLongintExpression': ...
    def createSimpleAccessHandle(self) -> 'SimpleAccessHandle': ...
    def createSimpleAccessHandlePathSegments(self) -> 'SimpleAccessHandle.PathSegments': ...
    def createSimpleAccessHandleViewRef(self) -> 'SimpleAccessHandle.ViewRef': ...
    def createSingleShotDriver(self) -> 'SingleShotDriver': ...
    def createSingleShotDriverSingleShotDuration(self) -> 'SingleShotDriver.SingleShotDuration': ...
    def createSingleShotDriverSingleShotOffset(self) -> 'SingleShotDriver.SingleShotOffset': ...
    def createSingleShotDriverSingleShotValue(self) -> 'SingleShotDriver.SingleShotValue': ...
    def createSliceType(self) -> 'SliceType': ...
    def createSliceTypePathSegments(self) -> 'SliceType.PathSegments': ...
    def createSlicedAccessHandle(self) -> 'SlicedAccessHandle': ...
    def createSlicedAccessHandleViewRef(self) -> 'SlicedAccessHandle.ViewRef': ...
    def createSlicesType(self) -> 'SlicesType': ...
    def createStride(self) -> 'Stride': ...
    def createStringExpression(self) -> 'StringExpression': ...
    def createStructPortTypeDefs(self) -> 'StructPortTypeDefs': ...
    def createStructPortTypeDefsStructPortTypeDef(self) -> 'StructPortTypeDefs.StructPortTypeDef': ...
    def createStructPortTypeDefsStructPortTypeDefTypeDefinition(self) -> 'StructPortTypeDefs.StructPortTypeDef.TypeDefinition': ...
    def createStructPortTypeDefsStructPortTypeDefTypeName(self) -> 'StructPortTypeDefs.StructPortTypeDef.TypeName': ...
    def createStructPortTypeDefsStructPortTypeDefTypeParameters(self) -> 'StructPortTypeDefs.StructPortTypeDef.TypeParameters': ...
    def createStructPortTypeDefsStructPortTypeDefViewRef(self) -> 'StructPortTypeDefs.StructPortTypeDef.ViewRef': ...
    def createSubPortReference(self) -> 'SubPortReference': ...
    def createSubPortType(self) -> 'SubPortType': ...
    def createSubspaceMap(self, subspaceRefType: 'SubspaceRefType') -> jakarta.xml.bind.JAXBElement['SubspaceRefType']: ...
    def createSubspaceRefType(self) -> 'SubspaceRefType': ...
    def createTimingConstraint(self) -> 'TimingConstraint': ...
    def createTransTypeDef(self) -> 'TransTypeDef': ...
    def createTransTypeDefTypeDefinition(self) -> 'TransTypeDef.TypeDefinition': ...
    def createTransTypeDefTypeName(self) -> 'TransTypeDef.TypeName': ...
    def createTransTypeDefViewRef(self) -> 'TransTypeDef.ViewRef': ...
    def createTransTypeDefs(self) -> 'TransTypeDefs': ...
    def createTransactionalPowerConstraintType(self) -> 'TransactionalPowerConstraintType': ...
    def createTransparentBridge(self) -> 'TransparentBridge': ...
    def createTypeDefinitions(self) -> 'TypeDefinitions': ...
    def createTypeDefinitionsModes(self) -> 'TypeDefinitions.Modes': ...
    def createTypeDefinitionsModesMode(self) -> 'TypeDefinitions.Modes.Mode': ...
    def createTypeDefinitionsResetTypes(self) -> 'TypeDefinitions.ResetTypes': ...
    def createTypeDefinitionsResetTypesResetType(self) -> 'TypeDefinitions.ResetTypes.ResetType': ...
    def createTypeDefinitionsViews(self) -> 'TypeDefinitions.Views': ...
    def createTypeDefinitionsViewsView(self) -> 'TypeDefinitions.Views.View': ...
    def createTypeParameter(self, moduleParameterType: ModuleParameterType) -> jakarta.xml.bind.JAXBElement[ModuleParameterType]: ...
    def createTypeParameters(self) -> 'TypeParameters': ...
    def createUnresolvedStringExpression(self) -> 'UnresolvedStringExpression': ...
    def createUnresolvedUnsignedBitExpression(self) -> 'UnresolvedUnsignedBitExpression': ...
    def createUnresolvedUnsignedPositiveIntExpression(self) -> 'UnresolvedUnsignedPositiveIntExpression': ...
    def createUnsignedBitExpression(self) -> 'UnsignedBitExpression': ...
    def createUnsignedBitVectorExpression(self) -> 'UnsignedBitVectorExpression': ...
    def createUnsignedIntExpression(self) -> 'UnsignedIntExpression': ...
    def createUnsignedLongintExpression(self) -> 'UnsignedLongintExpression': ...
    def createUnsignedPositiveIntExpression(self) -> 'UnsignedPositiveIntExpression': ...
    def createUnsignedPositiveLongintExpression(self) -> 'UnsignedPositiveLongintExpression': ...
    def createValue(self, stringExpression: 'StringExpression') -> jakarta.xml.bind.JAXBElement['StringExpression']: ...
    def createVector(self) -> 'Vector': ...
    def createVectors(self) -> 'Vectors': ...
    def createVendorExtensions(self) -> 'VendorExtensions': ...
    def createViewLinks(self) -> 'ViewLinks': ...
    def createViewLinksViewLink(self) -> 'ViewLinks.ViewLink': ...
    def createViewLinksViewLinkExternalViewReference(self) -> 'ViewLinks.ViewLink.ExternalViewReference': ...
    def createViewLinksViewLinkViewReference(self) -> 'ViewLinks.ViewLink.ViewReference': ...
    def createViewRef(self) -> 'ViewRef': ...
    def createVolatile(self, boolean: bool) -> jakarta.xml.bind.JAXBElement[bool]: ...
    def createWire(self) -> 'Wire': ...
    def createWireOnInitiator(self) -> 'Wire.OnInitiator': ...
    def createWireOnSystem(self) -> 'Wire.OnSystem': ...
    def createWireOnTarget(self) -> 'Wire.OnTarget': ...
    def createWireOnTargetWidth(self) -> 'Wire.OnTarget.Width': ...
    def createWirePowerConstraintType(self) -> 'WirePowerConstraintType': ...
    def createWireTypeDef(self) -> 'WireTypeDef': ...
    def createWireTypeDefTypeDefinition(self) -> 'WireTypeDef.TypeDefinition': ...
    def createWireTypeDefTypeName(self) -> 'WireTypeDef.TypeName': ...
    def createWireTypeDefViewRef(self) -> 'WireTypeDef.ViewRef': ...
    def createWireTypeDefs(self) -> 'WireTypeDefs': ...
    def createWriteValueConstraint(self, writeValueConstraintType: 'WriteValueConstraintType') -> jakarta.xml.bind.JAXBElement['WriteValueConstraintType']: ...
    def createWriteValueConstraintType(self) -> 'WriteValueConstraintType': ...

class OtherClocks:
    def __init__(self): ...
    def getOtherClockDriver(self) -> java.util.List['OtherClockDriver']: ...

class ParameterType:
    def __init__(self): ...
    def getArrays(self) -> ConfigurableArrays: ...
    def getChoiceRef(self) -> java.lang.String: ...
    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMaximum(self) -> java.lang.String: ...
    def getMinimum(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOrder(self) -> float: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameterId(self) -> java.lang.String: ...
    def getPrefix(self) -> java.lang.String: ...
    def getPrompt(self) -> java.lang.String: ...
    def getResolve(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getSign(self) -> 'SignType': ...
    def getType(self) -> FormatType: ...
    def getUnit(self) -> java.lang.String: ...
    def getValue(self) -> 'StringExpression': ...
    def getVectors(self) -> 'Vectors': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setArrays(self, configurableArrays: ConfigurableArrays) -> None: ...
    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOrder(self, float: float) -> None: ...
    def setParameterId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPrefix(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setResolve(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSign(self, signType: 'SignType') -> None: ...
    def setType(self, formatType: FormatType) -> None: ...
    def setUnit(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, stringExpression: 'StringExpression') -> None: ...
    def setVectors(self, vectors: 'Vectors') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class Parameters:
    def __init__(self): ...
    def getParameter(self) -> java.util.List[ParameterType]: ...

class PartSelect:
    def __init__(self): ...
    def getContent(self) -> java.util.List[typing.Any]: ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Payload:
    def __init__(self): ...
    def getExtension(self) -> 'Payload.Extension': ...
    def getName(self) -> java.lang.String: ...
    def getType(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setExtension(self, extension: 'Payload.Extension') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Extension:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isMandatory(self) -> bool: ...
        def setMandatory(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PortAccessType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'PortAccessType.AccessHandles': ...
    def getPortAccessType(self) -> 'SimplePortAccessType': ...
    def setAccessHandles(self, accessHandles: 'PortAccessType.AccessHandles') -> None: ...
    def setPortAccessType(self, simplePortAccessType: 'SimplePortAccessType') -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['PortAccessHandle']: ...

class PortPacketFieldType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEndianness(self) -> EndianessType: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getQualifier(self) -> 'QualifierType': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getValue(self) -> 'UnsignedBitVectorExpression': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWidth(self) -> 'UnresolvedUnsignedPositiveIntExpression': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEndianness(self, endianessType: EndianessType) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setQualifier(self, qualifierType: 'QualifierType') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setWidth(self, unresolvedUnsignedPositiveIntExpression: 'UnresolvedUnsignedPositiveIntExpression') -> None: ...

class PortPacketFieldsType:
    def __init__(self): ...
    def getPacketField(self) -> java.util.List[PortPacketFieldType]: ...

class PortPacketType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEndianness(self) -> EndianessType: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getPacketFields(self) -> PortPacketFieldsType: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEndianness(self, endianessType: EndianessType) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPacketFields(self, portPacketFieldsType: PortPacketFieldsType) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class PortPacketsType:
    def __init__(self): ...
    def getPacket(self) -> java.util.List[PortPacketType]: ...

class PortSliceType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPathSegments(self) -> 'PortSliceType.PathSegments': ...
    def getRange(self) -> 'Range': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPathSegments(self, pathSegments: 'PortSliceType.PathSegments') -> None: ...
    def setRange(self, range: 'Range') -> None: ...
    class PathSegments:
        def __init__(self): ...
        def getPathSegment(self) -> java.util.List['PortPathSegmentType']: ...

class PortSlicesType:
    def __init__(self): ...
    def getSlice(self) -> java.util.List[PortSliceType]: ...

class PortStructuredType:
    def __init__(self): ...
    def getInterface(self) -> AbstractorPortStructuredType.Interface: ...
    def getStruct(self) -> AbstractorPortStructuredType.Struct: ...
    def getStructPortTypeDefs(self) -> 'StructPortTypeDefs': ...
    def getSubPorts(self) -> 'PortStructuredType.SubPorts': ...
    def getUnion(self) -> AbstractorPortStructuredType.Union: ...
    def getVectors(self) -> ExtendedVectorsType: ...
    def isPacked(self) -> bool: ...
    def setInterface(self, interface: AbstractorPortStructuredType.Interface) -> None: ...
    def setPacked(self, boolean: bool) -> None: ...
    def setStruct(self, struct: AbstractorPortStructuredType.Struct) -> None: ...
    def setStructPortTypeDefs(self, structPortTypeDefs: 'StructPortTypeDefs') -> None: ...
    def setSubPorts(self, subPorts: 'PortStructuredType.SubPorts') -> None: ...
    def setUnion(self, union: AbstractorPortStructuredType.Union) -> None: ...
    def setVectors(self, extendedVectorsType: ExtendedVectorsType) -> None: ...
    class SubPorts:
        def __init__(self): ...
        def getSubPort(self) -> java.util.List['SubPortType']: ...

class PortTransactionalType:
    def __init__(self): ...
    def getBusWidth(self) -> 'UnsignedIntExpression': ...
    def getConnection(self) -> 'PortTransactionalType.Connection': ...
    def getInitiative(self) -> InitiativeType: ...
    def getKind(self) -> Kind: ...
    def getPowerConstraints(self) -> 'PortTransactionalType.PowerConstraints': ...
    def getProtocol(self) -> 'Protocol': ...
    def getQualifier(self) -> 'QualifierType': ...
    def getTransTypeDefs(self) -> 'TransTypeDefs': ...
    def isAllLogicalInitiativesAllowed(self) -> bool: ...
    def setAllLogicalInitiativesAllowed(self, boolean: bool) -> None: ...
    def setBusWidth(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setConnection(self, connection: 'PortTransactionalType.Connection') -> None: ...
    def setInitiative(self, initiativeType: InitiativeType) -> None: ...
    def setKind(self, kind: Kind) -> None: ...
    def setPowerConstraints(self, powerConstraints: 'PortTransactionalType.PowerConstraints') -> None: ...
    def setProtocol(self, protocol: 'Protocol') -> None: ...
    def setQualifier(self, qualifierType: 'QualifierType') -> None: ...
    def setTransTypeDefs(self, transTypeDefs: 'TransTypeDefs') -> None: ...
    class Connection:
        def __init__(self): ...
        def getMaxConnections(self) -> 'UnsignedIntExpression': ...
        def getMinConnections(self) -> 'UnsignedIntExpression': ...
        def setMaxConnections(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
        def setMinConnections(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    class PowerConstraints:
        def __init__(self): ...
        def getPowerConstraint(self) -> java.util.List['TransactionalPowerConstraintType']: ...

class PortType:
    def __init__(self): ...
    def getAccess(self) -> PortAccessType: ...
    def getArrays(self) -> Arrays: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFieldMaps(self) -> FieldMaps: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getStructured(self) -> PortStructuredType: ...
    def getTransactional(self) -> PortTransactionalType: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWire(self) -> 'PortWireType': ...
    def setAccess(self, portAccessType: PortAccessType) -> None: ...
    def setArrays(self, arrays: Arrays) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFieldMaps(self, fieldMaps: FieldMaps) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setStructured(self, portStructuredType: PortStructuredType) -> None: ...
    def setTransactional(self, portTransactionalType: PortTransactionalType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setWire(self, portWireType: 'PortWireType') -> None: ...

class PortWireType:
    def __init__(self): ...
    def getConstraintSets(self) -> ConstraintSets: ...
    def getDirection(self) -> ComponentPortDirectionType: ...
    def getDomainTypeDefs(self) -> DomainTypeDefs: ...
    def getDrivers(self) -> Drivers: ...
    def getPowerConstraints(self) -> 'PortWireType.PowerConstraints': ...
    def getQualifier(self) -> 'QualifierType': ...
    def getSignalTypeDefs(self) -> 'SignalTypeDefs': ...
    def getVectors(self) -> ExtendedVectorsType: ...
    def getWireTypeDefs(self) -> 'WireTypeDefs': ...
    def isAllLogicalDirectionsAllowed(self) -> bool: ...
    def setAllLogicalDirectionsAllowed(self, boolean: bool) -> None: ...
    def setConstraintSets(self, constraintSets: ConstraintSets) -> None: ...
    def setDirection(self, componentPortDirectionType: ComponentPortDirectionType) -> None: ...
    def setDomainTypeDefs(self, domainTypeDefs: DomainTypeDefs) -> None: ...
    def setDrivers(self, drivers: Drivers) -> None: ...
    def setPowerConstraints(self, powerConstraints: 'PortWireType.PowerConstraints') -> None: ...
    def setQualifier(self, qualifierType: 'QualifierType') -> None: ...
    def setSignalTypeDefs(self, signalTypeDefs: 'SignalTypeDefs') -> None: ...
    def setVectors(self, extendedVectorsType: ExtendedVectorsType) -> None: ...
    def setWireTypeDefs(self, wireTypeDefs: 'WireTypeDefs') -> None: ...
    class PowerConstraints:
        def __init__(self): ...
        def getPowerConstraint(self) -> java.util.List['WirePowerConstraintType']: ...

class PowerDomainLinks:
    def __init__(self): ...
    def getPowerDomainLink(self) -> java.util.List['PowerDomainLinks.PowerDomainLink']: ...
    class PowerDomainLink:
        def __init__(self): ...
        def getExternalPowerDomainReference(self) -> 'StringExpression': ...
        def getId(self) -> java.lang.String: ...
        def getInternalPowerDomainReference(self) -> java.util.List['PowerDomainLinks.PowerDomainLink.InternalPowerDomainReference']: ...
        def setExternalPowerDomainReference(self, stringExpression: 'StringExpression') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class InternalPowerDomainReference:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PresenceType(java.lang.Enum['PresenceType']):
    REQUIRED: typing.ClassVar['PresenceType'] = ...
    ILLEGAL: typing.ClassVar['PresenceType'] = ...
    OPTIONAL: typing.ClassVar['PresenceType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'PresenceType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'PresenceType': ...
    @staticmethod
    def values() -> typing.MutableSequence['PresenceType']: ...

class Protocol:
    def __init__(self): ...
    def getPayload(self) -> Payload: ...
    def getProtocolType(self) -> 'Protocol.ProtocolType': ...
    def setPayload(self, payload: Payload) -> None: ...
    def setProtocolType(self, protocolType: 'Protocol.ProtocolType') -> None: ...
    class ProtocolType:
        def __init__(self): ...
        def getCustom(self) -> java.lang.String: ...
        def getValue(self) -> 'ProtocolTypeType': ...
        def setCustom(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, protocolTypeType: 'ProtocolTypeType') -> None: ...

class ProtocolTypeType(java.lang.Enum['ProtocolTypeType']):
    TLM: typing.ClassVar['ProtocolTypeType'] = ...
    CUSTOM: typing.ClassVar['ProtocolTypeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ProtocolTypeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ProtocolTypeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ProtocolTypeType']: ...

class QualifierType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getIsClockEn(self) -> 'QualifierType.IsClockEn': ...
    def getIsFlowControl(self) -> 'QualifierType.IsFlowControl': ...
    def getIsPowerEn(self) -> 'QualifierType.IsPowerEn': ...
    def getIsReset(self) -> 'QualifierType.IsReset': ...
    def getIsUser(self) -> 'QualifierType.IsUser': ...
    def isIsAddress(self) -> bool: ...
    def isIsClock(self) -> bool: ...
    def isIsData(self) -> bool: ...
    def isIsInterrupt(self) -> bool: ...
    def isIsOpcode(self) -> bool: ...
    def isIsProtection(self) -> bool: ...
    def isIsRequest(self) -> bool: ...
    def isIsResponse(self) -> bool: ...
    def isIsValid(self) -> bool: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsAddress(self, boolean: bool) -> None: ...
    def setIsClock(self, boolean: bool) -> None: ...
    def setIsClockEn(self, isClockEn: 'QualifierType.IsClockEn') -> None: ...
    def setIsData(self, boolean: bool) -> None: ...
    def setIsFlowControl(self, isFlowControl: 'QualifierType.IsFlowControl') -> None: ...
    def setIsInterrupt(self, boolean: bool) -> None: ...
    def setIsOpcode(self, boolean: bool) -> None: ...
    def setIsPowerEn(self, isPowerEn: 'QualifierType.IsPowerEn') -> None: ...
    def setIsProtection(self, boolean: bool) -> None: ...
    def setIsRequest(self, boolean: bool) -> None: ...
    def setIsReset(self, isReset: 'QualifierType.IsReset') -> None: ...
    def setIsResponse(self, boolean: bool) -> None: ...
    def setIsUser(self, isUser: 'QualifierType.IsUser') -> None: ...
    def setIsValid(self, boolean: bool) -> None: ...
    class IsClockEn:
        def __init__(self): ...
        def getLevel(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setLevel(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class IsFlowControl:
        def __init__(self): ...
        def getFlowType(self) -> java.lang.String: ...
        def getUser(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setFlowType(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setUser(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class IsPowerEn:
        def __init__(self): ...
        def getLevel(self) -> java.lang.String: ...
        def getPowerDomainRef(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setLevel(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setPowerDomainRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class IsReset:
        def __init__(self): ...
        def getLevel(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setLevel(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class IsUser:
        def __init__(self): ...
        def getUser(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setUser(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...

class Range:
    def __init__(self): ...
    def getLeft(self) -> 'UnsignedIntExpression': ...
    def getRight(self) -> 'UnsignedIntExpression': ...
    def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class ReadAction:
    def __init__(self): ...
    def getModify(self) -> java.lang.String: ...
    def getValue(self) -> 'ReadActionType': ...
    def setModify(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, readActionType: 'ReadActionType') -> None: ...

class ReadActionType(java.lang.Enum['ReadActionType']):
    CLEAR: typing.ClassVar['ReadActionType'] = ...
    SET: typing.ClassVar['ReadActionType'] = ...
    MODIFY: typing.ClassVar['ReadActionType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ReadActionType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ReadActionType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ReadActionType']: ...

class RegisterDefinitions:
    def __init__(self): ...
    def getRegisterDefinition(self) -> java.util.List['RegisterDefinitions.RegisterDefinition']: ...
    class RegisterDefinition:
        def __init__(self): ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getField(self) -> java.util.List['FieldType']: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getSize(self) -> 'UnsignedPositiveIntExpression': ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setSize(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...

class RegisterFile:
    def __init__(self): ...
    def getAccessHandles(self) -> 'RegisterFile.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressOffset(self) -> 'UnsignedLongintExpression': ...
    def getArray(self) -> Array: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
    def getRegisterData(self) -> java.util.List[typing.Any]: ...
    def getRegisterFileDefinitionRef(self) -> 'RegisterFile.RegisterFileDefinitionRef': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAccessHandles(self, accessHandles: 'RegisterFile.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setAddressOffset(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
    def setArray(self, array: Array) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
    def setRegisterFileDefinitionRef(self, registerFileDefinitionRef: 'RegisterFile.RegisterFileDefinitionRef') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...
    class Register:
        def __init__(self): ...
        def getAccessHandles(self) -> 'RegisterFile.Register.AccessHandles': ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getAddressOffset(self) -> 'UnsignedLongintExpression': ...
        def getAlternateRegisters(self) -> AlternateRegisters: ...
        def getArray(self) -> Array: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getField(self) -> java.util.List['FieldType']: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> Parameters: ...
        def getRegisterDefinitionRef(self) -> 'RegisterFile.Register.RegisterDefinitionRef': ...
        def getShortDescription(self) -> java.lang.String: ...
        def getSize(self) -> 'UnsignedPositiveIntExpression': ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setAccessHandles(self, accessHandles: 'RegisterFile.Register.AccessHandles') -> None: ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setAddressOffset(self, unsignedLongintExpression: 'UnsignedLongintExpression') -> None: ...
        def setAlternateRegisters(self, alternateRegisters: AlternateRegisters) -> None: ...
        def setArray(self, array: Array) -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: Parameters) -> None: ...
        def setRegisterDefinitionRef(self, registerDefinitionRef: 'RegisterFile.Register.RegisterDefinitionRef') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setSize(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...
        class AccessHandles:
            def __init__(self): ...
            def getAccessHandle(self) -> java.util.List['SimpleAccessHandle']: ...
        class RegisterDefinitionRef:
            def __init__(self): ...
            def getTypeDefinitions(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class RegisterFileDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class RegisterFileDefinitions:
    def __init__(self): ...
    def getRegisterFileDefinition(self) -> java.util.List['RegisterFileDefinitions.RegisterFileDefinition']: ...
    class RegisterFileDefinition:
        def __init__(self): ...
        def getAccessPolicies(self) -> AccessPolicies: ...
        def getAddressUnitBits(self) -> 'UnsignedPositiveLongintExpression': ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getRange(self) -> 'UnsignedPositiveLongintExpression': ...
        def getRegisterData(self) -> java.util.List[typing.Any]: ...
        def getShortDescription(self) -> java.lang.String: ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
        def setAddressUnitBits(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRange(self, unsignedPositiveLongintExpression: 'UnsignedPositiveLongintExpression') -> None: ...
        def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class RegisterFileRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getIndices(self) -> IndicesType: ...
    def getRegisterFileRef(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndices(self, indicesType: IndicesType) -> None: ...
    def setRegisterFileRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class RegisterRef:
    def __init__(self): ...
    def getIndices(self) -> IndicesType: ...
    def getRegisterRef(self) -> java.lang.String: ...
    def setIndices(self, indicesType: IndicesType) -> None: ...
    def setRegisterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class RequiresDriver:
    def __init__(self): ...
    def getDriverType(self) -> java.lang.String: ...
    def isValue(self) -> bool: ...
    def setDriverType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, boolean: bool) -> None: ...

class Reset:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getMask(self) -> 'UnsignedBitVectorExpression': ...
    def getResetTypeRef(self) -> java.lang.String: ...
    def getValue(self) -> 'UnsignedBitVectorExpression': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMask(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setResetTypeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...

class ResetTypeLinks:
    def __init__(self): ...
    def getResetTypeLink(self) -> java.util.List['ResetTypeLinks.ResetTypeLink']: ...
    class ResetTypeLink:
        def __init__(self): ...
        def getExternalResetTypeReference(self) -> 'ResetTypeLinks.ResetTypeLink.ExternalResetTypeReference': ...
        def getId(self) -> java.lang.String: ...
        def getResetTypeReference(self) -> 'ResetTypeLinks.ResetTypeLink.ResetTypeReference': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setExternalResetTypeReference(self, externalResetTypeReference: 'ResetTypeLinks.ResetTypeLink.ExternalResetTypeReference') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setResetTypeReference(self, resetTypeReference: 'ResetTypeLinks.ResetTypeLink.ResetTypeReference') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        class ExternalResetTypeReference:
            def __init__(self): ...
            def getResetTypeRef(self) -> java.lang.String: ...
            def setResetTypeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class ResetTypeReference:
            def __init__(self): ...
            def getResetTypeRef(self) -> java.lang.String: ...
            def setResetTypeRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ReturnTypeType(java.lang.Enum['ReturnTypeType']):
    VOID: typing.ClassVar['ReturnTypeType'] = ...
    INT: typing.ClassVar['ReturnTypeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ReturnTypeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ReturnTypeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ReturnTypeType']: ...

class ServiceTypeDef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getTypeDefinition(self) -> java.util.List['ServiceTypeDef.TypeDefinition']: ...
    def getTypeName(self) -> 'ServiceTypeDef.TypeName': ...
    def getTypeParameters(self) -> 'TypeParameters': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeName(self, typeName: 'ServiceTypeDef.TypeName') -> None: ...
    def setTypeParameters(self, typeParameters: 'TypeParameters') -> None: ...
    class TypeDefinition:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isImplicit(self) -> bool: ...
        def setImplicit(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SharedType(java.lang.Enum['SharedType']):
    YES: typing.ClassVar['SharedType'] = ...
    NO: typing.ClassVar['SharedType'] = ...
    UNDEFINED: typing.ClassVar['SharedType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'SharedType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'SharedType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SharedType']: ...

class SignType(java.lang.Enum['SignType']):
    SIGNED: typing.ClassVar['SignType'] = ...
    UNSIGNED: typing.ClassVar['SignType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'SignType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'SignType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SignType']: ...

class SignalTypeDef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getSignalType(self) -> java.lang.String: ...
    def getViewRef(self) -> java.util.List['SignalTypeDef.ViewRef']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSignalType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SignalTypeDefs:
    def __init__(self): ...
    def getSignalTypeDef(self) -> java.util.List[SignalTypeDef]: ...

class SimpleAccessHandle:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPathSegments(self) -> 'SimpleAccessHandle.PathSegments': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getViewRef(self) -> java.util.List['SimpleAccessHandle.ViewRef']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPathSegments(self, pathSegments: 'SimpleAccessHandle.PathSegments') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class PathSegments:
        def __init__(self): ...
        def getPathSegment(self) -> java.util.List['PathSegmentType']: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SimpleClearboxType(java.lang.Enum['SimpleClearboxType']):
    SIGNAL: typing.ClassVar['SimpleClearboxType'] = ...
    PIN: typing.ClassVar['SimpleClearboxType'] = ...
    INTERFACE: typing.ClassVar['SimpleClearboxType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'SimpleClearboxType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'SimpleClearboxType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SimpleClearboxType']: ...

class SimpleFileType(java.lang.Enum['SimpleFileType']):
    UNKNOWN: typing.ClassVar['SimpleFileType'] = ...
    C_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    CPP_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    ASM_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    VHDL_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    VHDL_SOURCE_87: typing.ClassVar['SimpleFileType'] = ...
    VHDL_SOURCE_93: typing.ClassVar['SimpleFileType'] = ...
    VHDL_SOURCE_2002: typing.ClassVar['SimpleFileType'] = ...
    VHDL_SOURCE_2008: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_SOURCE_95: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_SOURCE_2001: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_SOURCE_2005: typing.ClassVar['SimpleFileType'] = ...
    SW_OBJECT: typing.ClassVar['SimpleFileType'] = ...
    SW_OBJECT_LIBRARY: typing.ClassVar['SimpleFileType'] = ...
    VHDL_BINARY_LIBRARY: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_BINARY_LIBRARY: typing.ClassVar['SimpleFileType'] = ...
    UNELABORATED_HDL: typing.ClassVar['SimpleFileType'] = ...
    EXECUTABLE_HDL: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_3_0: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_3_1: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_3_1_A: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_2009: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_2012: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_VERILOG_SOURCE_2017: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE_2_0: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE_2_0_1: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE_2_1: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE_2_2: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_SOURCE_2_3: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_BINARY_LIBRARY: typing.ClassVar['SimpleFileType'] = ...
    VERA_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    E_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    PERL_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    TCL_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    OVA_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SVA_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    PSL_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SDC: typing.ClassVar['SimpleFileType'] = ...
    VHDL_AMS_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    VERILOG_AMS_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_C_AMS_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    LIBERTY_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SPICE_SOURCE: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_RDL: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_RDL_1_0: typing.ClassVar['SimpleFileType'] = ...
    SYSTEM_RDL_2_0: typing.ClassVar['SimpleFileType'] = ...
    USER: typing.ClassVar['SimpleFileType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'SimpleFileType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'SimpleFileType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SimpleFileType']: ...

class SimplePortAccessType(java.lang.Enum['SimplePortAccessType']):
    REF: typing.ClassVar['SimplePortAccessType'] = ...
    PTR: typing.ClassVar['SimplePortAccessType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'SimplePortAccessType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'SimplePortAccessType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SimplePortAccessType']: ...

class SliceType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPathSegments(self) -> 'SliceType.PathSegments': ...
    def getRange(self) -> Range: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPathSegments(self, pathSegments: 'SliceType.PathSegments') -> None: ...
    def setRange(self, range: Range) -> None: ...
    class PathSegments:
        def __init__(self): ...
        def getPathSegment(self) -> java.util.List['PathSegmentType']: ...

class SlicedAccessHandle:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getSlices(self) -> 'SlicesType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getViewRef(self) -> java.util.List['SlicedAccessHandle.ViewRef']: ...
    def isForce(self) -> bool: ...
    def setForce(self, boolean: bool) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSlices(self, slicesType: 'SlicesType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SlicesType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getSlice(self) -> java.util.List[SliceType]: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class StructPortTypeDefs:
    def __init__(self): ...
    def getStructPortTypeDef(self) -> java.util.List['StructPortTypeDefs.StructPortTypeDef']: ...
    class StructPortTypeDef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getRole(self) -> java.lang.String: ...
        def getTypeDefinition(self) -> java.util.List['StructPortTypeDefs.StructPortTypeDef.TypeDefinition']: ...
        def getTypeName(self) -> 'StructPortTypeDefs.StructPortTypeDef.TypeName': ...
        def getTypeParameters(self) -> 'StructPortTypeDefs.StructPortTypeDef.TypeParameters': ...
        def getViewRef(self) -> java.util.List['StructPortTypeDefs.StructPortTypeDef.ViewRef']: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRole(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setTypeName(self, typeName: 'StructPortTypeDefs.StructPortTypeDef.TypeName') -> None: ...
        def setTypeParameters(self, typeParameters: 'StructPortTypeDefs.StructPortTypeDef.TypeParameters') -> None: ...
        class TypeDefinition:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class TypeName:
            def __init__(self): ...
            def getConstrained(self) -> java.util.List[java.lang.String]: ...
            def getValue(self) -> java.lang.String: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class TypeParameters:
            def __init__(self): ...
            def getTypeParameter(self) -> java.util.List[ModuleParameterType]: ...
        class ViewRef:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SubPortReference:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPartSelect(self) -> PartSelect: ...
    def getSubPortRef(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPartSelect(self, partSelect: PartSelect) -> None: ...
    def setSubPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SubPortType:
    def __init__(self): ...
    def getAccess(self) -> PortAccessType: ...
    def getArrays(self) -> Arrays: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getStructured(self) -> PortStructuredType: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWire(self) -> PortWireType: ...
    def isIsIO(self) -> bool: ...
    def setAccess(self, portAccessType: PortAccessType) -> None: ...
    def setArrays(self, arrays: Arrays) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsIO(self, boolean: bool) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setStructured(self, portStructuredType: PortStructuredType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setWire(self, portWireType: PortWireType) -> None: ...

class SubspaceRefType:
    def __init__(self): ...
    def getBaseAddress(self) -> 'SignedLongintExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getInitiatorRef(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getSegmentRef(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setBaseAddress(self, signedLongintExpression: 'SignedLongintExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInitiatorRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setSegmentRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class TimingConstraint:
    def __init__(self): ...
    def getClockEdge(self) -> EdgeValueType: ...
    def getClockName(self) -> java.lang.String: ...
    def getDelayType(self) -> DelayValueType: ...
    def getId(self) -> java.lang.String: ...
    def getValue(self) -> float: ...
    def setClockEdge(self, edgeValueType: EdgeValueType) -> None: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDelayType(self, delayValueType: DelayValueType) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, float: float) -> None: ...

class TransTypeDef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getTypeDefinition(self) -> java.util.List['TransTypeDef.TypeDefinition']: ...
    def getTypeName(self) -> 'TransTypeDef.TypeName': ...
    def getTypeParameters(self) -> 'TypeParameters': ...
    def getViewRef(self) -> java.util.List['TransTypeDef.ViewRef']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeName(self, typeName: 'TransTypeDef.TypeName') -> None: ...
    def setTypeParameters(self, typeParameters: 'TypeParameters') -> None: ...
    class TypeDefinition:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isExact(self) -> bool: ...
        def setExact(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class TransTypeDefs:
    def __init__(self): ...
    def getTransTypeDef(self) -> java.util.List[TransTypeDef]: ...

class TransactionalPowerConstraintType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPowerDomainRef(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPowerDomainRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class TransparentBridge:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getInitiatorRef(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInitiatorRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class TransportMethodType(java.lang.Enum['TransportMethodType']):
    FILE: typing.ClassVar['TransportMethodType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'TransportMethodType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'TransportMethodType': ...
    @staticmethod
    def values() -> typing.MutableSequence['TransportMethodType']: ...

class TypeDefinitions:
    def __init__(self): ...
    def getAddressBlockDefinitions(self) -> AddressBlockDefinitions: ...
    def getAssertions(self) -> Assertions: ...
    def getBankDefinitions(self) -> BankDefinitions: ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEnumerationDefinitions(self) -> EnumerationDefinitions: ...
    def getExternalTypeDefinitions(self) -> java.util.List[ExternalTypeDefinitions]: ...
    def getFieldAccessPolicyDefinitions(self) -> FieldAccessPolicyDefinitions: ...
    def getFieldDefinitions(self) -> FieldDefinitions: ...
    def getId(self) -> java.lang.String: ...
    def getLibrary(self) -> java.lang.String: ...
    def getMemoryMapDefinitions(self) -> MemoryMapDefinitions: ...
    def getMemoryRemapDefinitions(self) -> MemoryRemapDefinitions: ...
    def getModes(self) -> 'TypeDefinitions.Modes': ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getRegisterDefinitions(self) -> RegisterDefinitions: ...
    def getRegisterFileDefinitions(self) -> RegisterFileDefinitions: ...
    def getResetTypes(self) -> 'TypeDefinitions.ResetTypes': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def getViews(self) -> 'TypeDefinitions.Views': ...
    def setAddressBlockDefinitions(self, addressBlockDefinitions: AddressBlockDefinitions) -> None: ...
    def setAssertions(self, assertions: Assertions) -> None: ...
    def setBankDefinitions(self, bankDefinitions: BankDefinitions) -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEnumerationDefinitions(self, enumerationDefinitions: EnumerationDefinitions) -> None: ...
    def setFieldAccessPolicyDefinitions(self, fieldAccessPolicyDefinitions: FieldAccessPolicyDefinitions) -> None: ...
    def setFieldDefinitions(self, fieldDefinitions: FieldDefinitions) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMemoryMapDefinitions(self, memoryMapDefinitions: MemoryMapDefinitions) -> None: ...
    def setMemoryRemapDefinitions(self, memoryRemapDefinitions: MemoryRemapDefinitions) -> None: ...
    def setModes(self, modes: 'TypeDefinitions.Modes') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setRegisterDefinitions(self, registerDefinitions: RegisterDefinitions) -> None: ...
    def setRegisterFileDefinitions(self, registerFileDefinitions: RegisterFileDefinitions) -> None: ...
    def setResetTypes(self, resetTypes: 'TypeDefinitions.ResetTypes') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setViews(self, views: 'TypeDefinitions.Views') -> None: ...
    class Modes:
        def __init__(self): ...
        def getMode(self) -> java.util.List['TypeDefinitions.Modes.Mode']: ...
        class Mode:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class ResetTypes:
        def __init__(self): ...
        def getResetType(self) -> java.util.List['TypeDefinitions.ResetTypes.ResetType']: ...
        class ResetType:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Views:
        def __init__(self): ...
        def getView(self) -> java.util.List['TypeDefinitions.Views.View']: ...
        class View:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getShortDescription(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class TypeParameters:
    def __init__(self): ...
    def getServiceTypeDef(self) -> java.util.List[ServiceTypeDef]: ...
    def getTypeParameter(self) -> java.util.List[ModuleParameterType]: ...

class UsageType(java.lang.Enum['UsageType']):
    MEMORY: typing.ClassVar['UsageType'] = ...
    REGISTER: typing.ClassVar['UsageType'] = ...
    RESERVED: typing.ClassVar['UsageType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'UsageType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UsageType': ...
    @staticmethod
    def values() -> typing.MutableSequence['UsageType']: ...

class Vector:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getLeft(self) -> 'UnsignedIntExpression': ...
    def getRight(self) -> 'UnsignedIntExpression': ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLeft(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setRight(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...

class Vectors:
    def __init__(self): ...
    def getVector(self) -> java.util.List[Vector]: ...

class VendorExtensions:
    def __init__(self): ...
    def getAny(self) -> java.util.List[typing.Any]: ...

class ViewLinks:
    def __init__(self): ...
    def getViewLink(self) -> java.util.List['ViewLinks.ViewLink']: ...
    class ViewLink:
        def __init__(self): ...
        def getExternalViewReference(self) -> 'ViewLinks.ViewLink.ExternalViewReference': ...
        def getId(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> VendorExtensions: ...
        def getViewReference(self) -> 'ViewLinks.ViewLink.ViewReference': ...
        def setExternalViewReference(self, externalViewReference: 'ViewLinks.ViewLink.ExternalViewReference') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
        def setViewReference(self, viewReference: 'ViewLinks.ViewLink.ViewReference') -> None: ...
        class ExternalViewReference:
            def __init__(self): ...
            def getViewRef(self) -> java.lang.String: ...
            def setViewRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class ViewReference:
            def __init__(self): ...
            def getViewRef(self) -> java.lang.String: ...
            def setViewRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ViewRef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class WirePowerConstraintType:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getPowerDomainRef(self) -> java.lang.String: ...
    def getRange(self) -> Range: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPowerDomainRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRange(self, range: Range) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...

class WireTypeDef:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getTypeDefinition(self) -> java.util.List['WireTypeDef.TypeDefinition']: ...
    def getTypeName(self) -> 'WireTypeDef.TypeName': ...
    def getViewRef(self) -> java.util.List['WireTypeDef.ViewRef']: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeName(self, typeName: 'WireTypeDef.TypeName') -> None: ...
    class TypeDefinition:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class TypeName:
        def __init__(self): ...
        def getConstrained(self) -> java.util.List[java.lang.String]: ...
        def getValue(self) -> java.lang.String: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class WireTypeDefs:
    def __init__(self): ...
    def getWireTypeDef(self) -> java.util.List[WireTypeDef]: ...

class WriteValueConstraintType:
    def __init__(self): ...
    def getMaximum(self) -> 'UnsignedBitVectorExpression': ...
    def getMinimum(self) -> 'UnsignedBitVectorExpression': ...
    def isUseEnumeratedValues(self) -> bool: ...
    def isWriteAsRead(self) -> bool: ...
    def setMaximum(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setMinimum(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
    def setUseEnumeratedValues(self, boolean: bool) -> None: ...
    def setWriteAsRead(self, boolean: bool) -> None: ...

class AbstractorPortWireType(PortWireType):
    def __init__(self): ...

class ActiveInterface(InterfaceType):
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getExcludePorts(self) -> 'ActiveInterface.ExcludePorts': ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setExcludePorts(self, excludePorts: 'ActiveInterface.ExcludePorts') -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class ExcludePorts:
        def __init__(self): ...
        def getExcludePort(self) -> java.util.List['ActiveInterface.ExcludePorts.ExcludePort']: ...
        class ExcludePort:
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Choices:
    def __init__(self): ...
    def getChoice(self) -> java.util.List['Choices.Choice']: ...
    class Choice:
        def __init__(self): ...
        def getEnumeration(self) -> java.util.List['Choices.Choice.Enumeration']: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Enumeration(ComplexBaseExpression):
            def __init__(self): ...
            def getHelp(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def getText(self) -> java.lang.String: ...
            def setHelp(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setText(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ConfigurableElementValue(ComplexBaseExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getReferenceId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReferenceId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Dependency(IpxactURI):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FieldType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'FieldType.AccessHandles': ...
    def getAliasOf(self) -> 'FieldType.AliasOf': ...
    def getArray(self) -> 'FieldType.Array': ...
    def getBitOffset(self) -> 'UnsignedIntExpression': ...
    def getBitWidth(self) -> 'UnsignedPositiveIntExpression': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEnumeratedValues(self) -> EnumeratedValues: ...
    def getFieldAccessPolicies(self) -> 'FieldType.FieldAccessPolicies': ...
    def getFieldDefinitionRef(self) -> 'FieldType.FieldDefinitionRef': ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getResets(self) -> 'FieldType.Resets': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'FieldType.AccessHandles') -> None: ...
    def setAliasOf(self, aliasOf: 'FieldType.AliasOf') -> None: ...
    def setArray(self, array: 'FieldType.Array') -> None: ...
    def setBitOffset(self, unsignedIntExpression: 'UnsignedIntExpression') -> None: ...
    def setBitWidth(self, unsignedPositiveIntExpression: 'UnsignedPositiveIntExpression') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEnumeratedValues(self, enumeratedValues: EnumeratedValues) -> None: ...
    def setFieldAccessPolicies(self, fieldAccessPolicies: 'FieldType.FieldAccessPolicies') -> None: ...
    def setFieldDefinitionRef(self, fieldDefinitionRef: 'FieldType.FieldDefinitionRef') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setResets(self, resets: 'FieldType.Resets') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List[SlicedAccessHandle]: ...
    class AliasOf:
        def __init__(self): ...
        def getAddressBlockRef(self) -> AddressBlockRef: ...
        def getAddressSpaceRef(self) -> IndirectAddressRef.AddressSpaceRef: ...
        def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
        def getBankRef(self) -> java.util.List[BankRef]: ...
        def getFieldRef(self) -> FieldRef: ...
        def getMemoryMapRef(self) -> IndirectAddressRef.MemoryMapRef: ...
        def getMemoryRemapRef(self) -> MemoryRemapRef: ...
        def getRegisterFileRef(self) -> java.util.List[RegisterFileRef]: ...
        def getRegisterRef(self) -> RegisterRef: ...
        def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
        def setAddressSpaceRef(self, addressSpaceRef: IndirectAddressRef.AddressSpaceRef) -> None: ...
        def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
        def setFieldRef(self, fieldRef: FieldRef) -> None: ...
        def setMemoryMapRef(self, memoryMapRef: IndirectAddressRef.MemoryMapRef) -> None: ...
        def setMemoryRemapRef(self, memoryRemapRef: MemoryRemapRef) -> None: ...
        def setRegisterRef(self, registerRef: RegisterRef) -> None: ...
    class Array:
        def __init__(self): ...
        def getBitStride(self) -> 'BitStride': ...
        def getDim(self) -> java.util.List['Dim']: ...
        def setBitStride(self, bitStride: 'BitStride') -> None: ...
    class FieldAccessPolicies(FieldAccessPropertiesType):
        def __init__(self): ...
        def getFieldAccessPolicy(self) -> java.util.List['FieldType.FieldAccessPolicies.FieldAccessPolicy']: ...
        class FieldAccessPolicy:
            def __init__(self): ...
            def getAccess(self) -> AccessType: ...
            def getAccessRestrictions(self) -> AccessRestrictionsType: ...
            def getBroadcasts(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Broadcasts': ...
            def getFieldAccessPolicyDefinitionRef(self) -> FieldAccessPolicyDefinitionRef: ...
            def getId(self) -> java.lang.String: ...
            def getModeRef(self) -> java.util.List[ModeRef]: ...
            def getModifiedWriteValue(self) -> ModifiedWriteValue: ...
            def getReadAction(self) -> ReadAction: ...
            def getReadResponse(self) -> 'UnsignedBitVectorExpression': ...
            def getReserved(self) -> 'UnsignedBitExpression': ...
            def getTestable(self) -> 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable': ...
            def getVendorExtensions(self) -> VendorExtensions: ...
            def getWriteValueConstraint(self) -> WriteValueConstraintType: ...
            def setAccess(self, accessType: AccessType) -> None: ...
            def setAccessRestrictions(self, accessRestrictionsType: AccessRestrictionsType) -> None: ...
            def setBroadcasts(self, broadcasts: 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Broadcasts') -> None: ...
            def setFieldAccessPolicyDefinitionRef(self, fieldAccessPolicyDefinitionRef: FieldAccessPolicyDefinitionRef) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setModifiedWriteValue(self, modifiedWriteValue: ModifiedWriteValue) -> None: ...
            def setReadAction(self, readAction: ReadAction) -> None: ...
            def setReadResponse(self, unsignedBitVectorExpression: 'UnsignedBitVectorExpression') -> None: ...
            def setReserved(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
            def setTestable(self, testable: 'FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable') -> None: ...
            def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
            def setWriteValueConstraint(self, writeValueConstraintType: WriteValueConstraintType) -> None: ...
            class Broadcasts:
                def __init__(self): ...
                def getBroadcastTo(self) -> java.util.List['FieldType.FieldAccessPolicies.FieldAccessPolicy.Broadcasts.BroadcastTo']: ...
                class BroadcastTo:
                    def __init__(self): ...
                    def getAddressBlockRef(self) -> AddressBlockRef: ...
                    def getAddressSpaceRef(self) -> IndirectAddressRef.AddressSpaceRef: ...
                    def getAlternateRegisterRef(self) -> AlternateRegisterRef: ...
                    def getBankRef(self) -> java.util.List[BankRef]: ...
                    def getFieldRef(self) -> FieldRef: ...
                    def getId(self) -> java.lang.String: ...
                    def getMemoryMapRef(self) -> IndirectAddressRef.MemoryMapRef: ...
                    def getMemoryRemapRef(self) -> MemoryRemapRef: ...
                    def getRegisterFileRef(self) -> java.util.List[RegisterFileRef]: ...
                    def getRegisterRef(self) -> RegisterRef: ...
                    def setAddressBlockRef(self, addressBlockRef: AddressBlockRef) -> None: ...
                    def setAddressSpaceRef(self, addressSpaceRef: IndirectAddressRef.AddressSpaceRef) -> None: ...
                    def setAlternateRegisterRef(self, alternateRegisterRef: AlternateRegisterRef) -> None: ...
                    def setFieldRef(self, fieldRef: FieldRef) -> None: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMemoryMapRef(self, memoryMapRef: IndirectAddressRef.MemoryMapRef) -> None: ...
                    def setMemoryRemapRef(self, memoryRemapRef: MemoryRemapRef) -> None: ...
                    def setRegisterRef(self, registerRef: RegisterRef) -> None: ...
            class Testable:
                def __init__(self): ...
                def getTestConstraint(self) -> java.lang.String: ...
                def isValue(self) -> bool: ...
                def setTestConstraint(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, boolean: bool) -> None: ...
    class FieldDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Resets:
        def __init__(self): ...
        def getReset(self) -> java.util.List[Reset]: ...

class FileSetType:
    def __init__(self): ...
    def getDefaultFileBuilder(self) -> java.util.List[FileBuilderType]: ...
    def getDependency(self) -> java.util.List[Dependency]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFile(self) -> java.util.List['File']: ...
    def getFunction(self) -> java.util.List['FileSetType.Function']: ...
    def getGroup(self) -> java.util.List['FileSetType.Group']: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class Function:
        def __init__(self): ...
        def getArgument(self) -> java.util.List['FileSetType.Function.Argument']: ...
        def getDisabled(self) -> 'UnsignedBitExpression': ...
        def getEntryPoint(self) -> java.lang.String: ...
        def getFileRef(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getReturnType(self) -> ReturnTypeType: ...
        def getSourceFile(self) -> java.util.List['FileSetType.Function.SourceFile']: ...
        def isReplicate(self) -> bool: ...
        def setDisabled(self, unsignedBitExpression: 'UnsignedBitExpression') -> None: ...
        def setEntryPoint(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFileRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setReplicate(self, boolean: bool) -> None: ...
        def setReturnType(self, returnTypeType: ReturnTypeType) -> None: ...
        class Argument(NameValuePairType):
            def __init__(self): ...
            def getDataType(self) -> DataTypeType: ...
            def setDataType(self, dataTypeType: DataTypeType) -> None: ...
        class SourceFile:
            def __init__(self): ...
            def getFileType(self) -> FileType: ...
            def getId(self) -> java.lang.String: ...
            def getSourceName(self) -> IpxactURI: ...
            def setFileType(self, fileType: FileType) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setSourceName(self, ipxactURI: IpxactURI) -> None: ...
    class Group:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Generator(GeneratorType):
    def __init__(self): ...

class InstanceGeneratorType(GeneratorType):
    def __init__(self): ...
    def getGroup(self) -> java.util.List['InstanceGeneratorType.Group']: ...
    def getScope(self) -> java.lang.String: ...
    def setScope(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Group:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MonitorInterfaceType(InterfaceType):
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getPath(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPath(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...

class Port(PortType):
    def __init__(self): ...

class QualifiedExpression(ComplexBaseExpression):
    def __init__(self): ...

class RealExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> float: ...
    def getMinimum(self) -> float: ...
    def setMaximum(self, double: float) -> None: ...
    def setMinimum(self, double: float) -> None: ...

class SignedLongintExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class StringExpression(ComplexBaseExpression):
    def __init__(self): ...

class UnresolvedStringExpression(ComplexBaseExpression):
    def __init__(self): ...

class UnresolvedUnsignedBitExpression(ComplexBaseExpression):
    def __init__(self): ...

class UnresolvedUnsignedPositiveIntExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class UnsignedBitExpression(ComplexBaseExpression):
    def __init__(self): ...

class UnsignedBitVectorExpression(ComplexBaseExpression):
    def __init__(self): ...

class UnsignedIntExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class UnsignedLongintExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class UnsignedPositiveIntExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class UnsignedPositiveLongintExpression(ComplexBaseExpression):
    def __init__(self): ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def setMaximum(self, integer: int) -> None: ...
    def setMinimum(self, integer: int) -> None: ...

class BitStride(UnsignedPositiveLongintExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BusInterfaceType:
    def __init__(self): ...
    def getAbstractionTypes(self) -> AbstractionTypes: ...
    def getBitSteering(self) -> UnsignedBitExpression: ...
    def getBitsInLau(self) -> UnsignedPositiveLongintExpression: ...
    def getBusType(self) -> ConfigurableLibraryRefType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEndianness(self) -> EndianessType: ...
    def getId(self) -> java.lang.String: ...
    def getInitiator(self) -> 'BusInterfaceType.Initiator': ...
    def getMirroredInitiator(self) -> typing.Any: ...
    def getMirroredSystem(self) -> 'BusInterfaceType.MirroredSystem': ...
    def getMirroredTarget(self) -> 'BusInterfaceType.MirroredTarget': ...
    def getMonitor(self) -> 'BusInterfaceType.Monitor': ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameters(self) -> Parameters: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getSystem(self) -> 'BusInterfaceType.System': ...
    def getTarget(self) -> 'BusInterfaceType.Target': ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def isConnectionRequired(self) -> bool: ...
    def setAbstractionTypes(self, abstractionTypes: AbstractionTypes) -> None: ...
    def setBitSteering(self, unsignedBitExpression: UnsignedBitExpression) -> None: ...
    def setBitsInLau(self, unsignedPositiveLongintExpression: UnsignedPositiveLongintExpression) -> None: ...
    def setBusType(self, configurableLibraryRefType: ConfigurableLibraryRefType) -> None: ...
    def setConnectionRequired(self, boolean: bool) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEndianness(self, endianessType: EndianessType) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInitiator(self, initiator: 'BusInterfaceType.Initiator') -> None: ...
    def setMirroredInitiator(self, object: typing.Any) -> None: ...
    def setMirroredSystem(self, mirroredSystem: 'BusInterfaceType.MirroredSystem') -> None: ...
    def setMirroredTarget(self, mirroredTarget: 'BusInterfaceType.MirroredTarget') -> None: ...
    def setMonitor(self, monitor: 'BusInterfaceType.Monitor') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSystem(self, system: 'BusInterfaceType.System') -> None: ...
    def setTarget(self, target: 'BusInterfaceType.Target') -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class Initiator:
        def __init__(self): ...
        def getAddressSpaceRef(self) -> 'BusInterfaceType.Initiator.AddressSpaceRef': ...
        def setAddressSpaceRef(self, addressSpaceRef: 'BusInterfaceType.Initiator.AddressSpaceRef') -> None: ...
        class AddressSpaceRef(AddrSpaceRefType):
            def __init__(self): ...
            def getBaseAddress(self) -> SignedLongintExpression: ...
            def getModeRef(self) -> java.util.List['BusInterfaceType.Initiator.AddressSpaceRef.ModeRef']: ...
            def setBaseAddress(self, signedLongintExpression: SignedLongintExpression) -> None: ...
            class ModeRef:
                def __init__(self): ...
                def getId(self) -> java.lang.String: ...
                def getValue(self) -> java.lang.String: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class MirroredSystem:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class MirroredTarget:
        def __init__(self): ...
        def getBaseAddresses(self) -> 'BusInterfaceType.MirroredTarget.BaseAddresses': ...
        def setBaseAddresses(self, baseAddresses: 'BusInterfaceType.MirroredTarget.BaseAddresses') -> None: ...
        class BaseAddresses:
            def __init__(self): ...
            def getRange(self) -> UnsignedPositiveLongintExpression: ...
            def getRemapAddresses(self) -> java.util.List['BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses']: ...
            def setRange(self, unsignedPositiveLongintExpression: UnsignedPositiveLongintExpression) -> None: ...
            class RemapAddresses:
                def __init__(self): ...
                def getId(self) -> java.lang.String: ...
                def getModeRef(self) -> java.util.List[ModeRef]: ...
                def getRemapAddress(self) -> 'BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses.RemapAddress': ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRemapAddress(self, remapAddress: 'BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses.RemapAddress') -> None: ...
                class RemapAddress(UnsignedLongintExpression):
                    def __init__(self): ...
    class Monitor:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def getInterfaceMode(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setInterfaceMode(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class System:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Target:
        def __init__(self): ...
        def getFileSetRefGroup(self) -> java.util.List['BusInterfaceType.Target.FileSetRefGroup']: ...
        def getMemoryMapRef(self) -> MemoryMapRefType: ...
        def getTransparentBridge(self) -> java.util.List[TransparentBridge]: ...
        def setMemoryMapRef(self, memoryMapRefType: MemoryMapRefType) -> None: ...
        class FileSetRefGroup:
            def __init__(self): ...
            def getFileSetRef(self) -> java.util.List[FileSetRef]: ...
            def getGroup(self) -> java.lang.String: ...
            def getId(self) -> java.lang.String: ...
            def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ClockDriverType:
    def __init__(self): ...
    def getClockPeriod(self) -> 'ClockDriverType.ClockPeriod': ...
    def getClockPulseDuration(self) -> 'ClockDriverType.ClockPulseDuration': ...
    def getClockPulseOffset(self) -> 'ClockDriverType.ClockPulseOffset': ...
    def getClockPulseValue(self) -> UnsignedBitExpression: ...
    def getId(self) -> java.lang.String: ...
    def setClockPeriod(self, clockPeriod: 'ClockDriverType.ClockPeriod') -> None: ...
    def setClockPulseDuration(self, clockPulseDuration: 'ClockDriverType.ClockPulseDuration') -> None: ...
    def setClockPulseOffset(self, clockPulseOffset: 'ClockDriverType.ClockPulseOffset') -> None: ...
    def setClockPulseValue(self, unsignedBitExpression: UnsignedBitExpression) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ClockPeriod(RealExpression):
        def __init__(self): ...
        def getUnits(self) -> DelayValueUnitType: ...
        def setUnits(self, delayValueUnitType: DelayValueUnitType) -> None: ...
    class ClockPulseDuration(RealExpression):
        def __init__(self): ...
        def getUnits(self) -> DelayValueUnitType: ...
        def setUnits(self, delayValueUnitType: DelayValueUnitType) -> None: ...
    class ClockPulseOffset(RealExpression):
        def __init__(self): ...
        def getUnits(self) -> DelayValueUnitType: ...
        def setUnits(self, delayValueUnitType: DelayValueUnitType) -> None: ...

class Dim(UnsignedPositiveLongintExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getIndexVar(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndexVar(self, string: typing.Union[java.lang.String, str]) -> None: ...

class File:
    def __init__(self): ...
    def getBuildCommand(self) -> 'File.BuildCommand': ...
    def getDefine(self) -> java.util.List[NameValuePairType]: ...
    def getDependency(self) -> java.util.List[Dependency]: ...
    def getDescription(self) -> java.lang.String: ...
    def getExportedName(self) -> java.util.List['File.ExportedName']: ...
    def getFileId(self) -> java.lang.String: ...
    def getFileType(self) -> java.util.List[FileType]: ...
    def getId(self) -> java.lang.String: ...
    def getImageType(self) -> java.util.List['File.ImageType']: ...
    def getIsIncludeFile(self) -> 'File.IsIncludeFile': ...
    def getLogicalName(self) -> 'File.LogicalName': ...
    def getName(self) -> IpxactURI: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def isIsStructural(self) -> bool: ...
    def setBuildCommand(self, buildCommand: 'File.BuildCommand') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsIncludeFile(self, isIncludeFile: 'File.IsIncludeFile') -> None: ...
    def setIsStructural(self, boolean: bool) -> None: ...
    def setLogicalName(self, logicalName: 'File.LogicalName') -> None: ...
    def setName(self, ipxactURI: IpxactURI) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class BuildCommand:
        def __init__(self): ...
        def getCommand(self) -> StringExpression: ...
        def getFlags(self) -> 'File.BuildCommand.Flags': ...
        def getReplaceDefaultFlags(self) -> UnsignedBitExpression: ...
        def getTargetName(self) -> IpxactURI: ...
        def setCommand(self, stringExpression: StringExpression) -> None: ...
        def setFlags(self, flags: 'File.BuildCommand.Flags') -> None: ...
        def setReplaceDefaultFlags(self, unsignedBitExpression: UnsignedBitExpression) -> None: ...
        def setTargetName(self, ipxactURI: IpxactURI) -> None: ...
        class Flags(StringExpression):
            def __init__(self): ...
            def isAppend(self) -> bool: ...
            def setAppend(self, boolean: bool) -> None: ...
    class ExportedName:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ImageType:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class IsIncludeFile:
        def __init__(self): ...
        def isExternalDeclarations(self) -> bool: ...
        def isValue(self) -> bool: ...
        def setExternalDeclarations(self, boolean: bool) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class LogicalName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isDefault(self) -> bool: ...
        def setDefault(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Index(UnsignedIntExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PathSegmentType(UnresolvedStringExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PortAccessHandle:
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def getIndices(self) -> 'PortAccessHandle.Indices': ...
    def getSlices(self) -> PortSlicesType: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def getViewRef(self) -> java.util.List['PortAccessHandle.ViewRef']: ...
    def isForce(self) -> bool: ...
    def setForce(self, boolean: bool) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIndices(self, indices: 'PortAccessHandle.Indices') -> None: ...
    def setSlices(self, portSlicesType: PortSlicesType) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class Indices:
        def __init__(self): ...
        def getIndex(self) -> java.util.List['PortAccessHandle.Indices.Index']: ...
        class Index(UnsignedIntExpression):
            def __init__(self): ...
            def getId(self) -> java.lang.String: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewRef:
        def __init__(self): ...
        def getId(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PortPathSegmentType(StringExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SingleShotDriver:
    def __init__(self): ...
    def getSingleShotDuration(self) -> 'SingleShotDriver.SingleShotDuration': ...
    def getSingleShotOffset(self) -> 'SingleShotDriver.SingleShotOffset': ...
    def getSingleShotValue(self) -> 'SingleShotDriver.SingleShotValue': ...
    def setSingleShotDuration(self, singleShotDuration: 'SingleShotDriver.SingleShotDuration') -> None: ...
    def setSingleShotOffset(self, singleShotOffset: 'SingleShotDriver.SingleShotOffset') -> None: ...
    def setSingleShotValue(self, singleShotValue: 'SingleShotDriver.SingleShotValue') -> None: ...
    class SingleShotDuration(RealExpression):
        def __init__(self): ...
        def getUnits(self) -> DelayValueUnitType: ...
        def setUnits(self, delayValueUnitType: DelayValueUnitType) -> None: ...
    class SingleShotOffset(RealExpression):
        def __init__(self): ...
        def getUnits(self) -> DelayValueUnitType: ...
        def setUnits(self, delayValueUnitType: DelayValueUnitType) -> None: ...
    class SingleShotValue(UnsignedBitVectorExpression):
        def __init__(self): ...

class Stride(UnsignedPositiveLongintExpression):
    def __init__(self): ...
    def getId(self) -> java.lang.String: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Wire:
    def __init__(self): ...
    def getDefaultValue(self) -> UnsignedBitVectorExpression: ...
    def getOnInitiator(self) -> 'Wire.OnInitiator': ...
    def getOnSystem(self) -> java.util.List['Wire.OnSystem']: ...
    def getOnTarget(self) -> 'Wire.OnTarget': ...
    def getQualifier(self) -> QualifierType: ...
    def getRequiresDriver(self) -> RequiresDriver: ...
    def setDefaultValue(self, unsignedBitVectorExpression: UnsignedBitVectorExpression) -> None: ...
    def setOnInitiator(self, onInitiator: 'Wire.OnInitiator') -> None: ...
    def setOnTarget(self, onTarget: 'Wire.OnTarget') -> None: ...
    def setQualifier(self, qualifierType: QualifierType) -> None: ...
    def setRequiresDriver(self, requiresDriver: RequiresDriver) -> None: ...
    class OnInitiator:
        def __init__(self): ...
        def getDirection(self) -> Direction: ...
        def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getPresence(self) -> PresenceType: ...
        def getWidth(self) -> 'Wire.OnTarget.Width': ...
        def setDirection(self, direction: Direction) -> None: ...
        def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setPresence(self, presenceType: PresenceType) -> None: ...
        def setWidth(self, width: 'Wire.OnTarget.Width') -> None: ...
    class OnSystem:
        def __init__(self): ...
        def getDirection(self) -> Direction: ...
        def getGroup(self) -> java.lang.String: ...
        def getId(self) -> java.lang.String: ...
        def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getPresence(self) -> PresenceType: ...
        def getWidth(self) -> 'Wire.OnTarget.Width': ...
        def setDirection(self, direction: Direction) -> None: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setPresence(self, presenceType: PresenceType) -> None: ...
        def setWidth(self, width: 'Wire.OnTarget.Width') -> None: ...
    class OnTarget:
        def __init__(self): ...
        def getDirection(self) -> Direction: ...
        def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
        def getPresence(self) -> PresenceType: ...
        def getWidth(self) -> 'Wire.OnTarget.Width': ...
        def setDirection(self, direction: Direction) -> None: ...
        def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
        def setPresence(self, presenceType: PresenceType) -> None: ...
        def setWidth(self, width: 'Wire.OnTarget.Width') -> None: ...
        class Width(UnsignedPositiveIntExpression):
            def __init__(self): ...
            def isAllBits(self) -> bool: ...
            def setAllBits(self, boolean: bool) -> None: ...

class ClockDriver(ClockDriverType):
    def __init__(self): ...
    def getClockName(self) -> java.lang.String: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class OtherClockDriver(ClockDriverType):
    def __init__(self): ...
    def getClockName(self) -> java.lang.String: ...
    def getClockSource(self) -> java.lang.String: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setClockSource(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BankedBankType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'BankedBankType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBankOrSubspaceMap(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> BankAlignmentType: ...
    def getBankDefinitionRef(self) -> 'BankedBankType.BankDefinitionRef': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> UsageType: ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'BankedBankType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: BankAlignmentType) -> None: ...
    def setBankDefinitionRef(self, bankDefinitionRef: 'BankedBankType.BankDefinitionRef') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: UsageType) -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List[SimpleAccessHandle]: ...
    class Bank(org.example.schema.s1685_2022.BankedBankType):
        def __init__(self): ...
        def getVendorExtensions(self) -> VendorExtensions: ...
        def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class BankDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BankedDefinitionBankType:
    def __init__(self): ...
    def getAccessHandles(self) -> 'BankedDefinitionBankType.AccessHandles': ...
    def getAccessPolicies(self) -> AccessPolicies: ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> BankAlignmentType: ...
    def getBankDefinitionRef(self) -> 'BankedDefinitionBankType.BankDefinitionRef': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getShortDescription(self) -> java.lang.String: ...
    def getUsage(self) -> UsageType: ...
    def isVolatile(self) -> bool: ...
    def setAccessHandles(self, accessHandles: 'BankedDefinitionBankType.AccessHandles') -> None: ...
    def setAccessPolicies(self, accessPolicies: AccessPolicies) -> None: ...
    def setBankAlignment(self, bankAlignmentType: BankAlignmentType) -> None: ...
    def setBankDefinitionRef(self, bankDefinitionRef: 'BankedDefinitionBankType.BankDefinitionRef') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: UsageType) -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    class AccessHandles:
        def __init__(self): ...
        def getAccessHandle(self) -> java.util.List[SimpleAccessHandle]: ...
    class Bank(org.example.schema.s1685_2022.BankedDefinitionBankType):
        def __init__(self): ...
        def getVendorExtensions(self) -> VendorExtensions: ...
        def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class BankDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryRemapDefinitionType:
    def __init__(self): ...
    def getAddressBlockOrBank(self) -> java.util.List[typing.Any]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getModeRef(self) -> java.util.List[ModeRef]: ...
    def getName(self) -> java.lang.String: ...
    def getRemapDefinitionRef(self) -> 'MemoryRemapDefinitionType.RemapDefinitionRef': ...
    def getShortDescription(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRemapDefinitionRef(self, remapDefinitionRef: 'MemoryRemapDefinitionType.RemapDefinitionRef') -> None: ...
    def setShortDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class Bank(BankedDefinitionBankType):
        def __init__(self): ...
        def getVendorExtensions(self) -> VendorExtensions: ...
        def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class RemapDefinitionRef:
        def __init__(self): ...
        def getTypeDefinitions(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def setTypeDefinitions(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.example.schema.s1685_2022")``.

    AbstractionDefPortConstraintsType: typing.Type[AbstractionDefPortConstraintsType]
    AbstractionDefinition: typing.Type[AbstractionDefinition]
    AbstractionTypes: typing.Type[AbstractionTypes]
    AbstractorBusInterfaceType: typing.Type[AbstractorBusInterfaceType]
    AbstractorGenerators: typing.Type[AbstractorGenerators]
    AbstractorModeType: typing.Type[AbstractorModeType]
    AbstractorModelType: typing.Type[AbstractorModelType]
    AbstractorPortStructuredType: typing.Type[AbstractorPortStructuredType]
    AbstractorPortTransactionalType: typing.Type[AbstractorPortTransactionalType]
    AbstractorPortType: typing.Type[AbstractorPortType]
    AbstractorPortWireType: typing.Type[AbstractorPortWireType]
    AbstractorSubPortType: typing.Type[AbstractorSubPortType]
    AbstractorType: typing.Type[AbstractorType]
    AccessPolicies: typing.Type[AccessPolicies]
    AccessPropertiesType: typing.Type[AccessPropertiesType]
    AccessRestrictionType: typing.Type[AccessRestrictionType]
    AccessRestrictionsType: typing.Type[AccessRestrictionsType]
    AccessType: typing.Type[AccessType]
    ActiveInterface: typing.Type[ActiveInterface]
    AdHocConnection: typing.Type[AdHocConnection]
    AdHocConnections: typing.Type[AdHocConnections]
    AddrSpaceRefType: typing.Type[AddrSpaceRefType]
    AddressBankDefinitionType: typing.Type[AddressBankDefinitionType]
    AddressBankType: typing.Type[AddressBankType]
    AddressBlockDefinitions: typing.Type[AddressBlockDefinitions]
    AddressBlockRef: typing.Type[AddressBlockRef]
    AddressBlockType: typing.Type[AddressBlockType]
    AddressSpaces: typing.Type[AddressSpaces]
    AlternateRegisterRef: typing.Type[AlternateRegisterRef]
    AlternateRegisters: typing.Type[AlternateRegisters]
    ApiType: typing.Type[ApiType]
    Array: typing.Type[Array]
    Arrays: typing.Type[Arrays]
    Assertion: typing.Type[Assertion]
    Assertions: typing.Type[Assertions]
    BankAlignmentType: typing.Type[BankAlignmentType]
    BankDefinitions: typing.Type[BankDefinitions]
    BankRef: typing.Type[BankRef]
    BankedBankType: typing.Type[BankedBankType]
    BankedBlockType: typing.Type[BankedBlockType]
    BankedDefinitionBankType: typing.Type[BankedDefinitionBankType]
    BankedSubspaceType: typing.Type[BankedSubspaceType]
    BitStride: typing.Type[BitStride]
    BusDefinition: typing.Type[BusDefinition]
    BusInterfaceType: typing.Type[BusInterfaceType]
    BusInterfaces: typing.Type[BusInterfaces]
    Catalog: typing.Type[Catalog]
    CellClassValueType: typing.Type[CellClassValueType]
    CellFunctionValueType: typing.Type[CellFunctionValueType]
    CellSpecification: typing.Type[CellSpecification]
    CellStrengthValueType: typing.Type[CellStrengthValueType]
    Channels: typing.Type[Channels]
    Choices: typing.Type[Choices]
    ClearboxElementRefType: typing.Type[ClearboxElementRefType]
    ClearboxElementType: typing.Type[ClearboxElementType]
    ClockDriver: typing.Type[ClockDriver]
    ClockDriverType: typing.Type[ClockDriverType]
    ComplexBaseExpression: typing.Type[ComplexBaseExpression]
    ComplexTiedValueExpression: typing.Type[ComplexTiedValueExpression]
    ComponentGenerators: typing.Type[ComponentGenerators]
    ComponentInstance: typing.Type[ComponentInstance]
    ComponentInstances: typing.Type[ComponentInstances]
    ComponentInstantiationType: typing.Type[ComponentInstantiationType]
    ComponentPortDirectionType: typing.Type[ComponentPortDirectionType]
    ComponentType: typing.Type[ComponentType]
    ConfigurableArrays: typing.Type[ConfigurableArrays]
    ConfigurableElementValue: typing.Type[ConfigurableElementValue]
    ConfigurableElementValues: typing.Type[ConfigurableElementValues]
    ConfigurableLibraryRefType: typing.Type[ConfigurableLibraryRefType]
    ConstraintSet: typing.Type[ConstraintSet]
    ConstraintSetRef: typing.Type[ConstraintSetRef]
    ConstraintSets: typing.Type[ConstraintSets]
    DataTypeType: typing.Type[DataTypeType]
    DelayValueType: typing.Type[DelayValueType]
    DelayValueUnitType: typing.Type[DelayValueUnitType]
    Dependency: typing.Type[Dependency]
    Design: typing.Type[Design]
    DesignConfiguration: typing.Type[DesignConfiguration]
    DesignConfigurationInstantiationType: typing.Type[DesignConfigurationInstantiationType]
    DesignInstantiationType: typing.Type[DesignInstantiationType]
    Dim: typing.Type[Dim]
    Direction: typing.Type[Direction]
    DomainTypeDef: typing.Type[DomainTypeDef]
    DomainTypeDefs: typing.Type[DomainTypeDefs]
    DriveConstraint: typing.Type[DriveConstraint]
    DriverType: typing.Type[DriverType]
    Drivers: typing.Type[Drivers]
    EdgeValueType: typing.Type[EdgeValueType]
    EndianessType: typing.Type[EndianessType]
    EnumeratedValueType: typing.Type[EnumeratedValueType]
    EnumeratedValues: typing.Type[EnumeratedValues]
    EnumerationDefinitions: typing.Type[EnumerationDefinitions]
    ExecutableImage: typing.Type[ExecutableImage]
    ExtendedVectorsType: typing.Type[ExtendedVectorsType]
    ExternalPortReference: typing.Type[ExternalPortReference]
    ExternalTypeDefinitions: typing.Type[ExternalTypeDefinitions]
    FieldAccessPolicyDefinitionRef: typing.Type[FieldAccessPolicyDefinitionRef]
    FieldAccessPolicyDefinitions: typing.Type[FieldAccessPolicyDefinitions]
    FieldAccessPropertiesType: typing.Type[FieldAccessPropertiesType]
    FieldDefinitions: typing.Type[FieldDefinitions]
    FieldMap: typing.Type[FieldMap]
    FieldMaps: typing.Type[FieldMaps]
    FieldRef: typing.Type[FieldRef]
    FieldType: typing.Type[FieldType]
    File: typing.Type[File]
    FileBuilderType: typing.Type[FileBuilderType]
    FileSetRef: typing.Type[FileSetRef]
    FileSetType: typing.Type[FileSetType]
    FileSets: typing.Type[FileSets]
    FileType: typing.Type[FileType]
    FormatType: typing.Type[FormatType]
    Generator: typing.Type[Generator]
    GeneratorChain: typing.Type[GeneratorChain]
    GeneratorRef: typing.Type[GeneratorRef]
    GeneratorSelectorType: typing.Type[GeneratorSelectorType]
    GeneratorType: typing.Type[GeneratorType]
    GroupSelector: typing.Type[GroupSelector]
    HierInterfaceType: typing.Type[HierInterfaceType]
    Index: typing.Type[Index]
    IndicesType: typing.Type[IndicesType]
    IndirectAddressRef: typing.Type[IndirectAddressRef]
    IndirectDataRef: typing.Type[IndirectDataRef]
    IndirectInterfaceType: typing.Type[IndirectInterfaceType]
    IndirectInterfaces: typing.Type[IndirectInterfaces]
    InitiativeType: typing.Type[InitiativeType]
    InstanceGeneratorType: typing.Type[InstanceGeneratorType]
    Interconnection: typing.Type[Interconnection]
    Interconnections: typing.Type[Interconnections]
    InterfaceType: typing.Type[InterfaceType]
    IpxactFileType: typing.Type[IpxactFileType]
    IpxactFilesType: typing.Type[IpxactFilesType]
    IpxactURI: typing.Type[IpxactURI]
    Kind: typing.Type[Kind]
    KindType: typing.Type[KindType]
    LanguageType: typing.Type[LanguageType]
    LibraryRefType: typing.Type[LibraryRefType]
    LinkerCommandFile: typing.Type[LinkerCommandFile]
    LoadConstraint: typing.Type[LoadConstraint]
    LocalAddressBankType: typing.Type[LocalAddressBankType]
    LocalBankedBankType: typing.Type[LocalBankedBankType]
    LocalMemoryMapType: typing.Type[LocalMemoryMapType]
    MemoryMapDefinitions: typing.Type[MemoryMapDefinitions]
    MemoryMapRefType: typing.Type[MemoryMapRefType]
    MemoryMapType: typing.Type[MemoryMapType]
    MemoryMaps: typing.Type[MemoryMaps]
    MemoryRemapDefinitionType: typing.Type[MemoryRemapDefinitionType]
    MemoryRemapDefinitions: typing.Type[MemoryRemapDefinitions]
    MemoryRemapRef: typing.Type[MemoryRemapRef]
    MemoryRemapType: typing.Type[MemoryRemapType]
    ModeLinks: typing.Type[ModeLinks]
    ModeRef: typing.Type[ModeRef]
    ModelType: typing.Type[ModelType]
    ModifiedWriteValue: typing.Type[ModifiedWriteValue]
    ModifiedWriteValueType: typing.Type[ModifiedWriteValueType]
    ModuleParameterArrays: typing.Type[ModuleParameterArrays]
    ModuleParameterType: typing.Type[ModuleParameterType]
    MonitorInterconnection: typing.Type[MonitorInterconnection]
    MonitorInterfaceType: typing.Type[MonitorInterfaceType]
    NameValuePairType: typing.Type[NameValuePairType]
    ObjectFactory: typing.Type[ObjectFactory]
    OtherClockDriver: typing.Type[OtherClockDriver]
    OtherClocks: typing.Type[OtherClocks]
    ParameterType: typing.Type[ParameterType]
    Parameters: typing.Type[Parameters]
    PartSelect: typing.Type[PartSelect]
    PathSegmentType: typing.Type[PathSegmentType]
    Payload: typing.Type[Payload]
    Port: typing.Type[Port]
    PortAccessHandle: typing.Type[PortAccessHandle]
    PortAccessType: typing.Type[PortAccessType]
    PortPacketFieldType: typing.Type[PortPacketFieldType]
    PortPacketFieldsType: typing.Type[PortPacketFieldsType]
    PortPacketType: typing.Type[PortPacketType]
    PortPacketsType: typing.Type[PortPacketsType]
    PortPathSegmentType: typing.Type[PortPathSegmentType]
    PortSliceType: typing.Type[PortSliceType]
    PortSlicesType: typing.Type[PortSlicesType]
    PortStructuredType: typing.Type[PortStructuredType]
    PortTransactionalType: typing.Type[PortTransactionalType]
    PortType: typing.Type[PortType]
    PortWireType: typing.Type[PortWireType]
    PowerDomainLinks: typing.Type[PowerDomainLinks]
    PresenceType: typing.Type[PresenceType]
    Protocol: typing.Type[Protocol]
    ProtocolTypeType: typing.Type[ProtocolTypeType]
    QualifiedExpression: typing.Type[QualifiedExpression]
    QualifierType: typing.Type[QualifierType]
    Range: typing.Type[Range]
    ReadAction: typing.Type[ReadAction]
    ReadActionType: typing.Type[ReadActionType]
    RealExpression: typing.Type[RealExpression]
    RegisterDefinitions: typing.Type[RegisterDefinitions]
    RegisterFile: typing.Type[RegisterFile]
    RegisterFileDefinitions: typing.Type[RegisterFileDefinitions]
    RegisterFileRef: typing.Type[RegisterFileRef]
    RegisterRef: typing.Type[RegisterRef]
    RequiresDriver: typing.Type[RequiresDriver]
    Reset: typing.Type[Reset]
    ResetTypeLinks: typing.Type[ResetTypeLinks]
    ReturnTypeType: typing.Type[ReturnTypeType]
    ServiceTypeDef: typing.Type[ServiceTypeDef]
    SharedType: typing.Type[SharedType]
    SignType: typing.Type[SignType]
    SignalTypeDef: typing.Type[SignalTypeDef]
    SignalTypeDefs: typing.Type[SignalTypeDefs]
    SignedLongintExpression: typing.Type[SignedLongintExpression]
    SimpleAccessHandle: typing.Type[SimpleAccessHandle]
    SimpleClearboxType: typing.Type[SimpleClearboxType]
    SimpleFileType: typing.Type[SimpleFileType]
    SimplePortAccessType: typing.Type[SimplePortAccessType]
    SingleShotDriver: typing.Type[SingleShotDriver]
    SliceType: typing.Type[SliceType]
    SlicedAccessHandle: typing.Type[SlicedAccessHandle]
    SlicesType: typing.Type[SlicesType]
    Stride: typing.Type[Stride]
    StringExpression: typing.Type[StringExpression]
    StructPortTypeDefs: typing.Type[StructPortTypeDefs]
    SubPortReference: typing.Type[SubPortReference]
    SubPortType: typing.Type[SubPortType]
    SubspaceRefType: typing.Type[SubspaceRefType]
    TimingConstraint: typing.Type[TimingConstraint]
    TransTypeDef: typing.Type[TransTypeDef]
    TransTypeDefs: typing.Type[TransTypeDefs]
    TransactionalPowerConstraintType: typing.Type[TransactionalPowerConstraintType]
    TransparentBridge: typing.Type[TransparentBridge]
    TransportMethodType: typing.Type[TransportMethodType]
    TypeDefinitions: typing.Type[TypeDefinitions]
    TypeParameters: typing.Type[TypeParameters]
    UnresolvedStringExpression: typing.Type[UnresolvedStringExpression]
    UnresolvedUnsignedBitExpression: typing.Type[UnresolvedUnsignedBitExpression]
    UnresolvedUnsignedPositiveIntExpression: typing.Type[UnresolvedUnsignedPositiveIntExpression]
    UnsignedBitExpression: typing.Type[UnsignedBitExpression]
    UnsignedBitVectorExpression: typing.Type[UnsignedBitVectorExpression]
    UnsignedIntExpression: typing.Type[UnsignedIntExpression]
    UnsignedLongintExpression: typing.Type[UnsignedLongintExpression]
    UnsignedPositiveIntExpression: typing.Type[UnsignedPositiveIntExpression]
    UnsignedPositiveLongintExpression: typing.Type[UnsignedPositiveLongintExpression]
    UsageType: typing.Type[UsageType]
    Vector: typing.Type[Vector]
    Vectors: typing.Type[Vectors]
    VendorExtensions: typing.Type[VendorExtensions]
    ViewLinks: typing.Type[ViewLinks]
    ViewRef: typing.Type[ViewRef]
    Wire: typing.Type[Wire]
    WirePowerConstraintType: typing.Type[WirePowerConstraintType]
    WireTypeDef: typing.Type[WireTypeDef]
    WireTypeDefs: typing.Type[WireTypeDefs]
    WriteValueConstraintType: typing.Type[WriteValueConstraintType]
