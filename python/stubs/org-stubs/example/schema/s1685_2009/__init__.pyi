
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jakarta.xml.bind
import java.lang
import java.math
import java.util
import javax.xml.namespace
import typing



class AbstractionDefPortConstraintsType:
    def __init__(self): ...
    def getContent(self) -> java.util.List[typing.Any]: ...

class AbstractionDefinition:
    def __init__(self): ...
    def getBusType(self) -> 'LibraryRefType': ...
    def getDescription(self) -> java.lang.String: ...
    def getExtends(self) -> 'LibraryRefType': ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getPorts(self) -> 'AbstractionDefinition.Ports': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setBusType(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setExtends(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPorts(self, ports: 'AbstractionDefinition.Ports') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['AbstractionDefinition.Ports.Port']: ...
        class Port:
            def __init__(self): ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getLogicalName(self) -> java.lang.String: ...
            def getTransactional(self) -> 'AbstractionDefinition.Ports.Port.Transactional': ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def getWire(self) -> 'AbstractionDefinition.Ports.Port.Wire': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setLogicalName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setTransactional(self, transactional: 'AbstractionDefinition.Ports.Port.Transactional') -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            def setWire(self, wire: 'AbstractionDefinition.Ports.Port.Wire') -> None: ...
            class Transactional:
                def __init__(self): ...
                def getOnMaster(self) -> 'AbstractionDefinition.Ports.Port.Transactional.OnMaster': ...
                def getOnSlave(self) -> 'AbstractionDefinition.Ports.Port.Transactional.OnSlave': ...
                def getOnSystem(self) -> java.util.List['AbstractionDefinition.Ports.Port.Transactional.OnSystem']: ...
                def getQualifier(self) -> 'AbstractionDefinition.Ports.Port.Transactional.Qualifier': ...
                def setOnMaster(self, onMaster: 'AbstractionDefinition.Ports.Port.Transactional.OnMaster') -> None: ...
                def setOnSlave(self, onSlave: 'AbstractionDefinition.Ports.Port.Transactional.OnSlave') -> None: ...
                def setQualifier(self, qualifier: 'AbstractionDefinition.Ports.Port.Transactional.Qualifier') -> None: ...
                class OnMaster:
                    def __init__(self): ...
                    def getPresence(self) -> java.lang.String: ...
                    def getService(self) -> 'ServiceType': ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setService(self, serviceType: 'ServiceType') -> None: ...
                class OnSlave:
                    def __init__(self): ...
                    def getPresence(self) -> java.lang.String: ...
                    def getService(self) -> 'ServiceType': ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setService(self, serviceType: 'ServiceType') -> None: ...
                class OnSystem:
                    def __init__(self): ...
                    def getGroup(self) -> java.lang.String: ...
                    def getPresence(self) -> java.lang.String: ...
                    def getService(self) -> 'ServiceType': ...
                    def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setService(self, serviceType: 'ServiceType') -> None: ...
                class Qualifier:
                    def __init__(self): ...
                    def isIsAddress(self) -> bool: ...
                    def isIsData(self) -> bool: ...
                    def setIsAddress(self, boolean: bool) -> None: ...
                    def setIsData(self, boolean: bool) -> None: ...
            class Wire:
                def __init__(self): ...
                def getDefaultValue(self) -> java.lang.String: ...
                def getOnMaster(self) -> 'AbstractionDefinition.Ports.Port.Wire.OnMaster': ...
                def getOnSlave(self) -> 'AbstractionDefinition.Ports.Port.Wire.OnSlave': ...
                def getOnSystem(self) -> java.util.List['AbstractionDefinition.Ports.Port.Wire.OnSystem']: ...
                def getQualifier(self) -> 'AbstractionDefinition.Ports.Port.Wire.Qualifier': ...
                def getRequiresDriver(self) -> 'RequiresDriver': ...
                def setDefaultValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOnMaster(self, onMaster: 'AbstractionDefinition.Ports.Port.Wire.OnMaster') -> None: ...
                def setOnSlave(self, onSlave: 'AbstractionDefinition.Ports.Port.Wire.OnSlave') -> None: ...
                def setQualifier(self, qualifier: 'AbstractionDefinition.Ports.Port.Wire.Qualifier') -> None: ...
                def setRequiresDriver(self, requiresDriver: 'RequiresDriver') -> None: ...
                class OnMaster:
                    def __init__(self): ...
                    def getDirection(self) -> java.lang.String: ...
                    def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getPresence(self) -> java.lang.String: ...
                    def getWidth(self) -> java.math.BigInteger: ...
                    def setDirection(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setWidth(self, bigInteger: java.math.BigInteger) -> None: ...
                class OnSlave:
                    def __init__(self): ...
                    def getDirection(self) -> java.lang.String: ...
                    def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getPresence(self) -> java.lang.String: ...
                    def getWidth(self) -> java.math.BigInteger: ...
                    def setDirection(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setWidth(self, bigInteger: java.math.BigInteger) -> None: ...
                class OnSystem:
                    def __init__(self): ...
                    def getDirection(self) -> java.lang.String: ...
                    def getGroup(self) -> java.lang.String: ...
                    def getMirroredModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getModeConstraints(self) -> AbstractionDefPortConstraintsType: ...
                    def getPresence(self) -> java.lang.String: ...
                    def getWidth(self) -> java.math.BigInteger: ...
                    def setDirection(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMirroredModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setModeConstraints(self, abstractionDefPortConstraintsType: AbstractionDefPortConstraintsType) -> None: ...
                    def setPresence(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setWidth(self, bigInteger: java.math.BigInteger) -> None: ...
                class Qualifier:
                    def __init__(self): ...
                    def isIsAddress(self) -> bool: ...
                    def isIsClock(self) -> bool: ...
                    def isIsData(self) -> bool: ...
                    def isIsReset(self) -> bool: ...
                    def setIsAddress(self, boolean: bool) -> None: ...
                    def setIsClock(self, boolean: bool) -> None: ...
                    def setIsData(self, boolean: bool) -> None: ...
                    def setIsReset(self, boolean: bool) -> None: ...

class AbstractorBusInterfaceType:
    def __init__(self): ...
    def getAbstractionType(self) -> 'LibraryRefType': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameters(self) -> 'Parameters': ...
    def getPortMaps(self) -> 'AbstractorBusInterfaceType.PortMaps': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAbstractionType(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPortMaps(self, portMaps: 'AbstractorBusInterfaceType.PortMaps') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class PortMaps:
        def __init__(self): ...
        def getPortMap(self) -> java.util.List['AbstractorBusInterfaceType.PortMaps.PortMap']: ...
        class PortMap:
            def __init__(self): ...
            def getLogicalPort(self) -> 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort': ...
            def getPhysicalPort(self) -> 'AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort': ...
            def setLogicalPort(self, logicalPort: 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort') -> None: ...
            def setPhysicalPort(self, physicalPort: 'AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort') -> None: ...
            class LogicalPort:
                def __init__(self): ...
                def getName(self) -> java.lang.String: ...
                def getVector(self) -> 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector': ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVector(self, vector: 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector') -> None: ...
                class Vector:
                    def __init__(self): ...
                    def getLeft(self) -> 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left': ...
                    def getRight(self) -> 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right': ...
                    def setLeft(self, left: 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left') -> None: ...
                    def setRight(self, right: 'AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right') -> None: ...
                    class Left:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> 'FormatType': ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> 'RangeTypeType': ...
                        def getResolve(self) -> 'ResolveType': ...
                        def getValue(self) -> java.math.BigInteger: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: 'FormatType') -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                        def setResolve(self, resolveType: 'ResolveType') -> None: ...
                        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
                    class Right:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> 'FormatType': ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> 'RangeTypeType': ...
                        def getResolve(self) -> 'ResolveType': ...
                        def getValue(self) -> java.math.BigInteger: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: 'FormatType') -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                        def setResolve(self, resolveType: 'ResolveType') -> None: ...
                        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
            class PhysicalPort:
                def __init__(self): ...
                def getName(self) -> java.lang.String: ...
                def getVector(self) -> 'Vector': ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVector(self, vector: 'Vector') -> None: ...

class AbstractorGenerators:
    def __init__(self): ...
    def getAbstractorGenerator(self) -> java.util.List['InstanceGeneratorType']: ...

class AbstractorModeType(java.lang.Enum['AbstractorModeType']):
    MASTER: typing.ClassVar['AbstractorModeType'] = ...
    SLAVE: typing.ClassVar['AbstractorModeType'] = ...
    DIRECT: typing.ClassVar['AbstractorModeType'] = ...
    SYSTEM: typing.ClassVar['AbstractorModeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'AbstractorModeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'AbstractorModeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['AbstractorModeType']: ...

class AbstractorModelType:
    def __init__(self): ...
    def getModelParameters(self) -> 'AbstractorModelType.ModelParameters': ...
    def getPorts(self) -> 'AbstractorModelType.Ports': ...
    def getViews(self) -> 'AbstractorModelType.Views': ...
    def setModelParameters(self, modelParameters: 'AbstractorModelType.ModelParameters') -> None: ...
    def setPorts(self, ports: 'AbstractorModelType.Ports') -> None: ...
    def setViews(self, views: 'AbstractorModelType.Views') -> None: ...
    class ModelParameters:
        def __init__(self): ...
        def getModelParameter(self) -> java.util.List['NameValueTypeType']: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['AbstractorPortType']: ...
    class Views:
        def __init__(self): ...
        def getView(self) -> java.util.List['AbstractorViewType']: ...

class AbstractorType:
    def __init__(self): ...
    def getAbstractorGenerators(self) -> AbstractorGenerators: ...
    def getAbstractorInterfaces(self) -> 'AbstractorType.AbstractorInterfaces': ...
    def getAbstractorMode(self) -> 'AbstractorType.AbstractorMode': ...
    def getBusType(self) -> 'LibraryRefType': ...
    def getChoices(self) -> 'Choices': ...
    def getDescription(self) -> java.lang.String: ...
    def getFileSets(self) -> 'FileSets': ...
    def getLibrary(self) -> java.lang.String: ...
    def getModel(self) -> AbstractorModelType: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAbstractorGenerators(self, abstractorGenerators: AbstractorGenerators) -> None: ...
    def setAbstractorInterfaces(self, abstractorInterfaces: 'AbstractorType.AbstractorInterfaces') -> None: ...
    def setAbstractorMode(self, abstractorMode: 'AbstractorType.AbstractorMode') -> None: ...
    def setBusType(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setChoices(self, choices: 'Choices') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSets(self, fileSets: 'FileSets') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModel(self, abstractorModelType: AbstractorModelType) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class AbstractorInterfaces:
        def __init__(self): ...
        def getAbstractorInterface(self) -> java.util.List[AbstractorBusInterfaceType]: ...
    class AbstractorMode:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def getValue(self) -> AbstractorModeType: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, abstractorModeType: AbstractorModeType) -> None: ...

class AbstractorViewType:
    def __init__(self): ...
    def getDefaultFileBuilder(self) -> java.util.List['FileBuilderType']: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEnvIdentifier(self) -> java.util.List[java.lang.String]: ...
    def getFileSetRef(self) -> java.util.List['FileSetRef']: ...
    def getLanguage(self) -> 'AbstractorViewType.Language': ...
    def getModelName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLanguage(self, language: 'AbstractorViewType.Language') -> None: ...
    def setModelName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Language:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isStrict(self) -> bool: ...
        def setStrict(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AccessType(java.lang.Enum['AccessType']):
    READ_ONLY: typing.ClassVar['AccessType'] = ...
    WRITE_ONLY: typing.ClassVar['AccessType'] = ...
    READ_WRITE: typing.ClassVar['AccessType'] = ...
    WRITE_ONCE: typing.ClassVar['AccessType'] = ...
    READ_WRITE_ONCE: typing.ClassVar['AccessType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'AccessType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'AccessType': ...
    @staticmethod
    def values() -> typing.MutableSequence['AccessType']: ...

class AdHocConnection:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getExternalPortReference(self) -> java.util.List['AdHocConnection.ExternalPortReference']: ...
    def getInternalPortReference(self) -> java.util.List['AdHocConnection.InternalPortReference']: ...
    def getName(self) -> java.lang.String: ...
    def getTiedValue(self) -> java.lang.String: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTiedValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ExternalPortReference:
        def __init__(self): ...
        def getLeft(self) -> java.math.BigInteger: ...
        def getPortRef(self) -> java.lang.String: ...
        def getRight(self) -> java.math.BigInteger: ...
        def setLeft(self, bigInteger: java.math.BigInteger) -> None: ...
        def setPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRight(self, bigInteger: java.math.BigInteger) -> None: ...
    class InternalPortReference:
        def __init__(self): ...
        def getComponentRef(self) -> java.lang.String: ...
        def getLeft(self) -> java.math.BigInteger: ...
        def getPortRef(self) -> java.lang.String: ...
        def getRight(self) -> java.math.BigInteger: ...
        def setComponentRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLeft(self, bigInteger: java.math.BigInteger) -> None: ...
        def setPortRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRight(self, bigInteger: java.math.BigInteger) -> None: ...

class AdHocConnections:
    def __init__(self): ...
    def getAdHocConnection(self) -> java.util.List[AdHocConnection]: ...

class AddrSpaceRefType:
    def __init__(self): ...
    def getAddressSpaceRef(self) -> java.lang.String: ...
    def setAddressSpaceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AddressBankType:
    def __init__(self): ...
    def getAccess(self) -> AccessType: ...
    def getAddressBlockOrBankOrSubspaceMap(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> 'BankAlignmentType': ...
    def getBaseAddress(self) -> 'BaseAddress': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccess(self, accessType: AccessType) -> None: ...
    def setBankAlignment(self, bankAlignmentType: 'BankAlignmentType') -> None: ...
    def setBaseAddress(self, baseAddress: 'BaseAddress') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...

class AddressBlockType:
    def __init__(self): ...
    def getAccess(self) -> AccessType: ...
    def getBaseAddress(self) -> 'BaseAddress': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getRange(self) -> 'BankedBlockType.Range': ...
    def getRegister(self) -> java.util.List['RegisterFile.Register']: ...
    def getRegisterFile(self) -> java.util.List['RegisterFile']: ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWidth(self) -> 'BankedBlockType.Width': ...
    def isVolatile(self) -> bool: ...
    def setAccess(self, accessType: AccessType) -> None: ...
    def setBaseAddress(self, baseAddress: 'BaseAddress') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setRange(self, range: 'BankedBlockType.Range') -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    def setWidth(self, width: 'BankedBlockType.Width') -> None: ...

class AddressSpaces:
    def __init__(self): ...
    def getAddressSpace(self) -> java.util.List['AddressSpaces.AddressSpace']: ...
    class AddressSpace:
        def __init__(self): ...
        def getAddressUnitBits(self) -> java.math.BigInteger: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getExecutableImage(self) -> java.util.List['ExecutableImage']: ...
        def getLocalMemoryMap(self) -> 'LocalMemoryMapType': ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> 'Parameters': ...
        def getRange(self) -> 'BankedBlockType.Range': ...
        def getSegments(self) -> 'AddressSpaces.AddressSpace.Segments': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def getWidth(self) -> 'BankedBlockType.Width': ...
        def setAddressUnitBits(self, bigInteger: java.math.BigInteger) -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setLocalMemoryMap(self, localMemoryMapType: 'LocalMemoryMapType') -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: 'Parameters') -> None: ...
        def setRange(self, range: 'BankedBlockType.Range') -> None: ...
        def setSegments(self, segments: 'AddressSpaces.AddressSpace.Segments') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setWidth(self, width: 'BankedBlockType.Width') -> None: ...
        class Segments:
            def __init__(self): ...
            def getSegment(self) -> java.util.List['AddressSpaces.AddressSpace.Segments.Segment']: ...
            class Segment:
                def __init__(self): ...
                def getAddressOffset(self) -> 'AddressSpaces.AddressSpace.Segments.Segment.AddressOffset': ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getName(self) -> java.lang.String: ...
                def getRange(self) -> 'AddressSpaces.AddressSpace.Segments.Segment.Range': ...
                def getVendorExtensions(self) -> 'VendorExtensions': ...
                def setAddressOffset(self, addressOffset: 'AddressSpaces.AddressSpace.Segments.Segment.AddressOffset') -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRange(self, range: 'AddressSpaces.AddressSpace.Segments.Segment.Range') -> None: ...
                def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
                class AddressOffset:
                    def __init__(self): ...
                    def getBitStringLength(self) -> java.math.BigInteger: ...
                    def getChoiceRef(self) -> java.lang.String: ...
                    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                    def getDependency(self) -> java.lang.String: ...
                    def getFormat(self) -> 'FormatType': ...
                    def getId(self) -> java.lang.String: ...
                    def getMaximum(self) -> java.lang.String: ...
                    def getMinimum(self) -> java.lang.String: ...
                    def getOrder(self) -> float: ...
                    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                    def getPrompt(self) -> java.lang.String: ...
                    def getRangeType(self) -> 'RangeTypeType': ...
                    def getResolve(self) -> 'ResolveType': ...
                    def getValue(self) -> java.lang.String: ...
                    def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setFormat(self, formatType: 'FormatType') -> None: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setOrder(self, float: float) -> None: ...
                    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                    def setResolve(self, resolveType: 'ResolveType') -> None: ...
                    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
                class Range:
                    def __init__(self): ...
                    def getBitStringLength(self) -> java.math.BigInteger: ...
                    def getChoiceRef(self) -> java.lang.String: ...
                    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                    def getDependency(self) -> java.lang.String: ...
                    def getFormat(self) -> 'FormatType': ...
                    def getId(self) -> java.lang.String: ...
                    def getMaximum(self) -> java.lang.String: ...
                    def getMinimum(self) -> java.lang.String: ...
                    def getOrder(self) -> float: ...
                    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                    def getPrompt(self) -> java.lang.String: ...
                    def getRangeType(self) -> 'RangeTypeType': ...
                    def getResolve(self) -> 'ResolveType': ...
                    def getValue(self) -> java.lang.String: ...
                    def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setFormat(self, formatType: 'FormatType') -> None: ...
                    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setOrder(self, float: float) -> None: ...
                    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                    def setResolve(self, resolveType: 'ResolveType') -> None: ...
                    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BankAlignmentType(java.lang.Enum['BankAlignmentType']):
    SERIAL: typing.ClassVar['BankAlignmentType'] = ...
    PARALLEL: typing.ClassVar['BankAlignmentType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'BankAlignmentType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'BankAlignmentType': ...
    @staticmethod
    def values() -> typing.MutableSequence['BankAlignmentType']: ...

class BankedBankType:
    def __init__(self): ...
    def getAccess(self) -> AccessType: ...
    def getAddressBlockOrBankOrSubspaceMap(self) -> java.util.List[typing.Any]: ...
    def getBankAlignment(self) -> BankAlignmentType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isVolatile(self) -> bool: ...
    def setAccess(self, accessType: AccessType) -> None: ...
    def setBankAlignment(self, bankAlignmentType: BankAlignmentType) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...

class BankedBlockType:
    def __init__(self): ...
    def getAccess(self) -> AccessType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getRange(self) -> 'BankedBlockType.Range': ...
    def getRegister(self) -> java.util.List['RegisterFile.Register']: ...
    def getRegisterFile(self) -> java.util.List['RegisterFile']: ...
    def getUsage(self) -> 'UsageType': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWidth(self) -> 'BankedBlockType.Width': ...
    def isVolatile(self) -> bool: ...
    def setAccess(self, accessType: AccessType) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setRange(self, range: 'BankedBlockType.Range') -> None: ...
    def setUsage(self, usageType: 'UsageType') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    def setWidth(self, width: 'BankedBlockType.Width') -> None: ...
    class Range:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Width:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.math.BigInteger: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...

class BankedSubspaceType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getMasterRef(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMasterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class BaseAddress:
    def __init__(self): ...
    def getBitStringLength(self) -> java.math.BigInteger: ...
    def getChoiceRef(self) -> java.lang.String: ...
    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
    def getDependency(self) -> java.lang.String: ...
    def getFormat(self) -> 'FormatType': ...
    def getId(self) -> java.lang.String: ...
    def getMaximum(self) -> java.lang.String: ...
    def getMinimum(self) -> java.lang.String: ...
    def getOrder(self) -> float: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getPrompt(self) -> java.lang.String: ...
    def getRangeType(self) -> 'RangeTypeType': ...
    def getResolve(self) -> 'ResolveType': ...
    def getValue(self) -> java.lang.String: ...
    def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFormat(self, formatType: 'FormatType') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOrder(self, float: float) -> None: ...
    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
    def setResolve(self, resolveType: 'ResolveType') -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BitSteeringType(java.lang.Enum['BitSteeringType']):
    ON: typing.ClassVar['BitSteeringType'] = ...
    OFF: typing.ClassVar['BitSteeringType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'BitSteeringType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'BitSteeringType': ...
    @staticmethod
    def values() -> typing.MutableSequence['BitSteeringType']: ...

class BusDefinition:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getExtends(self) -> 'LibraryRefType': ...
    def getLibrary(self) -> java.lang.String: ...
    def getMaxMasters(self) -> java.math.BigInteger: ...
    def getMaxSlaves(self) -> java.math.BigInteger: ...
    def getName(self) -> java.lang.String: ...
    def getSystemGroupNames(self) -> 'BusDefinition.SystemGroupNames': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def isDirectConnection(self) -> bool: ...
    def isIsAddressable(self) -> bool: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDirectConnection(self, boolean: bool) -> None: ...
    def setExtends(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setIsAddressable(self, boolean: bool) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaxMasters(self, bigInteger: java.math.BigInteger) -> None: ...
    def setMaxSlaves(self, bigInteger: java.math.BigInteger) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSystemGroupNames(self, systemGroupNames: 'BusDefinition.SystemGroupNames') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class SystemGroupNames:
        def __init__(self): ...
        def getSystemGroupName(self) -> java.util.List[java.lang.String]: ...

class BusInterfaces:
    def __init__(self): ...
    def getBusInterface(self) -> java.util.List['BusInterfaceType']: ...

class CellClassValueType(java.lang.Enum['CellClassValueType']):
    COMBINATIONAL: typing.ClassVar['CellClassValueType'] = ...
    SEQUENTIAL: typing.ClassVar['CellClassValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellClassValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellClassValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellClassValueType']: ...

class CellFunctionValueType(java.lang.Enum['CellFunctionValueType']):
    NAND_2: typing.ClassVar['CellFunctionValueType'] = ...
    BUF: typing.ClassVar['CellFunctionValueType'] = ...
    INV: typing.ClassVar['CellFunctionValueType'] = ...
    MUX_21: typing.ClassVar['CellFunctionValueType'] = ...
    DFF: typing.ClassVar['CellFunctionValueType'] = ...
    LATCH: typing.ClassVar['CellFunctionValueType'] = ...
    XOR_2: typing.ClassVar['CellFunctionValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellFunctionValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellFunctionValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellFunctionValueType']: ...

class CellSpecification:
    def __init__(self): ...
    def getCellClass(self) -> 'CellSpecification.CellClass': ...
    def getCellFunction(self) -> 'CellSpecification.CellFunction': ...
    def setCellClass(self, cellClass: 'CellSpecification.CellClass') -> None: ...
    def setCellFunction(self, cellFunction: 'CellSpecification.CellFunction') -> None: ...
    class CellClass:
        def __init__(self): ...
        def getCellStrength(self) -> 'CellStrengthValueType': ...
        def getValue(self) -> CellClassValueType: ...
        def setCellStrength(self, cellStrengthValueType: 'CellStrengthValueType') -> None: ...
        def setValue(self, cellClassValueType: CellClassValueType) -> None: ...
    class CellFunction:
        def __init__(self): ...
        def getCellStrength(self) -> 'CellStrengthValueType': ...
        def getValue(self) -> CellFunctionValueType: ...
        def setCellStrength(self, cellStrengthValueType: 'CellStrengthValueType') -> None: ...
        def setValue(self, cellFunctionValueType: CellFunctionValueType) -> None: ...

class CellStrengthValueType(java.lang.Enum['CellStrengthValueType']):
    LOW: typing.ClassVar['CellStrengthValueType'] = ...
    MEDIAN: typing.ClassVar['CellStrengthValueType'] = ...
    HIGH: typing.ClassVar['CellStrengthValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'CellStrengthValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'CellStrengthValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['CellStrengthValueType']: ...

class Channels:
    def __init__(self): ...
    def getChannel(self) -> java.util.List['Channels.Channel']: ...
    class Channel:
        def __init__(self): ...
        def getBusInterfaceRef(self) -> java.util.List[java.lang.String]: ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Choices:
    def __init__(self): ...
    def getChoice(self) -> java.util.List['Choices.Choice']: ...
    class Choice:
        def __init__(self): ...
        def getEnumeration(self) -> java.util.List['Choices.Choice.Enumeration']: ...
        def getName(self) -> java.lang.String: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Enumeration:
            def __init__(self): ...
            def getHelp(self) -> java.lang.String: ...
            def getText(self) -> java.lang.String: ...
            def getValue(self) -> java.lang.String: ...
            def setHelp(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setText(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ClockDriverType:
    def __init__(self): ...
    def getClockPeriod(self) -> 'ClockDriverType.ClockPeriod': ...
    def getClockPulseDuration(self) -> 'ClockDriverType.ClockPulseDuration': ...
    def getClockPulseOffset(self) -> 'ClockDriverType.ClockPulseOffset': ...
    def getClockPulseValue(self) -> 'ClockDriverType.ClockPulseValue': ...
    def setClockPeriod(self, clockPeriod: 'ClockDriverType.ClockPeriod') -> None: ...
    def setClockPulseDuration(self, clockPulseDuration: 'ClockDriverType.ClockPulseDuration') -> None: ...
    def setClockPulseOffset(self, clockPulseOffset: 'ClockDriverType.ClockPulseOffset') -> None: ...
    def setClockPulseValue(self, clockPulseValue: 'ClockDriverType.ClockPulseValue') -> None: ...
    class ClockPeriod:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getUnits(self) -> 'DelayValueUnitType': ...
        def getValue(self) -> java.util.List[float]: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setUnits(self, delayValueUnitType: 'DelayValueUnitType') -> None: ...
    class ClockPulseDuration:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getUnits(self) -> 'DelayValueUnitType': ...
        def getValue(self) -> java.util.List[float]: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setUnits(self, delayValueUnitType: 'DelayValueUnitType') -> None: ...
    class ClockPulseOffset:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getUnits(self) -> 'DelayValueUnitType': ...
        def getValue(self) -> java.util.List[float]: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setUnits(self, delayValueUnitType: 'DelayValueUnitType') -> None: ...
    class ClockPulseValue:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ComponentGenerators:
    def __init__(self): ...
    def getComponentGenerator(self) -> java.util.List['ComponentGenerator']: ...

class ComponentInstance:
    def __init__(self): ...
    def getComponentRef(self) -> 'LibraryRefType': ...
    def getConfigurableElementValues(self) -> 'ConfigurableElementValues': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getInstanceName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setComponentRef(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setConfigurableElementValues(self, configurableElementValues: 'ConfigurableElementValues') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ComponentInstances:
    def __init__(self): ...
    def getComponentInstance(self) -> java.util.List[ComponentInstance]: ...

class ComponentPortDirectionType(java.lang.Enum['ComponentPortDirectionType']):
    IN: typing.ClassVar['ComponentPortDirectionType'] = ...
    OUT: typing.ClassVar['ComponentPortDirectionType'] = ...
    INOUT: typing.ClassVar['ComponentPortDirectionType'] = ...
    PHANTOM: typing.ClassVar['ComponentPortDirectionType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ComponentPortDirectionType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ComponentPortDirectionType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ComponentPortDirectionType']: ...

class ComponentType:
    def __init__(self): ...
    def getAddressSpaces(self) -> AddressSpaces: ...
    def getBusInterfaces(self) -> BusInterfaces: ...
    def getChannels(self) -> Channels: ...
    def getChoices(self) -> Choices: ...
    def getComponentGenerators(self) -> ComponentGenerators: ...
    def getCpus(self) -> 'ComponentType.Cpus': ...
    def getDescription(self) -> java.lang.String: ...
    def getFileSets(self) -> 'FileSets': ...
    def getLibrary(self) -> java.lang.String: ...
    def getMemoryMaps(self) -> 'MemoryMaps': ...
    def getModel(self) -> 'ModelType': ...
    def getName(self) -> java.lang.String: ...
    def getOtherClockDrivers(self) -> 'OtherClocks': ...
    def getParameters(self) -> 'Parameters': ...
    def getRemapStates(self) -> 'RemapStates': ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def getWhiteboxElements(self) -> 'ComponentType.WhiteboxElements': ...
    def setAddressSpaces(self, addressSpaces: AddressSpaces) -> None: ...
    def setBusInterfaces(self, busInterfaces: BusInterfaces) -> None: ...
    def setChannels(self, channels: Channels) -> None: ...
    def setChoices(self, choices: Choices) -> None: ...
    def setComponentGenerators(self, componentGenerators: ComponentGenerators) -> None: ...
    def setCpus(self, cpus: 'ComponentType.Cpus') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSets(self, fileSets: 'FileSets') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMemoryMaps(self, memoryMaps: 'MemoryMaps') -> None: ...
    def setModel(self, modelType: 'ModelType') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOtherClockDrivers(self, otherClocks: 'OtherClocks') -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setRemapStates(self, remapStates: 'RemapStates') -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setWhiteboxElements(self, whiteboxElements: 'ComponentType.WhiteboxElements') -> None: ...
    class Cpus:
        def __init__(self): ...
        def getCpu(self) -> java.util.List['ComponentType.Cpus.Cpu']: ...
        class Cpu:
            def __init__(self): ...
            def getAddressSpaceRef(self) -> java.util.List[AddrSpaceRefType]: ...
            def getDescription(self) -> java.lang.String: ...
            def getDisplayName(self) -> java.lang.String: ...
            def getName(self) -> java.lang.String: ...
            def getParameters(self) -> 'Parameters': ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setParameters(self, parameters: 'Parameters') -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class WhiteboxElements:
        def __init__(self): ...
        def getWhiteboxElement(self) -> java.util.List['WhiteboxElementType']: ...

class ConfigurableElementValue:
    def __init__(self): ...
    def getReferenceId(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def setReferenceId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ConfigurableElementValues:
    def __init__(self): ...
    def getConfigurableElementValue(self) -> java.util.List[ConfigurableElementValue]: ...

class ConstraintSet:
    def __init__(self): ...
    def getConstraintSetId(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getDriveConstraint(self) -> 'DriveConstraint': ...
    def getLoadConstraint(self) -> 'LoadConstraint': ...
    def getName(self) -> java.lang.String: ...
    def getTimingConstraint(self) -> java.util.List['TimingConstraint']: ...
    def getVector(self) -> 'ConstraintSet.Vector': ...
    def setConstraintSetId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDriveConstraint(self, driveConstraint: 'DriveConstraint') -> None: ...
    def setLoadConstraint(self, loadConstraint: 'LoadConstraint') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVector(self, vector: 'ConstraintSet.Vector') -> None: ...
    class Vector:
        def __init__(self): ...
        def getLeft(self) -> 'ConstraintSet.Vector.Left': ...
        def getRight(self) -> 'ConstraintSet.Vector.Right': ...
        def setLeft(self, left: 'ConstraintSet.Vector.Left') -> None: ...
        def setRight(self, right: 'ConstraintSet.Vector.Right') -> None: ...
        class Left:
            def __init__(self): ...
            def getValue(self) -> java.math.BigInteger: ...
            def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
        class Right:
            def __init__(self): ...
            def getValue(self) -> java.math.BigInteger: ...
            def setValue(self, bigInteger: java.math.BigInteger) -> None: ...

class ConstraintSets:
    def __init__(self): ...
    def getConstraintSet(self) -> java.util.List[ConstraintSet]: ...

class DataTypeType(java.lang.Enum['DataTypeType']):
    INT: typing.ClassVar['DataTypeType'] = ...
    UNSIGNED_INT: typing.ClassVar['DataTypeType'] = ...
    LONG: typing.ClassVar['DataTypeType'] = ...
    UNSIGNED_LONG: typing.ClassVar['DataTypeType'] = ...
    FLOAT: typing.ClassVar['DataTypeType'] = ...
    DOUBLE: typing.ClassVar['DataTypeType'] = ...
    CHAR: typing.ClassVar['DataTypeType'] = ...
    VOID: typing.ClassVar['DataTypeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DataTypeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DataTypeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DataTypeType']: ...

class DefaultValue:
    def __init__(self): ...
    def getBitStringLength(self) -> java.math.BigInteger: ...
    def getChoiceRef(self) -> java.lang.String: ...
    def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
    def getDependency(self) -> java.lang.String: ...
    def getFormat(self) -> 'FormatType': ...
    def getId(self) -> java.lang.String: ...
    def getMaximum(self) -> java.lang.String: ...
    def getMinimum(self) -> java.lang.String: ...
    def getOrder(self) -> float: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getPrompt(self) -> java.lang.String: ...
    def getRangeType(self) -> 'RangeTypeType': ...
    def getResolve(self) -> 'ResolveType': ...
    def getValue(self) -> java.lang.String: ...
    def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
    def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFormat(self, formatType: 'FormatType') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setOrder(self, float: float) -> None: ...
    def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
    def setResolve(self, resolveType: 'ResolveType') -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class DelayValueType(java.lang.Enum['DelayValueType']):
    MIN: typing.ClassVar['DelayValueType'] = ...
    MAX: typing.ClassVar['DelayValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DelayValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DelayValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DelayValueType']: ...

class DelayValueUnitType(java.lang.Enum['DelayValueUnitType']):
    PS: typing.ClassVar['DelayValueUnitType'] = ...
    NS: typing.ClassVar['DelayValueUnitType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'DelayValueUnitType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DelayValueUnitType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DelayValueUnitType']: ...

class Design:
    def __init__(self): ...
    def getAdHocConnections(self) -> AdHocConnections: ...
    def getComponentInstances(self) -> ComponentInstances: ...
    def getDescription(self) -> java.lang.String: ...
    def getHierConnections(self) -> 'Design.HierConnections': ...
    def getInterconnections(self) -> 'Interconnections': ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def setAdHocConnections(self, adHocConnections: AdHocConnections) -> None: ...
    def setComponentInstances(self, componentInstances: ComponentInstances) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setHierConnections(self, hierConnections: 'Design.HierConnections') -> None: ...
    def setInterconnections(self, interconnections: 'Interconnections') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class HierConnections:
        def __init__(self): ...
        def getHierConnection(self) -> java.util.List['Design.HierConnections.HierConnection']: ...
        class HierConnection:
            def __init__(self): ...
            def getInterface(self) -> 'Interface': ...
            def getInterfaceRef(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setInterface(self, interface: 'Interface') -> None: ...
            def setInterfaceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class DesignConfiguration:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDesignRef(self) -> 'LibraryRefType': ...
    def getGeneratorChainConfiguration(self) -> java.util.List['DesignConfiguration.GeneratorChainConfiguration']: ...
    def getInterconnectionConfiguration(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration']: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def getViewConfiguration(self) -> java.util.List['DesignConfiguration.ViewConfiguration']: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDesignRef(self, libraryRefType: 'LibraryRefType') -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class GeneratorChainConfiguration:
        def __init__(self): ...
        def getConfigurableElementValues(self) -> ConfigurableElementValues: ...
        def getGeneratorChainRef(self) -> 'LibraryRefType': ...
        def setConfigurableElementValues(self, configurableElementValues: ConfigurableElementValues) -> None: ...
        def setGeneratorChainRef(self, libraryRefType: 'LibraryRefType') -> None: ...
    class InterconnectionConfiguration:
        def __init__(self): ...
        def getAbstractors(self) -> 'DesignConfiguration.InterconnectionConfiguration.Abstractors': ...
        def getInterconnectionRef(self) -> java.lang.String: ...
        def setAbstractors(self, abstractors: 'DesignConfiguration.InterconnectionConfiguration.Abstractors') -> None: ...
        def setInterconnectionRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Abstractors:
            def __init__(self): ...
            def getAbstractor(self) -> java.util.List['DesignConfiguration.InterconnectionConfiguration.Abstractors.Abstractor']: ...
            class Abstractor:
                def __init__(self): ...
                def getAbstractorRef(self) -> 'LibraryRefType': ...
                def getConfigurableElementValues(self) -> ConfigurableElementValues: ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getInstanceName(self) -> java.lang.String: ...
                def getViewName(self) -> java.lang.String: ...
                def setAbstractorRef(self, libraryRefType: 'LibraryRefType') -> None: ...
                def setConfigurableElementValues(self, configurableElementValues: ConfigurableElementValues) -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setViewName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ViewConfiguration:
        def __init__(self): ...
        def getInstanceName(self) -> java.lang.String: ...
        def getViewName(self) -> java.lang.String: ...
        def setInstanceName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setViewName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class DriveConstraint:
    def __init__(self): ...
    def getCellSpecification(self) -> CellSpecification: ...
    def setCellSpecification(self, cellSpecification: CellSpecification) -> None: ...

class DriverType:
    def __init__(self): ...
    def getClockDriver(self) -> 'ClockDriver': ...
    def getDefaultValue(self) -> DefaultValue: ...
    def getSingleShotDriver(self) -> 'SingleShotDriver': ...
    def setClockDriver(self, clockDriver: 'ClockDriver') -> None: ...
    def setDefaultValue(self, defaultValue: DefaultValue) -> None: ...
    def setSingleShotDriver(self, singleShotDriver: 'SingleShotDriver') -> None: ...

class EdgeValueType(java.lang.Enum['EdgeValueType']):
    RISE: typing.ClassVar['EdgeValueType'] = ...
    FALL: typing.ClassVar['EdgeValueType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'EdgeValueType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'EdgeValueType': ...
    @staticmethod
    def values() -> typing.MutableSequence['EdgeValueType']: ...

class EndianessType(java.lang.Enum['EndianessType']):
    BIG: typing.ClassVar['EndianessType'] = ...
    LITTLE: typing.ClassVar['EndianessType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'EndianessType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'EndianessType': ...
    @staticmethod
    def values() -> typing.MutableSequence['EndianessType']: ...

class EnumeratedValues:
    def __init__(self): ...
    def getEnumeratedValue(self) -> java.util.List['EnumeratedValues.EnumeratedValue']: ...
    class EnumeratedValue:
        def __init__(self): ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getUsage(self) -> java.lang.String: ...
        def getValue(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setUsage(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class ExecutableImage:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getFileSetRefGroup(self) -> 'ExecutableImage.FileSetRefGroup': ...
    def getId(self) -> java.lang.String: ...
    def getImageType(self) -> java.lang.String: ...
    def getLanguageTools(self) -> 'ExecutableImage.LanguageTools': ...
    def getName(self) -> 'ExecutableImage.Name': ...
    def getParameters(self) -> 'Parameters': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileSetRefGroup(self, fileSetRefGroup: 'ExecutableImage.FileSetRefGroup') -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setImageType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLanguageTools(self, languageTools: 'ExecutableImage.LanguageTools') -> None: ...
    def setName(self, name: 'ExecutableImage.Name') -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class FileSetRefGroup:
        def __init__(self): ...
        def getFileSetRef(self) -> java.util.List['FileSetRef']: ...
    class LanguageTools:
        def __init__(self): ...
        def getFileBuilder(self) -> java.util.List['ExecutableImage.LanguageTools.FileBuilder']: ...
        def getLinker(self) -> 'ExecutableImage.LanguageTools.Linker': ...
        def getLinkerCommandFile(self) -> 'ExecutableImage.LanguageTools.LinkerCommandFile': ...
        def getLinkerFlags(self) -> 'ExecutableImage.LanguageTools.LinkerFlags': ...
        def setLinker(self, linker: 'ExecutableImage.LanguageTools.Linker') -> None: ...
        def setLinkerCommandFile(self, linkerCommandFile: 'ExecutableImage.LanguageTools.LinkerCommandFile') -> None: ...
        def setLinkerFlags(self, linkerFlags: 'ExecutableImage.LanguageTools.LinkerFlags') -> None: ...
        class FileBuilder:
            def __init__(self): ...
            def getCommand(self) -> 'ExecutableImage.LanguageTools.FileBuilder.Command': ...
            def getFileType(self) -> java.lang.String: ...
            def getFlags(self) -> 'ExecutableImage.LanguageTools.FileBuilder.Flags': ...
            def getReplaceDefaultFlags(self) -> 'ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags': ...
            def getUserFileType(self) -> java.lang.String: ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setCommand(self, command: 'ExecutableImage.LanguageTools.FileBuilder.Command') -> None: ...
            def setFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFlags(self, flags: 'ExecutableImage.LanguageTools.FileBuilder.Flags') -> None: ...
            def setReplaceDefaultFlags(self, replaceDefaultFlags: 'ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags') -> None: ...
            def setUserFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class Command:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class Flags:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class ReplaceDefaultFlags:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def isValue(self) -> bool: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, boolean: bool) -> None: ...
        class Linker:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.lang.String: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class LinkerCommandFile:
            def __init__(self): ...
            def getCommandLineSwitch(self) -> 'ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch': ...
            def getEnable(self) -> 'ExecutableImage.LanguageTools.LinkerCommandFile.Enable': ...
            def getGeneratorRef(self) -> java.util.List[java.lang.String]: ...
            def getName(self) -> 'ExecutableImage.LanguageTools.LinkerCommandFile.Name': ...
            def getVendorExtensions(self) -> 'VendorExtensions': ...
            def setCommandLineSwitch(self, commandLineSwitch: 'ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch') -> None: ...
            def setEnable(self, enable: 'ExecutableImage.LanguageTools.LinkerCommandFile.Enable') -> None: ...
            def setName(self, name: 'ExecutableImage.LanguageTools.LinkerCommandFile.Name') -> None: ...
            def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
            class CommandLineSwitch:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class Enable:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def isValue(self) -> bool: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, boolean: bool) -> None: ...
            class Name:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> 'FormatType': ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> 'RangeTypeType': ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: 'FormatType') -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class LinkerFlags:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.lang.String: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Name:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FieldType:
    def __init__(self): ...
    def getAccess(self) -> AccessType: ...
    def getBitOffset(self) -> java.math.BigInteger: ...
    def getBitWidth(self) -> 'FieldType.BitWidth': ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEnumeratedValues(self) -> EnumeratedValues: ...
    def getId(self) -> java.lang.String: ...
    def getModifiedWriteValue(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getReadAction(self) -> java.lang.String: ...
    def getTestable(self) -> 'FieldType.Testable': ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getWriteValueConstraint(self) -> 'WriteValueConstraintType': ...
    def isVolatile(self) -> bool: ...
    def setAccess(self, accessType: AccessType) -> None: ...
    def setBitOffset(self, bigInteger: java.math.BigInteger) -> None: ...
    def setBitWidth(self, bitWidth: 'FieldType.BitWidth') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEnumeratedValues(self, enumeratedValues: EnumeratedValues) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setModifiedWriteValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setReadAction(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTestable(self, testable: 'FieldType.Testable') -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVolatile(self, boolean: bool) -> None: ...
    def setWriteValueConstraint(self, writeValueConstraintType: 'WriteValueConstraintType') -> None: ...
    class BitWidth:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.math.BigInteger: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
    class Testable:
        def __init__(self): ...
        def getTestConstraint(self) -> java.lang.String: ...
        def isValue(self) -> bool: ...
        def setTestConstraint(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setValue(self, boolean: bool) -> None: ...

class File:
    def __init__(self): ...
    def getBuildCommand(self) -> 'File.BuildCommand': ...
    def getDefine(self) -> java.util.List['NameValuePairType']: ...
    def getDependency(self) -> java.util.List[java.lang.String]: ...
    def getDescription(self) -> java.lang.String: ...
    def getExportedName(self) -> java.util.List[java.lang.String]: ...
    def getFileId(self) -> java.lang.String: ...
    def getFileType(self) -> java.util.List[jakarta.xml.bind.JAXBElement[java.lang.String]]: ...
    def getImageType(self) -> java.util.List[java.lang.String]: ...
    def getIsIncludeFile(self) -> 'File.IsIncludeFile': ...
    def getLogicalName(self) -> 'File.LogicalName': ...
    def getName(self) -> 'File.Name': ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setBuildCommand(self, buildCommand: 'File.BuildCommand') -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFileId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsIncludeFile(self, isIncludeFile: 'File.IsIncludeFile') -> None: ...
    def setLogicalName(self, logicalName: 'File.LogicalName') -> None: ...
    def setName(self, name: 'File.Name') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class BuildCommand:
        def __init__(self): ...
        def getCommand(self) -> 'File.BuildCommand.Command': ...
        def getFlags(self) -> 'File.BuildCommand.Flags': ...
        def getReplaceDefaultFlags(self) -> 'File.BuildCommand.ReplaceDefaultFlags': ...
        def getTargetName(self) -> 'File.BuildCommand.TargetName': ...
        def setCommand(self, command: 'File.BuildCommand.Command') -> None: ...
        def setFlags(self, flags: 'File.BuildCommand.Flags') -> None: ...
        def setReplaceDefaultFlags(self, replaceDefaultFlags: 'File.BuildCommand.ReplaceDefaultFlags') -> None: ...
        def setTargetName(self, targetName: 'File.BuildCommand.TargetName') -> None: ...
        class Command:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.lang.String: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Flags:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.lang.String: ...
            def isAppend(self) -> bool: ...
            def setAppend(self, boolean: bool) -> None: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class ReplaceDefaultFlags:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def isValue(self) -> bool: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, boolean: bool) -> None: ...
        class TargetName:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> 'FormatType': ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> 'RangeTypeType': ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.lang.String: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: 'FormatType') -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class IsIncludeFile:
        def __init__(self): ...
        def isExternalDeclarations(self) -> bool: ...
        def isValue(self) -> bool: ...
        def setExternalDeclarations(self, boolean: bool) -> None: ...
        def setValue(self, boolean: bool) -> None: ...
    class LogicalName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isDefault(self) -> bool: ...
        def setDefault(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Name:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FileBuilderType:
    def __init__(self): ...
    def getCommand(self) -> 'FileBuilderType.Command': ...
    def getFileType(self) -> java.lang.String: ...
    def getFlags(self) -> 'FileBuilderType.Flags': ...
    def getReplaceDefaultFlags(self) -> 'FileBuilderType.ReplaceDefaultFlags': ...
    def getUserFileType(self) -> java.lang.String: ...
    def setCommand(self, command: 'FileBuilderType.Command') -> None: ...
    def setFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFlags(self, flags: 'FileBuilderType.Flags') -> None: ...
    def setReplaceDefaultFlags(self, replaceDefaultFlags: 'FileBuilderType.ReplaceDefaultFlags') -> None: ...
    def setUserFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Command:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Flags:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ReplaceDefaultFlags:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> 'FormatType': ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def isValue(self) -> bool: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: 'FormatType') -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, boolean: bool) -> None: ...

class FileSetRef:
    def __init__(self): ...
    def getLocalName(self) -> java.lang.String: ...
    def setLocalName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FileSets:
    def __init__(self): ...
    def getFileSet(self) -> java.util.List['FileSetType']: ...

class FormatType(java.lang.Enum['FormatType']):
    BIT_STRING: typing.ClassVar['FormatType'] = ...
    BOOL: typing.ClassVar['FormatType'] = ...
    FLOAT: typing.ClassVar['FormatType'] = ...
    LONG: typing.ClassVar['FormatType'] = ...
    STRING: typing.ClassVar['FormatType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'FormatType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FormatType': ...
    @staticmethod
    def values() -> typing.MutableSequence['FormatType']: ...

class GeneratorChain:
    def __init__(self): ...
    def getChainGroup(self) -> java.util.List[java.lang.String]: ...
    def getChoices(self) -> Choices: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorChainSelectorOrComponentGeneratorSelectorOrGenerator(self) -> java.util.List[typing.Any]: ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def getVersion(self) -> java.lang.String: ...
    def isHidden(self) -> bool: ...
    def setChoices(self, choices: Choices) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setHidden(self, boolean: bool) -> None: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class GeneratorChainSelector:
        def __init__(self): ...
        def getGeneratorChainRef(self) -> 'LibraryRefType': ...
        def getGroupSelector(self) -> 'GroupSelector': ...
        def isUnique(self) -> bool: ...
        def setGeneratorChainRef(self, libraryRefType: 'LibraryRefType') -> None: ...
        def setGroupSelector(self, groupSelector: 'GroupSelector') -> None: ...
        def setUnique(self, boolean: bool) -> None: ...

class GeneratorSelectorType:
    def __init__(self): ...
    def getGroupSelector(self) -> 'GroupSelector': ...
    def setGroupSelector(self, groupSelector: 'GroupSelector') -> None: ...

class GeneratorType:
    def __init__(self): ...
    def getApiType(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getGeneratorExe(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> 'Parameters': ...
    def getPhase(self) -> 'Phase': ...
    def getTransportMethods(self) -> 'GeneratorType.TransportMethods': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def isHidden(self) -> bool: ...
    def setApiType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setGeneratorExe(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setHidden(self, boolean: bool) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPhase(self, phase: 'Phase') -> None: ...
    def setTransportMethods(self, transportMethods: 'GeneratorType.TransportMethods') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class TransportMethods:
        def __init__(self): ...
        def getTransportMethod(self) -> java.lang.String: ...
        def setTransportMethod(self, string: typing.Union[java.lang.String, str]) -> None: ...

class GroupSelector:
    def __init__(self): ...
    def getMultipleGroupSelectionOperator(self) -> java.lang.String: ...
    def getName(self) -> java.util.List[java.lang.String]: ...
    def setMultipleGroupSelectionOperator(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Interconnection:
    def __init__(self): ...
    def getActiveInterface(self) -> java.util.List['Interface']: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Interconnections:
    def __init__(self): ...
    def getInterconnection(self) -> java.util.List[Interconnection]: ...
    def getMonitorInterconnection(self) -> java.util.List['MonitorInterconnection']: ...

class Interface:
    def __init__(self): ...
    def getBusRef(self) -> java.lang.String: ...
    def getComponentRef(self) -> java.lang.String: ...
    def setBusRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setComponentRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LibraryRefType:
    def __init__(self): ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVersion(self) -> java.lang.String: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LoadConstraint:
    def __init__(self): ...
    def getCellSpecification(self) -> CellSpecification: ...
    def getCount(self) -> java.math.BigInteger: ...
    def setCellSpecification(self, cellSpecification: CellSpecification) -> None: ...
    def setCount(self, bigInteger: java.math.BigInteger) -> None: ...

class LocalMemoryMapType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMemoryMap(self) -> java.util.List[typing.Any]: ...
    def getName(self) -> java.lang.String: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryMapRefType:
    def __init__(self): ...
    def getMemoryMapRef(self) -> java.lang.String: ...
    def setMemoryMapRef(self, string: typing.Union[java.lang.String, str]) -> None: ...

class MemoryMapType:
    def __init__(self): ...
    def getAddressUnitBits(self) -> java.math.BigInteger: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMemoryMap(self) -> java.util.List[typing.Any]: ...
    def getMemoryRemap(self) -> java.util.List['MemoryRemapType']: ...
    def getName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAddressUnitBits(self, bigInteger: java.math.BigInteger) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class MemoryMaps:
    def __init__(self): ...
    def getMemoryMap(self) -> java.util.List[MemoryMapType]: ...

class MemoryRemapType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getMemoryMap(self) -> java.util.List[typing.Any]: ...
    def getName(self) -> java.lang.String: ...
    def getState(self) -> java.lang.String: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setState(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ModelType:
    def __init__(self): ...
    def getModelParameters(self) -> 'ModelType.ModelParameters': ...
    def getPorts(self) -> 'ModelType.Ports': ...
    def getViews(self) -> 'ModelType.Views': ...
    def setModelParameters(self, modelParameters: 'ModelType.ModelParameters') -> None: ...
    def setPorts(self, ports: 'ModelType.Ports') -> None: ...
    def setViews(self, views: 'ModelType.Views') -> None: ...
    class ModelParameters:
        def __init__(self): ...
        def getModelParameter(self) -> java.util.List['NameValueTypeType']: ...
    class Ports:
        def __init__(self): ...
        def getPort(self) -> java.util.List['PortType']: ...
    class Views:
        def __init__(self): ...
        def getView(self) -> java.util.List['ViewType']: ...

class MonitorInterconnection:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getMonitorInterface(self) -> java.util.List['HierInterface']: ...
    def getMonitoredActiveInterface(self) -> 'HierInterface': ...
    def getName(self) -> java.lang.String: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMonitoredActiveInterface(self, hierInterface: 'HierInterface') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class NameValuePairType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getValue(self) -> 'NameValuePairType.Value': ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, value: 'NameValuePairType.Value') -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Value:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> 'RangeTypeType': ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: 'RangeTypeType') -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class OtherClocks:
    def __init__(self): ...
    def getOtherClockDriver(self) -> java.util.List['OtherClockDriver']: ...

class Parameters:
    def __init__(self): ...
    def getParameter(self) -> java.util.List[NameValuePairType]: ...

class Phase:
    def __init__(self): ...
    def getValue(self) -> float: ...
    def setValue(self, float: float) -> None: ...

class PortAccessType:
    def __init__(self): ...
    def getPortAccessHandle(self) -> java.lang.String: ...
    def getPortAccessType(self) -> java.lang.String: ...
    def setPortAccessHandle(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPortAccessType(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PortDeclarationType:
    def __init__(self): ...
    def getAccess(self) -> PortAccessType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getTransactional(self) -> 'PortTransactionalType': ...
    def getWire(self) -> 'PortWireType': ...
    def setAccess(self, portAccessType: PortAccessType) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTransactional(self, portTransactionalType: 'PortTransactionalType') -> None: ...
    def setWire(self, portWireType: 'PortWireType') -> None: ...

class PortTransactionalType:
    def __init__(self): ...
    def getConnection(self) -> 'PortTransactionalType.Connection': ...
    def getService(self) -> 'PortTransactionalType.Service': ...
    def getTransTypeDef(self) -> 'TransTypeDef': ...
    def isAllLogicalInitiativesAllowed(self) -> bool: ...
    def setAllLogicalInitiativesAllowed(self, boolean: bool) -> None: ...
    def setConnection(self, connection: 'PortTransactionalType.Connection') -> None: ...
    def setService(self, service: 'PortTransactionalType.Service') -> None: ...
    def setTransTypeDef(self, transTypeDef: 'TransTypeDef') -> None: ...
    class Connection:
        def __init__(self): ...
        def getMaxConnections(self) -> java.math.BigInteger: ...
        def getMinConnections(self) -> java.math.BigInteger: ...
        def setMaxConnections(self, bigInteger: java.math.BigInteger) -> None: ...
        def setMinConnections(self, bigInteger: java.math.BigInteger) -> None: ...
    class Service:
        def __init__(self): ...
        def getInitiative(self) -> java.lang.String: ...
        def getServiceTypeDefs(self) -> 'ServiceTypeDefs': ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def setInitiative(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setServiceTypeDefs(self, serviceTypeDefs: 'ServiceTypeDefs') -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class PortWireType:
    def __init__(self): ...
    def getConstraintSets(self) -> ConstraintSets: ...
    def getDirection(self) -> ComponentPortDirectionType: ...
    def getDriver(self) -> DriverType: ...
    def getVector(self) -> 'Vector': ...
    def getWireTypeDefs(self) -> 'WireTypeDefs': ...
    def isAllLogicalDirectionsAllowed(self) -> bool: ...
    def setAllLogicalDirectionsAllowed(self, boolean: bool) -> None: ...
    def setConstraintSets(self, constraintSets: ConstraintSets) -> None: ...
    def setDirection(self, componentPortDirectionType: ComponentPortDirectionType) -> None: ...
    def setDriver(self, driverType: DriverType) -> None: ...
    def setVector(self, vector: 'Vector') -> None: ...
    def setWireTypeDefs(self, wireTypeDefs: 'WireTypeDefs') -> None: ...

class RangeTypeType(java.lang.Enum['RangeTypeType']):
    FLOAT: typing.ClassVar['RangeTypeType'] = ...
    INT: typing.ClassVar['RangeTypeType'] = ...
    UNSIGNED_INT: typing.ClassVar['RangeTypeType'] = ...
    LONG: typing.ClassVar['RangeTypeType'] = ...
    UNSIGNED_LONG: typing.ClassVar['RangeTypeType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'RangeTypeType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'RangeTypeType': ...
    @staticmethod
    def values() -> typing.MutableSequence['RangeTypeType']: ...

class RegisterFile:
    def __init__(self): ...
    def getAddressOffset(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getDim(self) -> java.util.List[java.math.BigInteger]: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getRange(self) -> 'RegisterFile.Range': ...
    def getRegister(self) -> java.util.List['RegisterFile.Register']: ...
    def getRegisterFile(self) -> java.util.List['RegisterFile']: ...
    def getTypeIdentifier(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setAddressOffset(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setRange(self, range: 'RegisterFile.Range') -> None: ...
    def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class Range:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> 'ResolveType': ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: 'ResolveType') -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Register:
        def __init__(self): ...
        def getAccess(self) -> AccessType: ...
        def getAddressOffset(self) -> java.lang.String: ...
        def getAlternateRegisters(self) -> 'RegisterFile.Register.AlternateRegisters': ...
        def getDescription(self) -> java.lang.String: ...
        def getDim(self) -> java.util.List[java.math.BigInteger]: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getField(self) -> java.util.List[FieldType]: ...
        def getId(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getParameters(self) -> Parameters: ...
        def getReset(self) -> 'RegisterFile.Register.Reset': ...
        def getSize(self) -> 'RegisterFile.Register.Size': ...
        def getTypeIdentifier(self) -> java.lang.String: ...
        def getVendorExtensions(self) -> 'VendorExtensions': ...
        def isVolatile(self) -> bool: ...
        def setAccess(self, accessType: AccessType) -> None: ...
        def setAddressOffset(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setAlternateRegisters(self, alternateRegisters: 'RegisterFile.Register.AlternateRegisters') -> None: ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setParameters(self, parameters: Parameters) -> None: ...
        def setReset(self, reset: 'RegisterFile.Register.Reset') -> None: ...
        def setSize(self, size: 'RegisterFile.Register.Size') -> None: ...
        def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
        def setVolatile(self, boolean: bool) -> None: ...
        class AlternateRegisters:
            def __init__(self): ...
            def getAlternateRegister(self) -> java.util.List['RegisterFile.Register.AlternateRegisters.AlternateRegister']: ...
            class AlternateRegister:
                def __init__(self): ...
                def getAccess(self) -> AccessType: ...
                def getAlternateGroups(self) -> 'RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups': ...
                def getDescription(self) -> java.lang.String: ...
                def getDisplayName(self) -> java.lang.String: ...
                def getField(self) -> java.util.List[FieldType]: ...
                def getId(self) -> java.lang.String: ...
                def getName(self) -> java.lang.String: ...
                def getParameters(self) -> Parameters: ...
                def getReset(self) -> 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset': ...
                def getTypeIdentifier(self) -> java.lang.String: ...
                def getVendorExtensions(self) -> 'VendorExtensions': ...
                def isVolatile(self) -> bool: ...
                def setAccess(self, accessType: AccessType) -> None: ...
                def setAlternateGroups(self, alternateGroups: 'RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups') -> None: ...
                def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setParameters(self, parameters: Parameters) -> None: ...
                def setReset(self, reset: 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset') -> None: ...
                def setTypeIdentifier(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
                def setVolatile(self, boolean: bool) -> None: ...
                class AlternateGroups:
                    def __init__(self): ...
                    def getAlternateGroup(self) -> java.util.List[java.lang.String]: ...
                class Reset:
                    def __init__(self): ...
                    def getMask(self) -> 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask': ...
                    def getValue(self) -> 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value': ...
                    def setMask(self, mask: 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask') -> None: ...
                    def setValue(self, value: 'RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value') -> None: ...
                    class Mask:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> FormatType: ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> RangeTypeType: ...
                        def getResolve(self) -> 'ResolveType': ...
                        def getValue(self) -> java.lang.String: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: FormatType) -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                        def setResolve(self, resolveType: 'ResolveType') -> None: ...
                        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
                    class Value:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> FormatType: ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> RangeTypeType: ...
                        def getResolve(self) -> 'ResolveType': ...
                        def getValue(self) -> java.lang.String: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: FormatType) -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                        def setResolve(self, resolveType: 'ResolveType') -> None: ...
                        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Reset:
            def __init__(self): ...
            def getMask(self) -> 'RegisterFile.Register.Reset.Mask': ...
            def getValue(self) -> 'RegisterFile.Register.Reset.Value': ...
            def setMask(self, mask: 'RegisterFile.Register.Reset.Mask') -> None: ...
            def setValue(self, value: 'RegisterFile.Register.Reset.Value') -> None: ...
            class Mask:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> FormatType: ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> RangeTypeType: ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: FormatType) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class Value:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> FormatType: ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> RangeTypeType: ...
                def getResolve(self) -> 'ResolveType': ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: FormatType) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                def setResolve(self, resolveType: 'ResolveType') -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Size:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> FormatType: ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> RangeTypeType: ...
            def getResolve(self) -> 'ResolveType': ...
            def getValue(self) -> java.math.BigInteger: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: FormatType) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
            def setResolve(self, resolveType: 'ResolveType') -> None: ...
            def setValue(self, bigInteger: java.math.BigInteger) -> None: ...

class RemapStates:
    def __init__(self): ...
    def getRemapState(self) -> java.util.List['RemapStates.RemapState']: ...
    class RemapState:
        def __init__(self): ...
        def getDescription(self) -> java.lang.String: ...
        def getDisplayName(self) -> java.lang.String: ...
        def getName(self) -> java.lang.String: ...
        def getRemapPorts(self) -> 'RemapStates.RemapState.RemapPorts': ...
        def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRemapPorts(self, remapPorts: 'RemapStates.RemapState.RemapPorts') -> None: ...
        class RemapPorts:
            def __init__(self): ...
            def getRemapPort(self) -> java.util.List['RemapStates.RemapState.RemapPorts.RemapPort']: ...
            class RemapPort:
                def __init__(self): ...
                def getPortIndex(self) -> java.math.BigInteger: ...
                def getPortNameRef(self) -> java.lang.String: ...
                def getValue(self) -> java.lang.String: ...
                def setPortIndex(self, bigInteger: java.math.BigInteger) -> None: ...
                def setPortNameRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class RequiresDriver:
    def __init__(self): ...
    def getDriverType(self) -> java.lang.String: ...
    def isValue(self) -> bool: ...
    def setDriverType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, boolean: bool) -> None: ...

class ResolveType(java.lang.Enum['ResolveType']):
    IMMEDIATE: typing.ClassVar['ResolveType'] = ...
    USER: typing.ClassVar['ResolveType'] = ...
    DEPENDENT: typing.ClassVar['ResolveType'] = ...
    GENERATED: typing.ClassVar['ResolveType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'ResolveType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ResolveType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ResolveType']: ...

class ResolvedLibraryRefType:
    def __init__(self): ...
    def getLibrary(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def getVendor(self) -> java.lang.String: ...
    def getVersion(self) -> java.lang.String: ...
    def setLibrary(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVersion(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ServiceType:
    def __init__(self): ...
    def getInitiative(self) -> java.lang.String: ...
    def getTypeName(self) -> java.util.List['ServiceType.TypeName']: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setInitiative(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isImplicit(self) -> bool: ...
        def setImplicit(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ServiceTypeDef:
    def __init__(self): ...
    def getParameters(self) -> 'ServiceTypeDef.Parameters': ...
    def getTypeDefinition(self) -> java.util.List[java.lang.String]: ...
    def getTypeName(self) -> 'ServiceTypeDef.TypeName': ...
    def setParameters(self, parameters: 'ServiceTypeDef.Parameters') -> None: ...
    def setTypeName(self, typeName: 'ServiceTypeDef.TypeName') -> None: ...
    class Parameters:
        def __init__(self): ...
        def getParameter(self) -> java.util.List[NameValuePairType]: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isConstrained(self) -> bool: ...
        def isImplicit(self) -> bool: ...
        def setConstrained(self, boolean: bool) -> None: ...
        def setImplicit(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ServiceTypeDefs:
    def __init__(self): ...
    def getServiceTypeDef(self) -> java.util.List[ServiceTypeDef]: ...

class SingleShotDriver:
    def __init__(self): ...
    def getSingleShotDuration(self) -> 'SingleShotDriver.SingleShotDuration': ...
    def getSingleShotOffset(self) -> 'SingleShotDriver.SingleShotOffset': ...
    def getSingleShotValue(self) -> 'SingleShotDriver.SingleShotValue': ...
    def setSingleShotDuration(self, singleShotDuration: 'SingleShotDriver.SingleShotDuration') -> None: ...
    def setSingleShotOffset(self, singleShotOffset: 'SingleShotDriver.SingleShotOffset') -> None: ...
    def setSingleShotValue(self, singleShotValue: 'SingleShotDriver.SingleShotValue') -> None: ...
    class SingleShotDuration:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.util.List[float]: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
    class SingleShotOffset:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.util.List[float]: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
    class SingleShotValue:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SubspaceRefType:
    def __init__(self): ...
    def getBaseAddress(self) -> BaseAddress: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getMasterRef(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getSegmentRef(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> 'VendorExtensions': ...
    def setBaseAddress(self, baseAddress: BaseAddress) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMasterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setSegmentRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: 'VendorExtensions') -> None: ...

class TimingConstraint:
    def __init__(self): ...
    def getClockEdge(self) -> EdgeValueType: ...
    def getClockName(self) -> java.lang.String: ...
    def getDelayType(self) -> DelayValueType: ...
    def getValue(self) -> float: ...
    def setClockEdge(self, edgeValueType: EdgeValueType) -> None: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDelayType(self, delayValueType: DelayValueType) -> None: ...
    def setValue(self, float: float) -> None: ...

class TransTypeDef:
    def __init__(self): ...
    def getTypeDefinition(self) -> java.util.List[java.lang.String]: ...
    def getTypeName(self) -> 'TransTypeDef.TypeName': ...
    def setTypeName(self, typeName: 'TransTypeDef.TypeName') -> None: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isConstrained(self) -> bool: ...
        def setConstrained(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class UsageType(java.lang.Enum['UsageType']):
    MEMORY: typing.ClassVar['UsageType'] = ...
    REGISTER: typing.ClassVar['UsageType'] = ...
    RESERVED: typing.ClassVar['UsageType'] = ...
    @staticmethod
    def fromValue(string: typing.Union[java.lang.String, str]) -> 'UsageType': ...
    def value(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UsageType': ...
    @staticmethod
    def values() -> typing.MutableSequence['UsageType']: ...

class ValueMaskConfigType:
    def __init__(self): ...

class Vector:
    def __init__(self): ...
    def getLeft(self) -> 'Vector.Left': ...
    def getRight(self) -> 'Vector.Right': ...
    def setLeft(self, left: 'Vector.Left') -> None: ...
    def setRight(self, right: 'Vector.Right') -> None: ...
    class Left:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.math.BigInteger: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
    class Right:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.math.BigInteger: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...

class VendorExtensions:
    def __init__(self): ...
    def getAny(self) -> java.util.List[typing.Any]: ...

class ViewType:
    def __init__(self): ...
    def getConstraintSetRef(self) -> java.util.List[java.lang.String]: ...
    def getDefaultFileBuilder(self) -> java.util.List[FileBuilderType]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEnvIdentifier(self) -> java.util.List[java.lang.String]: ...
    def getFileSetRef(self) -> java.util.List[FileSetRef]: ...
    def getHierarchyRef(self) -> LibraryRefType: ...
    def getLanguage(self) -> 'ViewType.Language': ...
    def getModelName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def getWhiteboxElementRefs(self) -> 'ViewType.WhiteboxElementRefs': ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setHierarchyRef(self, libraryRefType: LibraryRefType) -> None: ...
    def setLanguage(self, language: 'ViewType.Language') -> None: ...
    def setModelName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    def setWhiteboxElementRefs(self, whiteboxElementRefs: 'ViewType.WhiteboxElementRefs') -> None: ...
    class Language:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isStrict(self) -> bool: ...
        def setStrict(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class WhiteboxElementRefs:
        def __init__(self): ...
        def getWhiteboxElementRef(self) -> java.util.List['WhiteboxElementRefType']: ...

class WhiteboxElementRefType:
    def __init__(self): ...
    def getName(self) -> java.lang.String: ...
    def getWhiteboxPath(self) -> java.util.List['WhiteboxElementRefType.WhiteboxPath']: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class WhiteboxPath:
        def __init__(self): ...
        def getLeft(self) -> java.math.BigInteger: ...
        def getPathName(self) -> java.lang.String: ...
        def getRight(self) -> java.math.BigInteger: ...
        def setLeft(self, bigInteger: java.math.BigInteger) -> None: ...
        def setPathName(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRight(self, bigInteger: java.math.BigInteger) -> None: ...

class WhiteboxElementType:
    def __init__(self): ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getParameters(self) -> Parameters: ...
    def getRegisterRef(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def getWhiteboxType(self) -> java.lang.String: ...
    def isDriveable(self) -> bool: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDriveable(self, boolean: bool) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setRegisterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    def setWhiteboxType(self, string: typing.Union[java.lang.String, str]) -> None: ...

class WireTypeDef:
    def __init__(self): ...
    def getTypeDefinition(self) -> java.util.List[java.lang.String]: ...
    def getTypeName(self) -> 'WireTypeDef.TypeName': ...
    def getViewNameRef(self) -> java.util.List[java.lang.String]: ...
    def setTypeName(self, typeName: 'WireTypeDef.TypeName') -> None: ...
    class TypeName:
        def __init__(self): ...
        def getValue(self) -> java.lang.String: ...
        def isConstrained(self) -> bool: ...
        def setConstrained(self, boolean: bool) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class WireTypeDefs:
    def __init__(self): ...
    def getWireTypeDef(self) -> java.util.List[WireTypeDef]: ...

class WriteValueConstraintType:
    def __init__(self): ...
    def getMaximum(self) -> 'WriteValueConstraintType.Maximum': ...
    def getMinimum(self) -> 'WriteValueConstraintType.Minimum': ...
    def isUseEnumeratedValues(self) -> bool: ...
    def isWriteAsRead(self) -> bool: ...
    def setMaximum(self, maximum: 'WriteValueConstraintType.Maximum') -> None: ...
    def setMinimum(self, minimum: 'WriteValueConstraintType.Minimum') -> None: ...
    def setUseEnumeratedValues(self, boolean: bool) -> None: ...
    def setWriteAsRead(self, boolean: bool) -> None: ...
    class Maximum:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Minimum:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> java.lang.String: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class AbstractorPortWireType(PortWireType):
    def __init__(self): ...

class BusInterfaceType:
    def __init__(self): ...
    def getAbstractionType(self) -> LibraryRefType: ...
    def getBitSteering(self) -> 'BusInterfaceType.BitSteering': ...
    def getBitsInLau(self) -> java.math.BigInteger: ...
    def getBusType(self) -> LibraryRefType: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getEndianness(self) -> EndianessType: ...
    def getMaster(self) -> 'BusInterfaceType.Master': ...
    def getMirroredMaster(self) -> 'BusInterfaceType.MirroredMaster': ...
    def getMirroredSlave(self) -> 'BusInterfaceType.MirroredSlave': ...
    def getMirroredSystem(self) -> 'BusInterfaceType.MirroredSystem': ...
    def getMonitor(self) -> 'BusInterfaceType.Monitor': ...
    def getName(self) -> java.lang.String: ...
    def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
    def getParameters(self) -> Parameters: ...
    def getPortMaps(self) -> 'BusInterfaceType.PortMaps': ...
    def getSlave(self) -> 'BusInterfaceType.Slave': ...
    def getSystem(self) -> 'BusInterfaceType.System': ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def isConnectionRequired(self) -> bool: ...
    def setAbstractionType(self, libraryRefType: LibraryRefType) -> None: ...
    def setBitSteering(self, bitSteering: 'BusInterfaceType.BitSteering') -> None: ...
    def setBitsInLau(self, bigInteger: java.math.BigInteger) -> None: ...
    def setBusType(self, libraryRefType: LibraryRefType) -> None: ...
    def setConnectionRequired(self, boolean: bool) -> None: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setEndianness(self, endianessType: EndianessType) -> None: ...
    def setMaster(self, master: 'BusInterfaceType.Master') -> None: ...
    def setMirroredMaster(self, mirroredMaster: 'BusInterfaceType.MirroredMaster') -> None: ...
    def setMirroredSlave(self, mirroredSlave: 'BusInterfaceType.MirroredSlave') -> None: ...
    def setMirroredSystem(self, mirroredSystem: 'BusInterfaceType.MirroredSystem') -> None: ...
    def setMonitor(self, monitor: 'BusInterfaceType.Monitor') -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setParameters(self, parameters: Parameters) -> None: ...
    def setPortMaps(self, portMaps: 'BusInterfaceType.PortMaps') -> None: ...
    def setSlave(self, slave: 'BusInterfaceType.Slave') -> None: ...
    def setSystem(self, system: 'BusInterfaceType.System') -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class BitSteering:
        def __init__(self): ...
        def getBitStringLength(self) -> java.math.BigInteger: ...
        def getChoiceRef(self) -> java.lang.String: ...
        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
        def getDependency(self) -> java.lang.String: ...
        def getFormat(self) -> FormatType: ...
        def getId(self) -> java.lang.String: ...
        def getMaximum(self) -> java.lang.String: ...
        def getMinimum(self) -> java.lang.String: ...
        def getOrder(self) -> float: ...
        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
        def getPrompt(self) -> java.lang.String: ...
        def getRangeType(self) -> RangeTypeType: ...
        def getResolve(self) -> ResolveType: ...
        def getValue(self) -> BitSteeringType: ...
        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFormat(self, formatType: FormatType) -> None: ...
        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setOrder(self, float: float) -> None: ...
        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
        def setResolve(self, resolveType: ResolveType) -> None: ...
        def setValue(self, bitSteeringType: BitSteeringType) -> None: ...
    class Master:
        def __init__(self): ...
        def getAddressSpaceRef(self) -> 'BusInterfaceType.Master.AddressSpaceRef': ...
        def setAddressSpaceRef(self, addressSpaceRef: 'BusInterfaceType.Master.AddressSpaceRef') -> None: ...
        class AddressSpaceRef(AddrSpaceRefType):
            def __init__(self): ...
            def getBaseAddress(self) -> 'BusInterfaceType.Master.AddressSpaceRef.BaseAddress': ...
            def setBaseAddress(self, baseAddress: 'BusInterfaceType.Master.AddressSpaceRef.BaseAddress') -> None: ...
            class BaseAddress:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> FormatType: ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> RangeTypeType: ...
                def getResolve(self) -> ResolveType: ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: FormatType) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                def setResolve(self, resolveType: ResolveType) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class MirroredMaster:
        def __init__(self): ...
    class MirroredSlave:
        def __init__(self): ...
        def getBaseAddresses(self) -> 'BusInterfaceType.MirroredSlave.BaseAddresses': ...
        def setBaseAddresses(self, baseAddresses: 'BusInterfaceType.MirroredSlave.BaseAddresses') -> None: ...
        class BaseAddresses:
            def __init__(self): ...
            def getRange(self) -> 'BusInterfaceType.MirroredSlave.BaseAddresses.Range': ...
            def getRemapAddress(self) -> java.util.List['BusInterfaceType.MirroredSlave.BaseAddresses.RemapAddress']: ...
            def setRange(self, range: 'BusInterfaceType.MirroredSlave.BaseAddresses.Range') -> None: ...
            class Range:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> FormatType: ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> RangeTypeType: ...
                def getResolve(self) -> ResolveType: ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: FormatType) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                def setResolve(self, resolveType: ResolveType) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class RemapAddress:
                def __init__(self): ...
                def getBitStringLength(self) -> java.math.BigInteger: ...
                def getChoiceRef(self) -> java.lang.String: ...
                def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                def getDependency(self) -> java.lang.String: ...
                def getFormat(self) -> FormatType: ...
                def getId(self) -> java.lang.String: ...
                def getMaximum(self) -> java.lang.String: ...
                def getMinimum(self) -> java.lang.String: ...
                def getOrder(self) -> float: ...
                def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                def getPrompt(self) -> java.lang.String: ...
                def getRangeType(self) -> RangeTypeType: ...
                def getResolve(self) -> ResolveType: ...
                def getState(self) -> java.lang.String: ...
                def getValue(self) -> java.lang.String: ...
                def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setFormat(self, formatType: FormatType) -> None: ...
                def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setOrder(self, float: float) -> None: ...
                def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                def setResolve(self, resolveType: ResolveType) -> None: ...
                def setState(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class MirroredSystem:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class Monitor:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def getInterfaceMode(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setInterfaceMode(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class PortMaps:
        def __init__(self): ...
        def getPortMap(self) -> java.util.List['BusInterfaceType.PortMaps.PortMap']: ...
        class PortMap:
            def __init__(self): ...
            def getLogicalPort(self) -> 'BusInterfaceType.PortMaps.PortMap.LogicalPort': ...
            def getPhysicalPort(self) -> 'BusInterfaceType.PortMaps.PortMap.PhysicalPort': ...
            def setLogicalPort(self, logicalPort: 'BusInterfaceType.PortMaps.PortMap.LogicalPort') -> None: ...
            def setPhysicalPort(self, physicalPort: 'BusInterfaceType.PortMaps.PortMap.PhysicalPort') -> None: ...
            class LogicalPort:
                def __init__(self): ...
                def getName(self) -> java.lang.String: ...
                def getVector(self) -> 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector': ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVector(self, vector: 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector') -> None: ...
                class Vector:
                    def __init__(self): ...
                    def getLeft(self) -> 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left': ...
                    def getRight(self) -> 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right': ...
                    def setLeft(self, left: 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left') -> None: ...
                    def setRight(self, right: 'BusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right') -> None: ...
                    class Left:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> FormatType: ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> RangeTypeType: ...
                        def getResolve(self) -> ResolveType: ...
                        def getValue(self) -> java.math.BigInteger: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: FormatType) -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                        def setResolve(self, resolveType: ResolveType) -> None: ...
                        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
                    class Right:
                        def __init__(self): ...
                        def getBitStringLength(self) -> java.math.BigInteger: ...
                        def getChoiceRef(self) -> java.lang.String: ...
                        def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
                        def getDependency(self) -> java.lang.String: ...
                        def getFormat(self) -> FormatType: ...
                        def getId(self) -> java.lang.String: ...
                        def getMaximum(self) -> java.lang.String: ...
                        def getMinimum(self) -> java.lang.String: ...
                        def getOrder(self) -> float: ...
                        def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
                        def getPrompt(self) -> java.lang.String: ...
                        def getRangeType(self) -> RangeTypeType: ...
                        def getResolve(self) -> ResolveType: ...
                        def getValue(self) -> java.math.BigInteger: ...
                        def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
                        def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setFormat(self, formatType: FormatType) -> None: ...
                        def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setOrder(self, float: float) -> None: ...
                        def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
                        def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
                        def setResolve(self, resolveType: ResolveType) -> None: ...
                        def setValue(self, bigInteger: java.math.BigInteger) -> None: ...
            class PhysicalPort:
                def __init__(self): ...
                def getName(self) -> java.lang.String: ...
                def getVector(self) -> Vector: ...
                def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
                def setVector(self, vector: Vector) -> None: ...
    class Slave:
        def __init__(self): ...
        def getBridge(self) -> java.util.List['BusInterfaceType.Slave.Bridge']: ...
        def getFileSetRefGroup(self) -> java.util.List['BusInterfaceType.Slave.FileSetRefGroup']: ...
        def getMemoryMapRef(self) -> MemoryMapRefType: ...
        def setMemoryMapRef(self, memoryMapRefType: MemoryMapRefType) -> None: ...
        class Bridge:
            def __init__(self): ...
            def getMasterRef(self) -> java.lang.String: ...
            def isOpaque(self) -> bool: ...
            def setMasterRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOpaque(self, boolean: bool) -> None: ...
        class FileSetRefGroup:
            def __init__(self): ...
            def getFileSetRef(self) -> java.util.List[FileSetRef]: ...
            def getGroup(self) -> java.lang.String: ...
            def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class System:
        def __init__(self): ...
        def getGroup(self) -> java.lang.String: ...
        def setGroup(self, string: typing.Union[java.lang.String, str]) -> None: ...

class ClockDriver(ClockDriverType):
    def __init__(self): ...
    def getClockName(self) -> java.lang.String: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FileSetType:
    def __init__(self): ...
    def getDefaultFileBuilder(self) -> java.util.List[FileBuilderType]: ...
    def getDependency(self) -> java.util.List[java.lang.String]: ...
    def getDescription(self) -> java.lang.String: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getFile(self) -> java.util.List[File]: ...
    def getFunction(self) -> java.util.List['FileSetType.Function']: ...
    def getGroup(self) -> java.util.List[java.lang.String]: ...
    def getName(self) -> java.lang.String: ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setDescription(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDisplayName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...
    class Function:
        def __init__(self): ...
        def getArgument(self) -> java.util.List['FileSetType.Function.Argument']: ...
        def getDisabled(self) -> 'FileSetType.Function.Disabled': ...
        def getEntryPoint(self) -> java.lang.String: ...
        def getFileRef(self) -> typing.Any: ...
        def getReturnType(self) -> java.lang.String: ...
        def getSourceFile(self) -> java.util.List['FileSetType.Function.SourceFile']: ...
        def isReplicate(self) -> bool: ...
        def setDisabled(self, disabled: 'FileSetType.Function.Disabled') -> None: ...
        def setEntryPoint(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setFileRef(self, object: typing.Any) -> None: ...
        def setReplicate(self, boolean: bool) -> None: ...
        def setReturnType(self, string: typing.Union[java.lang.String, str]) -> None: ...
        class Argument(NameValuePairType):
            def __init__(self): ...
            def getDataType(self) -> DataTypeType: ...
            def setDataType(self, dataTypeType: DataTypeType) -> None: ...
        class Disabled:
            def __init__(self): ...
            def getBitStringLength(self) -> java.math.BigInteger: ...
            def getChoiceRef(self) -> java.lang.String: ...
            def getConfigGroups(self) -> java.util.List[java.lang.String]: ...
            def getDependency(self) -> java.lang.String: ...
            def getFormat(self) -> FormatType: ...
            def getId(self) -> java.lang.String: ...
            def getMaximum(self) -> java.lang.String: ...
            def getMinimum(self) -> java.lang.String: ...
            def getOrder(self) -> float: ...
            def getOtherAttributes(self) -> java.util.Map[javax.xml.namespace.QName, java.lang.String]: ...
            def getPrompt(self) -> java.lang.String: ...
            def getRangeType(self) -> RangeTypeType: ...
            def getResolve(self) -> ResolveType: ...
            def isValue(self) -> bool: ...
            def setBitStringLength(self, bigInteger: java.math.BigInteger) -> None: ...
            def setChoiceRef(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setDependency(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setFormat(self, formatType: FormatType) -> None: ...
            def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMaximum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setMinimum(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setOrder(self, float: float) -> None: ...
            def setPrompt(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setRangeType(self, rangeTypeType: RangeTypeType) -> None: ...
            def setResolve(self, resolveType: ResolveType) -> None: ...
            def setValue(self, boolean: bool) -> None: ...
        class SourceFile:
            def __init__(self): ...
            def getFileType(self) -> java.lang.String: ...
            def getSourceName(self) -> 'FileSetType.Function.SourceFile.SourceName': ...
            def getUserFileType(self) -> java.lang.String: ...
            def setFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
            def setSourceName(self, sourceName: 'FileSetType.Function.SourceFile.SourceName') -> None: ...
            def setUserFileType(self, string: typing.Union[java.lang.String, str]) -> None: ...
            class SourceName:
                def __init__(self): ...
                def getValue(self) -> java.lang.String: ...
                def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Generator(GeneratorType):
    def __init__(self): ...

class HierInterface(Interface):
    def __init__(self): ...
    def getPath(self) -> java.lang.String: ...
    def setPath(self, string: typing.Union[java.lang.String, str]) -> None: ...

class InstanceGeneratorType(GeneratorType):
    def __init__(self): ...
    def getGroup(self) -> java.util.List[java.lang.String]: ...
    def getScope(self) -> java.lang.String: ...
    def setScope(self, string: typing.Union[java.lang.String, str]) -> None: ...

class NameValueTypeType(NameValuePairType):
    def __init__(self): ...
    def getDataType(self) -> java.lang.String: ...
    def getUsageType(self) -> java.lang.String: ...
    def setDataType(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUsageType(self, string: typing.Union[java.lang.String, str]) -> None: ...

class OtherClockDriver(ClockDriverType):
    def __init__(self): ...
    def getClockName(self) -> java.lang.String: ...
    def getClockSource(self) -> java.lang.String: ...
    def setClockName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setClockSource(self, string: typing.Union[java.lang.String, str]) -> None: ...

class PortType(PortDeclarationType):
    def __init__(self): ...
    def getVendorExtensions(self) -> VendorExtensions: ...
    def setVendorExtensions(self, vendorExtensions: VendorExtensions) -> None: ...

class AbstractorPortType(PortType):
    def __init__(self): ...

class ComponentGenerator(InstanceGeneratorType):
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.example.schema.s1685_2009")``.

    AbstractionDefPortConstraintsType: typing.Type[AbstractionDefPortConstraintsType]
    AbstractionDefinition: typing.Type[AbstractionDefinition]
    AbstractorBusInterfaceType: typing.Type[AbstractorBusInterfaceType]
    AbstractorGenerators: typing.Type[AbstractorGenerators]
    AbstractorModeType: typing.Type[AbstractorModeType]
    AbstractorModelType: typing.Type[AbstractorModelType]
    AbstractorPortType: typing.Type[AbstractorPortType]
    AbstractorPortWireType: typing.Type[AbstractorPortWireType]
    AbstractorType: typing.Type[AbstractorType]
    AbstractorViewType: typing.Type[AbstractorViewType]
    AccessType: typing.Type[AccessType]
    AdHocConnection: typing.Type[AdHocConnection]
    AdHocConnections: typing.Type[AdHocConnections]
    AddrSpaceRefType: typing.Type[AddrSpaceRefType]
    AddressBankType: typing.Type[AddressBankType]
    AddressBlockType: typing.Type[AddressBlockType]
    AddressSpaces: typing.Type[AddressSpaces]
    BankAlignmentType: typing.Type[BankAlignmentType]
    BankedBankType: typing.Type[BankedBankType]
    BankedBlockType: typing.Type[BankedBlockType]
    BankedSubspaceType: typing.Type[BankedSubspaceType]
    BaseAddress: typing.Type[BaseAddress]
    BitSteeringType: typing.Type[BitSteeringType]
    BusDefinition: typing.Type[BusDefinition]
    BusInterfaceType: typing.Type[BusInterfaceType]
    BusInterfaces: typing.Type[BusInterfaces]
    CellClassValueType: typing.Type[CellClassValueType]
    CellFunctionValueType: typing.Type[CellFunctionValueType]
    CellSpecification: typing.Type[CellSpecification]
    CellStrengthValueType: typing.Type[CellStrengthValueType]
    Channels: typing.Type[Channels]
    Choices: typing.Type[Choices]
    ClockDriver: typing.Type[ClockDriver]
    ClockDriverType: typing.Type[ClockDriverType]
    ComponentGenerator: typing.Type[ComponentGenerator]
    ComponentGenerators: typing.Type[ComponentGenerators]
    ComponentInstance: typing.Type[ComponentInstance]
    ComponentInstances: typing.Type[ComponentInstances]
    ComponentPortDirectionType: typing.Type[ComponentPortDirectionType]
    ComponentType: typing.Type[ComponentType]
    ConfigurableElementValue: typing.Type[ConfigurableElementValue]
    ConfigurableElementValues: typing.Type[ConfigurableElementValues]
    ConstraintSet: typing.Type[ConstraintSet]
    ConstraintSets: typing.Type[ConstraintSets]
    DataTypeType: typing.Type[DataTypeType]
    DefaultValue: typing.Type[DefaultValue]
    DelayValueType: typing.Type[DelayValueType]
    DelayValueUnitType: typing.Type[DelayValueUnitType]
    Design: typing.Type[Design]
    DesignConfiguration: typing.Type[DesignConfiguration]
    DriveConstraint: typing.Type[DriveConstraint]
    DriverType: typing.Type[DriverType]
    EdgeValueType: typing.Type[EdgeValueType]
    EndianessType: typing.Type[EndianessType]
    EnumeratedValues: typing.Type[EnumeratedValues]
    ExecutableImage: typing.Type[ExecutableImage]
    FieldType: typing.Type[FieldType]
    File: typing.Type[File]
    FileBuilderType: typing.Type[FileBuilderType]
    FileSetRef: typing.Type[FileSetRef]
    FileSetType: typing.Type[FileSetType]
    FileSets: typing.Type[FileSets]
    FormatType: typing.Type[FormatType]
    Generator: typing.Type[Generator]
    GeneratorChain: typing.Type[GeneratorChain]
    GeneratorSelectorType: typing.Type[GeneratorSelectorType]
    GeneratorType: typing.Type[GeneratorType]
    GroupSelector: typing.Type[GroupSelector]
    HierInterface: typing.Type[HierInterface]
    InstanceGeneratorType: typing.Type[InstanceGeneratorType]
    Interconnection: typing.Type[Interconnection]
    Interconnections: typing.Type[Interconnections]
    Interface: typing.Type[Interface]
    LibraryRefType: typing.Type[LibraryRefType]
    LoadConstraint: typing.Type[LoadConstraint]
    LocalMemoryMapType: typing.Type[LocalMemoryMapType]
    MemoryMapRefType: typing.Type[MemoryMapRefType]
    MemoryMapType: typing.Type[MemoryMapType]
    MemoryMaps: typing.Type[MemoryMaps]
    MemoryRemapType: typing.Type[MemoryRemapType]
    ModelType: typing.Type[ModelType]
    MonitorInterconnection: typing.Type[MonitorInterconnection]
    NameValuePairType: typing.Type[NameValuePairType]
    NameValueTypeType: typing.Type[NameValueTypeType]
    OtherClockDriver: typing.Type[OtherClockDriver]
    OtherClocks: typing.Type[OtherClocks]
    Parameters: typing.Type[Parameters]
    Phase: typing.Type[Phase]
    PortAccessType: typing.Type[PortAccessType]
    PortDeclarationType: typing.Type[PortDeclarationType]
    PortTransactionalType: typing.Type[PortTransactionalType]
    PortType: typing.Type[PortType]
    PortWireType: typing.Type[PortWireType]
    RangeTypeType: typing.Type[RangeTypeType]
    RegisterFile: typing.Type[RegisterFile]
    RemapStates: typing.Type[RemapStates]
    RequiresDriver: typing.Type[RequiresDriver]
    ResolveType: typing.Type[ResolveType]
    ResolvedLibraryRefType: typing.Type[ResolvedLibraryRefType]
    ServiceType: typing.Type[ServiceType]
    ServiceTypeDef: typing.Type[ServiceTypeDef]
    ServiceTypeDefs: typing.Type[ServiceTypeDefs]
    SingleShotDriver: typing.Type[SingleShotDriver]
    SubspaceRefType: typing.Type[SubspaceRefType]
    TimingConstraint: typing.Type[TimingConstraint]
    TransTypeDef: typing.Type[TransTypeDef]
    UsageType: typing.Type[UsageType]
    ValueMaskConfigType: typing.Type[ValueMaskConfigType]
    Vector: typing.Type[Vector]
    VendorExtensions: typing.Type[VendorExtensions]
    ViewType: typing.Type[ViewType]
    WhiteboxElementRefType: typing.Type[WhiteboxElementRefType]
    WhiteboxElementType: typing.Type[WhiteboxElementType]
    WireTypeDef: typing.Type[WireTypeDef]
    WireTypeDefs: typing.Type[WireTypeDefs]
    WriteValueConstraintType: typing.Type[WriteValueConstraintType]
