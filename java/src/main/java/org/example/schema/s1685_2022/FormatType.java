//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2022;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * This is an indication on the format of the value. bit: 1-bit or more (vector) bits unsigned integer, byte: 8-bit signed integer, shortint: 16-bit signed integer, int: 32-bit signed integer, longint: 64-bit signed integer, shortreal: 32-bit signed floating point number, real: 64-bit signed floating point number, string: textual information.
 * 
 * <p>Java class for formatType</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * <pre>{@code
 * <simpleType name="formatType">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     <enumeration value="bit"/>
 *     <enumeration value="byte"/>
 *     <enumeration value="shortint"/>
 *     <enumeration value="int"/>
 *     <enumeration value="longint"/>
 *     <enumeration value="shortreal"/>
 *     <enumeration value="real"/>
 *     <enumeration value="string"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "formatType")
@XmlEnum
public enum FormatType {

    @XmlEnumValue("bit")
    BIT("bit"),
    @XmlEnumValue("byte")
    BYTE("byte"),
    @XmlEnumValue("shortint")
    SHORTINT("shortint"),
    @XmlEnumValue("int")
    INT("int"),
    @XmlEnumValue("longint")
    LONGINT("longint"),
    @XmlEnumValue("shortreal")
    SHORTREAL("shortreal"),
    @XmlEnumValue("real")
    REAL("real"),
    @XmlEnumValue("string")
    STRING("string");
    private final String value;

    FormatType(String v) {
        value = v;
    }

    /**
     * Gets the value associated to the enum constant.
     * 
     * @return
     *     The value linked to the enum.
     */
    public String value() {
        return value;
    }

    /**
     * Gets the enum associated to the value passed as parameter.
     * 
     * @param v
     *     The value to get the enum from.
     * @return
     *     The enum which corresponds to the value, if it exists.
     * @throws IllegalArgumentException
     *     If no value matches in the enum declaration.
     */
    public static FormatType fromValue(String v) {
        for (FormatType c: FormatType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
