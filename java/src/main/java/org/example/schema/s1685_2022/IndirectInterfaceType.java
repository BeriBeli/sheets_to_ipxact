//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2022;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * Type definition for a indirectInterface in a component
 * 
 * <p>Java class for indirectInterfaceType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="indirectInterfaceType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}nameGroup"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}indirectAddressRef"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}indirectDataRef"/>
 *         <choice>
 *           <element name="memoryMapRef" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *           <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}transparentBridge" maxOccurs="unbounded"/>
 *         </choice>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}bitsInLau" minOccurs="0"/>
 *         <element name="endianness" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}endianessType" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}parameters" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *       <anyAttribute processContents='lax'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "indirectInterfaceType", propOrder = {
    "name",
    "displayName",
    "shortDescription",
    "description",
    "indirectAddressRef",
    "indirectDataRef",
    "memoryMapRef",
    "transparentBridge",
    "bitsInLau",
    "endianness",
    "parameters",
    "vendorExtensions"
})
public class IndirectInterfaceType {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     */
    protected String displayName;
    /**
     * Brief description suitable for titles, software comments and pop-up windows. Being a SystemVerilog expression the text can be constructed using parameters, e.g, by concatentation or $sformatf().
     * 
     */
    protected String shortDescription;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * A reference to a field used for addressing the indirectly accessible memoryMap.
     * 
     */
    @XmlElement(required = true)
    protected IndirectAddressRef indirectAddressRef;
    /**
     * A reference to a field used for read/write access to the indirectly accessible memoryMap.
     * 
     */
    @XmlElement(required = true)
    protected IndirectDataRef indirectDataRef;
    /**
     * A reference to a memoryMap. This memoryMap is indirectly accessible through this interface.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String memoryMapRef;
    /**
     * If this element is present, it indicates that the bus interface provides a transparent bridge to another initiator bus interface on the same component.  It has a initiatorRef attribute which contains the name of the other bus interface.
     * 
     * Any target interface can bridge to multiple initiator interfaces, and multiple target interfaces can bridge to the same initiator interface.
     * 
     */
    protected List<TransparentBridge> transparentBridge;
    /**
     * The number of bits in the least addressable unit. The default is byte addressable (8 bits).
     * 
     */
    protected UnsignedPositiveLongintExpression bitsInLau;
    /**
     * 'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian.
     * 
     */
    @XmlSchemaType(name = "string")
    protected EndianessType endianness;
    /**
     * A collection of parameters and associated value assertions.
     * 
     */
    protected Parameters parameters;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Brief description suitable for titles, software comments and pop-up windows. Being a SystemVerilog expression the text can be constructed using parameters, e.g, by concatentation or $sformatf().
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShortDescription() {
        return shortDescription;
    }

    /**
     * Sets the value of the shortDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getShortDescription()
     */
    public void setShortDescription(String value) {
        this.shortDescription = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * A reference to a field used for addressing the indirectly accessible memoryMap.
     * 
     * @return
     *     possible object is
     *     {@link IndirectAddressRef }
     *     
     */
    public IndirectAddressRef getIndirectAddressRef() {
        return indirectAddressRef;
    }

    /**
     * Sets the value of the indirectAddressRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndirectAddressRef }
     *     
     * @see #getIndirectAddressRef()
     */
    public void setIndirectAddressRef(IndirectAddressRef value) {
        this.indirectAddressRef = value;
    }

    /**
     * A reference to a field used for read/write access to the indirectly accessible memoryMap.
     * 
     * @return
     *     possible object is
     *     {@link IndirectDataRef }
     *     
     */
    public IndirectDataRef getIndirectDataRef() {
        return indirectDataRef;
    }

    /**
     * Sets the value of the indirectDataRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndirectDataRef }
     *     
     * @see #getIndirectDataRef()
     */
    public void setIndirectDataRef(IndirectDataRef value) {
        this.indirectDataRef = value;
    }

    /**
     * A reference to a memoryMap. This memoryMap is indirectly accessible through this interface.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMemoryMapRef() {
        return memoryMapRef;
    }

    /**
     * Sets the value of the memoryMapRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getMemoryMapRef()
     */
    public void setMemoryMapRef(String value) {
        this.memoryMapRef = value;
    }

    /**
     * If this element is present, it indicates that the bus interface provides a transparent bridge to another initiator bus interface on the same component.  It has a initiatorRef attribute which contains the name of the other bus interface.
     * 
     * Any target interface can bridge to multiple initiator interfaces, and multiple target interfaces can bridge to the same initiator interface.
     * 
     * Gets the value of the transparentBridge property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transparentBridge property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getTransparentBridge().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TransparentBridge }
     * </p>
     * 
     * 
     * @return
     *     The value of the transparentBridge property.
     */
    public List<TransparentBridge> getTransparentBridge() {
        if (transparentBridge == null) {
            transparentBridge = new ArrayList<>();
        }
        return this.transparentBridge;
    }

    /**
     * The number of bits in the least addressable unit. The default is byte addressable (8 bits).
     * 
     * @return
     *     possible object is
     *     {@link UnsignedPositiveLongintExpression }
     *     
     */
    public UnsignedPositiveLongintExpression getBitsInLau() {
        return bitsInLau;
    }

    /**
     * Sets the value of the bitsInLau property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnsignedPositiveLongintExpression }
     *     
     * @see #getBitsInLau()
     */
    public void setBitsInLau(UnsignedPositiveLongintExpression value) {
        this.bitsInLau = value;
    }

    /**
     * 'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian.
     * 
     * @return
     *     possible object is
     *     {@link EndianessType }
     *     
     */
    public EndianessType getEndianness() {
        return endianness;
    }

    /**
     * Sets the value of the endianness property.
     * 
     * @param value
     *     allowed object is
     *     {@link EndianessType }
     *     
     * @see #getEndianness()
     */
    public void setEndianness(EndianessType value) {
        this.endianness = value;
    }

    /**
     * A collection of parameters and associated value assertions.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
