//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * A field within a register
 * 
 * <p>Java class for fieldType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="fieldType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
 *         <element name="bitOffset" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger"/>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fieldDefinitionGroup"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "fieldType", propOrder = {
    "name",
    "displayName",
    "description",
    "bitOffset",
    "typeIdentifier",
    "bitWidth",
    "_volatile",
    "access",
    "enumeratedValues",
    "modifiedWriteValue",
    "writeValueConstraint",
    "readAction",
    "testable",
    "parameters",
    "vendorExtensions"
})
public class FieldType {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Offset of this field's bit 0 from bit 0 of the register.
     * 
     */
    @XmlElement(required = true)
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger bitOffset;
    /**
     * Identifier name used to indicate that multiple field elements contain the exact same information for the elements in the fieldDefinitionGroup.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String typeIdentifier;
    /**
     * Width of the field in bits.
     * 
     */
    @XmlElement(required = true)
    protected FieldType.BitWidth bitWidth;
    /**
     * Indicates whether the data is volatile. The presumed value is 'false' if not present.
     * 
     */
    @XmlElement(name = "volatile", defaultValue = "false")
    protected Boolean _volatile;
    /**
     * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
     * 
     */
    protected AccessType access;
    /**
     * Enumerates specific values that can be assigned to the bit field.
     * 
     */
    protected EnumeratedValues enumeratedValues;
    /**
     * If present this element describes the modification of field data caused by a write operation. 'oneToClear' means that in a bitwise fashion each write data bit of a one will clear the corresponding bit in the field. 'oneToSet' means that in a bitwise fashion each write data bit of a one will set the corresponding bit in the field.  'oneToToggle' means that in a bitwise fashion each write data bit of a one will toggle the corresponding bit in the field. 'zeroToClear' means that in a bitwise fashion each write data bit of a zero will clear the corresponding bit in the field. 'zeroToSet' means that in a bitwise fashion each write data bit of a zero will set the corresponding bit in the field. 'zeroToToggle' means that in a bitwise fashion each write data bit of a zero will toggle the corresponding bit in the field. 'clear' means any write to this field clears the field. 'set' means any write to the field sets the field. 'modify' means any write to this field may modify that data. If this element is not present the write operation data is written.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String modifiedWriteValue;
    /**
     * The legal values that may be written to a field. If not specified the legal values are not specified.
     * 
     */
    protected WriteValueConstraintType writeValueConstraint;
    /**
     * A list of possible actions for a read to set the field after the read. 'clear' means that after a read the field is cleared. 'set' means that after a read the field is set. 'modify' means after a read the field is modified. If not present the field value is not modified after a read.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String readAction;
    /**
     * Can the field be tested with an automated register test routine. The presumed value is true if not specified.
     * 
     */
    protected FieldType.Testable testable;
    /**
     * A collection of parameters.
     * 
     */
    protected Parameters parameters;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Offset of this field's bit 0 from bit 0 of the register.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getBitOffset() {
        return bitOffset;
    }

    /**
     * Sets the value of the bitOffset property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     * @see #getBitOffset()
     */
    public void setBitOffset(BigInteger value) {
        this.bitOffset = value;
    }

    /**
     * Identifier name used to indicate that multiple field elements contain the exact same information for the elements in the fieldDefinitionGroup.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTypeIdentifier() {
        return typeIdentifier;
    }

    /**
     * Sets the value of the typeIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getTypeIdentifier()
     */
    public void setTypeIdentifier(String value) {
        this.typeIdentifier = value;
    }

    /**
     * Width of the field in bits.
     * 
     * @return
     *     possible object is
     *     {@link FieldType.BitWidth }
     *     
     */
    public FieldType.BitWidth getBitWidth() {
        return bitWidth;
    }

    /**
     * Sets the value of the bitWidth property.
     * 
     * @param value
     *     allowed object is
     *     {@link FieldType.BitWidth }
     *     
     * @see #getBitWidth()
     */
    public void setBitWidth(FieldType.BitWidth value) {
        this.bitWidth = value;
    }

    /**
     * Indicates whether the data is volatile. The presumed value is 'false' if not present.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isVolatile() {
        return _volatile;
    }

    /**
     * Sets the value of the volatile property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isVolatile()
     */
    public void setVolatile(Boolean value) {
        this._volatile = value;
    }

    /**
     * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
     * 
     * @return
     *     possible object is
     *     {@link AccessType }
     *     
     */
    public AccessType getAccess() {
        return access;
    }

    /**
     * Sets the value of the access property.
     * 
     * @param value
     *     allowed object is
     *     {@link AccessType }
     *     
     * @see #getAccess()
     */
    public void setAccess(AccessType value) {
        this.access = value;
    }

    /**
     * Enumerates specific values that can be assigned to the bit field.
     * 
     * @return
     *     possible object is
     *     {@link EnumeratedValues }
     *     
     */
    public EnumeratedValues getEnumeratedValues() {
        return enumeratedValues;
    }

    /**
     * Sets the value of the enumeratedValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link EnumeratedValues }
     *     
     * @see #getEnumeratedValues()
     */
    public void setEnumeratedValues(EnumeratedValues value) {
        this.enumeratedValues = value;
    }

    /**
     * If present this element describes the modification of field data caused by a write operation. 'oneToClear' means that in a bitwise fashion each write data bit of a one will clear the corresponding bit in the field. 'oneToSet' means that in a bitwise fashion each write data bit of a one will set the corresponding bit in the field.  'oneToToggle' means that in a bitwise fashion each write data bit of a one will toggle the corresponding bit in the field. 'zeroToClear' means that in a bitwise fashion each write data bit of a zero will clear the corresponding bit in the field. 'zeroToSet' means that in a bitwise fashion each write data bit of a zero will set the corresponding bit in the field. 'zeroToToggle' means that in a bitwise fashion each write data bit of a zero will toggle the corresponding bit in the field. 'clear' means any write to this field clears the field. 'set' means any write to the field sets the field. 'modify' means any write to this field may modify that data. If this element is not present the write operation data is written.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedWriteValue() {
        return modifiedWriteValue;
    }

    /**
     * Sets the value of the modifiedWriteValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getModifiedWriteValue()
     */
    public void setModifiedWriteValue(String value) {
        this.modifiedWriteValue = value;
    }

    /**
     * The legal values that may be written to a field. If not specified the legal values are not specified.
     * 
     * @return
     *     possible object is
     *     {@link WriteValueConstraintType }
     *     
     */
    public WriteValueConstraintType getWriteValueConstraint() {
        return writeValueConstraint;
    }

    /**
     * Sets the value of the writeValueConstraint property.
     * 
     * @param value
     *     allowed object is
     *     {@link WriteValueConstraintType }
     *     
     * @see #getWriteValueConstraint()
     */
    public void setWriteValueConstraint(WriteValueConstraintType value) {
        this.writeValueConstraint = value;
    }

    /**
     * A list of possible actions for a read to set the field after the read. 'clear' means that after a read the field is cleared. 'set' means that after a read the field is set. 'modify' means after a read the field is modified. If not present the field value is not modified after a read.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReadAction() {
        return readAction;
    }

    /**
     * Sets the value of the readAction property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getReadAction()
     */
    public void setReadAction(String value) {
        this.readAction = value;
    }

    /**
     * Can the field be tested with an automated register test routine. The presumed value is true if not specified.
     * 
     * @return
     *     possible object is
     *     {@link FieldType.Testable }
     *     
     */
    public FieldType.Testable getTestable() {
        return testable;
    }

    /**
     * Sets the value of the testable property.
     * 
     * @param value
     *     allowed object is
     *     {@link FieldType.Testable }
     *     
     * @see #getTestable()
     */
    public void setTestable(FieldType.Testable value) {
        this.testable = value;
    }

    /**
     * A collection of parameters.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>positiveInteger">
     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class BitWidth {

        @XmlValue
        @XmlSchemaType(name = "positiveInteger")
        protected BigInteger value;
        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         */
        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String prompt;
        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         */
        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected FormatType format;
        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         */
        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected RangeTypeType rangeType;
        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         */
        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String choiceRef;
        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         */
        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Float order;
        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         */
        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "NMTOKENS")
        protected List<String> configGroups;
        /**
         * Length of the bit string, required if the format is bitString
         * 
         */
        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger bitStringLength;
        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         */
        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String minimum;
        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         */
        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String maximum;
        /**
         * Determines how a property value is resolved.
         * 
         */
        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected ResolveType resolve;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         */
        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String dependency;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<>();

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setValue(BigInteger value) {
            this.value = value;
        }

        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPrompt() {
            return prompt;
        }

        /**
         * Sets the value of the prompt property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPrompt()
         */
        public void setPrompt(String value) {
            this.prompt = value;
        }

        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         * @return
         *     possible object is
         *     {@link FormatType }
         *     
         */
        public FormatType getFormat() {
            if (format == null) {
                return FormatType.LONG;
            } else {
                return format;
            }
        }

        /**
         * Sets the value of the format property.
         * 
         * @param value
         *     allowed object is
         *     {@link FormatType }
         *     
         * @see #getFormat()
         */
        public void setFormat(FormatType value) {
            this.format = value;
        }

        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         * @return
         *     possible object is
         *     {@link RangeTypeType }
         *     
         */
        public RangeTypeType getRangeType() {
            if (rangeType == null) {
                return RangeTypeType.FLOAT;
            } else {
                return rangeType;
            }
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link RangeTypeType }
         *     
         * @see #getRangeType()
         */
        public void setRangeType(RangeTypeType value) {
            this.rangeType = value;
        }

        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChoiceRef() {
            return choiceRef;
        }

        /**
         * Sets the value of the choiceRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getChoiceRef()
         */
        public void setChoiceRef(String value) {
            this.choiceRef = value;
        }

        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         * @return
         *     possible object is
         *     {@link Float }
         *     
         */
        public Float getOrder() {
            return order;
        }

        /**
         * Sets the value of the order property.
         * 
         * @param value
         *     allowed object is
         *     {@link Float }
         *     
         * @see #getOrder()
         */
        public void setOrder(Float value) {
            this.order = value;
        }

        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         * Gets the value of the configGroups property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getConfigGroups().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * </p>
         * 
         * 
         * @return
         *     The value of the configGroups property.
         */
        public List<String> getConfigGroups() {
            if (configGroups == null) {
                configGroups = new ArrayList<>();
            }
            return this.configGroups;
        }

        /**
         * Length of the bit string, required if the format is bitString
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getBitStringLength() {
            return bitStringLength;
        }

        /**
         * Sets the value of the bitStringLength property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getBitStringLength()
         */
        public void setBitStringLength(BigInteger value) {
            this.bitStringLength = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMinimum() {
            return minimum;
        }

        /**
         * Sets the value of the minimum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMinimum()
         */
        public void setMinimum(String value) {
            this.minimum = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMaximum() {
            return maximum;
        }

        /**
         * Sets the value of the maximum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMaximum()
         */
        public void setMaximum(String value) {
            this.maximum = value;
        }

        /**
         * Determines how a property value is resolved.
         * 
         * @return
         *     possible object is
         *     {@link ResolveType }
         *     
         */
        public ResolveType getResolve() {
            if (resolve == null) {
                return ResolveType.IMMEDIATE;
            } else {
                return resolve;
            }
        }

        /**
         * Sets the value of the resolve property.
         * 
         * @param value
         *     allowed object is
         *     {@link ResolveType }
         *     
         * @see #getResolve()
         */
        public void setResolve(ResolveType value) {
            this.resolve = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDependency() {
            return dependency;
        }

        /**
         * Sets the value of the dependency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDependency()
         */
        public void setDependency(String value) {
            this.dependency = value;
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *       <attribute name="testConstraint" default="unconstrained">
     *         <simpleType>
     *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *             <enumeration value="unconstrained"/>
     *             <enumeration value="restore"/>
     *             <enumeration value="writeAsRead"/>
     *             <enumeration value="readOnly"/>
     *           </restriction>
     *         </simpleType>
     *       </attribute>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Testable {

        @XmlValue
        protected boolean value;
        /**
         * Constraint for an automated register test routine. 'unconstrained' (default) means may read and write all legal values. 'restore' means may read and write legal values but the value must be restored to the initially read value before accessing another register. 'writeAsRead' has limitations on testability where only the value read before a write may be written to the field. 'readOnly' has limitations on testability where values may only be read from the field.
         * 
         */
        @XmlAttribute(name = "testConstraint", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String testConstraint;

        /**
         * Gets the value of the value property.
         * 
         */
        public boolean isValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(boolean value) {
            this.value = value;
        }

        /**
         * Constraint for an automated register test routine. 'unconstrained' (default) means may read and write all legal values. 'restore' means may read and write legal values but the value must be restored to the initially read value before accessing another register. 'writeAsRead' has limitations on testability where only the value read before a write may be written to the field. 'readOnly' has limitations on testability where values may only be read from the field.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTestConstraint() {
            if (testConstraint == null) {
                return "unconstrained";
            } else {
                return testConstraint;
            }
        }

        /**
         * Sets the value of the testConstraint property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getTestConstraint()
         */
        public void setTestConstraint(String value) {
            this.testConstraint = value;
        }

    }

}
