//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * Type definition for a busInterface in a component
 * 
 * <p>Java class for abstractorBusInterfaceType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="abstractorBusInterfaceType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
 *         <element name="abstractionType" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}libraryRefType"/>
 *         <element name="portMaps" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="portMap" maxOccurs="unbounded">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <element name="logicalPort">
 *                               <complexType>
 *                                 <complexContent>
 *                                   <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     <sequence>
 *                                       <element name="name" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *                                       <element name="vector" minOccurs="0">
 *                                         <complexType>
 *                                           <complexContent>
 *                                             <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                               <sequence>
 *                                                 <element name="left">
 *                                                   <complexType>
 *                                                     <simpleContent>
 *                                                       <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
 *                                                         <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
 *                                                       </extension>
 *                                                     </simpleContent>
 *                                                   </complexType>
 *                                                 </element>
 *                                                 <element name="right">
 *                                                   <complexType>
 *                                                     <simpleContent>
 *                                                       <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
 *                                                         <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
 *                                                       </extension>
 *                                                     </simpleContent>
 *                                                   </complexType>
 *                                                 </element>
 *                                               </sequence>
 *                                             </restriction>
 *                                           </complexContent>
 *                                         </complexType>
 *                                       </element>
 *                                     </sequence>
 *                                   </restriction>
 *                                 </complexContent>
 *                               </complexType>
 *                             </element>
 *                             <element name="physicalPort">
 *                               <complexType>
 *                                 <complexContent>
 *                                   <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     <sequence>
 *                                       <element name="name" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName"/>
 *                                       <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector" minOccurs="0"/>
 *                                     </sequence>
 *                                   </restriction>
 *                                 </complexContent>
 *                               </complexType>
 *                             </element>
 *                           </sequence>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <anyAttribute processContents='lax'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "abstractorBusInterfaceType", propOrder = {
    "name",
    "displayName",
    "description",
    "abstractionType",
    "portMaps",
    "parameters",
    "vendorExtensions"
})
public class AbstractorBusInterfaceType {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.
     * 
     */
    @XmlElement(required = true)
    protected LibraryRefType abstractionType;
    /**
     * Listing of maps between logical ports and physical ports.
     * 
     */
    protected AbstractorBusInterfaceType.PortMaps portMaps;
    /**
     * A collection of parameters.
     * 
     */
    protected Parameters parameters;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.
     * 
     * @return
     *     possible object is
     *     {@link LibraryRefType }
     *     
     */
    public LibraryRefType getAbstractionType() {
        return abstractionType;
    }

    /**
     * Sets the value of the abstractionType property.
     * 
     * @param value
     *     allowed object is
     *     {@link LibraryRefType }
     *     
     * @see #getAbstractionType()
     */
    public void setAbstractionType(LibraryRefType value) {
        this.abstractionType = value;
    }

    /**
     * Listing of maps between logical ports and physical ports.
     * 
     * @return
     *     possible object is
     *     {@link AbstractorBusInterfaceType.PortMaps }
     *     
     */
    public AbstractorBusInterfaceType.PortMaps getPortMaps() {
        return portMaps;
    }

    /**
     * Sets the value of the portMaps property.
     * 
     * @param value
     *     allowed object is
     *     {@link AbstractorBusInterfaceType.PortMaps }
     *     
     * @see #getPortMaps()
     */
    public void setPortMaps(AbstractorBusInterfaceType.PortMaps value) {
        this.portMaps = value;
    }

    /**
     * A collection of parameters.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="portMap" maxOccurs="unbounded">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element name="logicalPort">
     *                     <complexType>
     *                       <complexContent>
     *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           <sequence>
     *                             <element name="name" type="{http://www.w3.org/2001/XMLSchema}Name"/>
     *                             <element name="vector" minOccurs="0">
     *                               <complexType>
     *                                 <complexContent>
     *                                   <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                     <sequence>
     *                                       <element name="left">
     *                                         <complexType>
     *                                           <simpleContent>
     *                                             <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
     *                                               <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *                                             </extension>
     *                                           </simpleContent>
     *                                         </complexType>
     *                                       </element>
     *                                       <element name="right">
     *                                         <complexType>
     *                                           <simpleContent>
     *                                             <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
     *                                               <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *                                             </extension>
     *                                           </simpleContent>
     *                                         </complexType>
     *                                       </element>
     *                                     </sequence>
     *                                   </restriction>
     *                                 </complexContent>
     *                               </complexType>
     *                             </element>
     *                           </sequence>
     *                         </restriction>
     *                       </complexContent>
     *                     </complexType>
     *                   </element>
     *                   <element name="physicalPort">
     *                     <complexType>
     *                       <complexContent>
     *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           <sequence>
     *                             <element name="name" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName"/>
     *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector" minOccurs="0"/>
     *                           </sequence>
     *                         </restriction>
     *                       </complexContent>
     *                     </complexType>
     *                   </element>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "portMap"
    })
    public static class PortMaps {

        /**
         * Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.
         * 
         */
        @XmlElement(required = true)
        protected List<AbstractorBusInterfaceType.PortMaps.PortMap> portMap;

        /**
         * Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.
         * 
         * Gets the value of the portMap property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the portMap property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getPortMap().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AbstractorBusInterfaceType.PortMaps.PortMap }
         * </p>
         * 
         * 
         * @return
         *     The value of the portMap property.
         */
        public List<AbstractorBusInterfaceType.PortMaps.PortMap> getPortMap() {
            if (portMap == null) {
                portMap = new ArrayList<>();
            }
            return this.portMap;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="logicalPort">
         *           <complexType>
         *             <complexContent>
         *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 <sequence>
         *                   <element name="name" type="{http://www.w3.org/2001/XMLSchema}Name"/>
         *                   <element name="vector" minOccurs="0">
         *                     <complexType>
         *                       <complexContent>
         *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                           <sequence>
         *                             <element name="left">
         *                               <complexType>
         *                                 <simpleContent>
         *                                   <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
         *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
         *                                   </extension>
         *                                 </simpleContent>
         *                               </complexType>
         *                             </element>
         *                             <element name="right">
         *                               <complexType>
         *                                 <simpleContent>
         *                                   <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
         *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
         *                                   </extension>
         *                                 </simpleContent>
         *                               </complexType>
         *                             </element>
         *                           </sequence>
         *                         </restriction>
         *                       </complexContent>
         *                     </complexType>
         *                   </element>
         *                 </sequence>
         *               </restriction>
         *             </complexContent>
         *           </complexType>
         *         </element>
         *         <element name="physicalPort">
         *           <complexType>
         *             <complexContent>
         *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 <sequence>
         *                   <element name="name" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName"/>
         *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector" minOccurs="0"/>
         *                 </sequence>
         *               </restriction>
         *             </complexContent>
         *           </complexType>
         *         </element>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "logicalPort",
            "physicalPort"
        })
        public static class PortMap {

            /**
             * Logical port from abstraction definition
             * 
             */
            @XmlElement(required = true)
            protected AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort logicalPort;
            /**
             * Physical port from this component
             * 
             */
            @XmlElement(required = true)
            protected AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort physicalPort;

            /**
             * Logical port from abstraction definition
             * 
             * @return
             *     possible object is
             *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort }
             *     
             */
            public AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort getLogicalPort() {
                return logicalPort;
            }

            /**
             * Sets the value of the logicalPort property.
             * 
             * @param value
             *     allowed object is
             *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort }
             *     
             * @see #getLogicalPort()
             */
            public void setLogicalPort(AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort value) {
                this.logicalPort = value;
            }

            /**
             * Physical port from this component
             * 
             * @return
             *     possible object is
             *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort }
             *     
             */
            public AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort getPhysicalPort() {
                return physicalPort;
            }

            /**
             * Sets the value of the physicalPort property.
             * 
             * @param value
             *     allowed object is
             *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort }
             *     
             * @see #getPhysicalPort()
             */
            public void setPhysicalPort(AbstractorBusInterfaceType.PortMaps.PortMap.PhysicalPort value) {
                this.physicalPort = value;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <complexContent>
             *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       <sequence>
             *         <element name="name" type="{http://www.w3.org/2001/XMLSchema}Name"/>
             *         <element name="vector" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <sequence>
             *                   <element name="left">
             *                     <complexType>
             *                       <simpleContent>
             *                         <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
             *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
             *                         </extension>
             *                       </simpleContent>
             *                     </complexType>
             *                   </element>
             *                   <element name="right">
             *                     <complexType>
             *                       <simpleContent>
             *                         <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
             *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
             *                         </extension>
             *                       </simpleContent>
             *                     </complexType>
             *                   </element>
             *                 </sequence>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *       </sequence>
             *     </restriction>
             *   </complexContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "name",
                "vector"
            })
            public static class LogicalPort {

                /**
                 * Bus port name as specified inside the abstraction definition
                 * 
                 */
                @XmlElement(required = true)
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String name;
                /**
                 * Definition of the logical indecies for a vectored port.
                 * 
                 */
                protected AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector vector;

                /**
                 * Bus port name as specified inside the abstraction definition
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getName()
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Definition of the logical indecies for a vectored port.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector }
                 *     
                 */
                public AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector getVector() {
                    return vector;
                }

                /**
                 * Sets the value of the vector property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector }
                 *     
                 * @see #getVector()
                 */
                public void setVector(AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector value) {
                    this.vector = value;
                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="left">
                 *           <complexType>
                 *             <simpleContent>
                 *               <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
                 *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                 *               </extension>
                 *             </simpleContent>
                 *           </complexType>
                 *         </element>
                 *         <element name="right">
                 *           <complexType>
                 *             <simpleContent>
                 *               <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
                 *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                 *               </extension>
                 *             </simpleContent>
                 *           </complexType>
                 *         </element>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "left",
                    "right"
                })
                public static class Vector {

                    /**
                     * Defines which logical bit maps to the physical left bit below
                     * 
                     */
                    @XmlElement(required = true)
                    protected AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left left;
                    /**
                     * Defines which logical bit maps to the physical right bit below
                     * 
                     */
                    @XmlElement(required = true)
                    protected AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right right;

                    /**
                     * Defines which logical bit maps to the physical left bit below
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left }
                     *     
                     */
                    public AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left getLeft() {
                        return left;
                    }

                    /**
                     * Sets the value of the left property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left }
                     *     
                     * @see #getLeft()
                     */
                    public void setLeft(AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Left value) {
                        this.left = value;
                    }

                    /**
                     * Defines which logical bit maps to the physical right bit below
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right }
                     *     
                     */
                    public AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right getRight() {
                        return right;
                    }

                    /**
                     * Sets the value of the right property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right }
                     *     
                     * @see #getRight()
                     */
                    public void setRight(AbstractorBusInterfaceType.PortMaps.PortMap.LogicalPort.Vector.Right value) {
                        this.right = value;
                    }


                    /**
                     * <p>Java class for anonymous complex type</p>.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.</p>
                     * 
                     * <pre>{@code
                     * <complexType>
                     *   <simpleContent>
                     *     <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
                     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                     *     </extension>
                     *   </simpleContent>
                     * </complexType>
                     * }</pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "", propOrder = {
                        "value"
                    })
                    public static class Left {

                        @XmlValue
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger value;
                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         */
                        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String prompt;
                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         */
                        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected FormatType format;
                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         */
                        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected RangeTypeType rangeType;
                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         */
                        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlSchemaType(name = "Name")
                        protected String choiceRef;
                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         */
                        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected Float order;
                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         */
                        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "NMTOKENS")
                        protected List<String> configGroups;
                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         */
                        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger bitStringLength;
                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         */
                        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String minimum;
                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         */
                        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String maximum;
                        /**
                         * Determines how a property value is resolved.
                         * 
                         */
                        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected ResolveType resolve;
                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         */
                        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlID
                        @XmlSchemaType(name = "ID")
                        protected String id;
                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         */
                        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String dependency;
                        @XmlAnyAttribute
                        private Map<QName, String> otherAttributes = new HashMap<>();

                        /**
                         * Gets the value of the value property.
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getValue() {
                            return value;
                        }

                        /**
                         * Sets the value of the value property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         */
                        public void setValue(BigInteger value) {
                            this.value = value;
                        }

                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getPrompt() {
                            return prompt;
                        }

                        /**
                         * Sets the value of the prompt property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getPrompt()
                         */
                        public void setPrompt(String value) {
                            this.prompt = value;
                        }

                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         * @return
                         *     possible object is
                         *     {@link FormatType }
                         *     
                         */
                        public FormatType getFormat() {
                            if (format == null) {
                                return FormatType.LONG;
                            } else {
                                return format;
                            }
                        }

                        /**
                         * Sets the value of the format property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link FormatType }
                         *     
                         * @see #getFormat()
                         */
                        public void setFormat(FormatType value) {
                            this.format = value;
                        }

                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         * @return
                         *     possible object is
                         *     {@link RangeTypeType }
                         *     
                         */
                        public RangeTypeType getRangeType() {
                            if (rangeType == null) {
                                return RangeTypeType.FLOAT;
                            } else {
                                return rangeType;
                            }
                        }

                        /**
                         * Sets the value of the rangeType property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link RangeTypeType }
                         *     
                         * @see #getRangeType()
                         */
                        public void setRangeType(RangeTypeType value) {
                            this.rangeType = value;
                        }

                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getChoiceRef() {
                            return choiceRef;
                        }

                        /**
                         * Sets the value of the choiceRef property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getChoiceRef()
                         */
                        public void setChoiceRef(String value) {
                            this.choiceRef = value;
                        }

                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         * @return
                         *     possible object is
                         *     {@link Float }
                         *     
                         */
                        public Float getOrder() {
                            return order;
                        }

                        /**
                         * Sets the value of the order property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link Float }
                         *     
                         * @see #getOrder()
                         */
                        public void setOrder(Float value) {
                            this.order = value;
                        }

                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         * Gets the value of the configGroups property.
                         * 
                         * <p>This accessor method returns a reference to the live list,
                         * not a snapshot. Therefore any modification you make to the
                         * returned list will be present inside the JAXB object.
                         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                         * 
                         * <p>
                         * For example, to add a new item, do as follows:
                         * </p>
                         * <pre>
                         * getConfigGroups().add(newItem);
                         * </pre>
                         * 
                         * 
                         * <p>
                         * Objects of the following type(s) are allowed in the list
                         * {@link String }
                         * </p>
                         * 
                         * 
                         * @return
                         *     The value of the configGroups property.
                         */
                        public List<String> getConfigGroups() {
                            if (configGroups == null) {
                                configGroups = new ArrayList<>();
                            }
                            return this.configGroups;
                        }

                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getBitStringLength() {
                            return bitStringLength;
                        }

                        /**
                         * Sets the value of the bitStringLength property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         * @see #getBitStringLength()
                         */
                        public void setBitStringLength(BigInteger value) {
                            this.bitStringLength = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMinimum() {
                            return minimum;
                        }

                        /**
                         * Sets the value of the minimum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMinimum()
                         */
                        public void setMinimum(String value) {
                            this.minimum = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMaximum() {
                            return maximum;
                        }

                        /**
                         * Sets the value of the maximum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMaximum()
                         */
                        public void setMaximum(String value) {
                            this.maximum = value;
                        }

                        /**
                         * Determines how a property value is resolved.
                         * 
                         * @return
                         *     possible object is
                         *     {@link ResolveType }
                         *     
                         */
                        public ResolveType getResolve() {
                            if (resolve == null) {
                                return ResolveType.IMMEDIATE;
                            } else {
                                return resolve;
                            }
                        }

                        /**
                         * Sets the value of the resolve property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link ResolveType }
                         *     
                         * @see #getResolve()
                         */
                        public void setResolve(ResolveType value) {
                            this.resolve = value;
                        }

                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getId() {
                            return id;
                        }

                        /**
                         * Sets the value of the id property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getId()
                         */
                        public void setId(String value) {
                            this.id = value;
                        }

                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getDependency() {
                            return dependency;
                        }

                        /**
                         * Sets the value of the dependency property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getDependency()
                         */
                        public void setDependency(String value) {
                            this.dependency = value;
                        }

                        /**
                         * Gets a map that contains attributes that aren't bound to any typed property on this class.
                         * 
                         * <p>
                         * the map is keyed by the name of the attribute and 
                         * the value is the string value of the attribute.
                         * 
                         * the map returned by this method is live, and you can add new attribute
                         * by updating the map directly. Because of this design, there's no setter.
                         * 
                         * 
                         * @return
                         *     always non-null
                         */
                        public Map<QName, String> getOtherAttributes() {
                            return otherAttributes;
                        }

                    }


                    /**
                     * <p>Java class for anonymous complex type</p>.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.</p>
                     * 
                     * <pre>{@code
                     * <complexType>
                     *   <simpleContent>
                     *     <extension base="<http://www.w3.org/2001/XMLSchema>nonNegativeInteger">
                     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                     *     </extension>
                     *   </simpleContent>
                     * </complexType>
                     * }</pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "", propOrder = {
                        "value"
                    })
                    public static class Right {

                        @XmlValue
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger value;
                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         */
                        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String prompt;
                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         */
                        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected FormatType format;
                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         */
                        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected RangeTypeType rangeType;
                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         */
                        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlSchemaType(name = "Name")
                        protected String choiceRef;
                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         */
                        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected Float order;
                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         */
                        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "NMTOKENS")
                        protected List<String> configGroups;
                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         */
                        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger bitStringLength;
                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         */
                        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String minimum;
                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         */
                        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String maximum;
                        /**
                         * Determines how a property value is resolved.
                         * 
                         */
                        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected ResolveType resolve;
                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         */
                        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlID
                        @XmlSchemaType(name = "ID")
                        protected String id;
                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         */
                        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String dependency;
                        @XmlAnyAttribute
                        private Map<QName, String> otherAttributes = new HashMap<>();

                        /**
                         * Gets the value of the value property.
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getValue() {
                            return value;
                        }

                        /**
                         * Sets the value of the value property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         */
                        public void setValue(BigInteger value) {
                            this.value = value;
                        }

                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getPrompt() {
                            return prompt;
                        }

                        /**
                         * Sets the value of the prompt property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getPrompt()
                         */
                        public void setPrompt(String value) {
                            this.prompt = value;
                        }

                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         * @return
                         *     possible object is
                         *     {@link FormatType }
                         *     
                         */
                        public FormatType getFormat() {
                            if (format == null) {
                                return FormatType.LONG;
                            } else {
                                return format;
                            }
                        }

                        /**
                         * Sets the value of the format property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link FormatType }
                         *     
                         * @see #getFormat()
                         */
                        public void setFormat(FormatType value) {
                            this.format = value;
                        }

                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         * @return
                         *     possible object is
                         *     {@link RangeTypeType }
                         *     
                         */
                        public RangeTypeType getRangeType() {
                            if (rangeType == null) {
                                return RangeTypeType.FLOAT;
                            } else {
                                return rangeType;
                            }
                        }

                        /**
                         * Sets the value of the rangeType property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link RangeTypeType }
                         *     
                         * @see #getRangeType()
                         */
                        public void setRangeType(RangeTypeType value) {
                            this.rangeType = value;
                        }

                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getChoiceRef() {
                            return choiceRef;
                        }

                        /**
                         * Sets the value of the choiceRef property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getChoiceRef()
                         */
                        public void setChoiceRef(String value) {
                            this.choiceRef = value;
                        }

                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         * @return
                         *     possible object is
                         *     {@link Float }
                         *     
                         */
                        public Float getOrder() {
                            return order;
                        }

                        /**
                         * Sets the value of the order property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link Float }
                         *     
                         * @see #getOrder()
                         */
                        public void setOrder(Float value) {
                            this.order = value;
                        }

                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         * Gets the value of the configGroups property.
                         * 
                         * <p>This accessor method returns a reference to the live list,
                         * not a snapshot. Therefore any modification you make to the
                         * returned list will be present inside the JAXB object.
                         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                         * 
                         * <p>
                         * For example, to add a new item, do as follows:
                         * </p>
                         * <pre>
                         * getConfigGroups().add(newItem);
                         * </pre>
                         * 
                         * 
                         * <p>
                         * Objects of the following type(s) are allowed in the list
                         * {@link String }
                         * </p>
                         * 
                         * 
                         * @return
                         *     The value of the configGroups property.
                         */
                        public List<String> getConfigGroups() {
                            if (configGroups == null) {
                                configGroups = new ArrayList<>();
                            }
                            return this.configGroups;
                        }

                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getBitStringLength() {
                            return bitStringLength;
                        }

                        /**
                         * Sets the value of the bitStringLength property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         * @see #getBitStringLength()
                         */
                        public void setBitStringLength(BigInteger value) {
                            this.bitStringLength = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMinimum() {
                            return minimum;
                        }

                        /**
                         * Sets the value of the minimum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMinimum()
                         */
                        public void setMinimum(String value) {
                            this.minimum = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMaximum() {
                            return maximum;
                        }

                        /**
                         * Sets the value of the maximum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMaximum()
                         */
                        public void setMaximum(String value) {
                            this.maximum = value;
                        }

                        /**
                         * Determines how a property value is resolved.
                         * 
                         * @return
                         *     possible object is
                         *     {@link ResolveType }
                         *     
                         */
                        public ResolveType getResolve() {
                            if (resolve == null) {
                                return ResolveType.IMMEDIATE;
                            } else {
                                return resolve;
                            }
                        }

                        /**
                         * Sets the value of the resolve property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link ResolveType }
                         *     
                         * @see #getResolve()
                         */
                        public void setResolve(ResolveType value) {
                            this.resolve = value;
                        }

                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getId() {
                            return id;
                        }

                        /**
                         * Sets the value of the id property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getId()
                         */
                        public void setId(String value) {
                            this.id = value;
                        }

                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getDependency() {
                            return dependency;
                        }

                        /**
                         * Sets the value of the dependency property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getDependency()
                         */
                        public void setDependency(String value) {
                            this.dependency = value;
                        }

                        /**
                         * Gets a map that contains attributes that aren't bound to any typed property on this class.
                         * 
                         * <p>
                         * the map is keyed by the name of the attribute and 
                         * the value is the string value of the attribute.
                         * 
                         * the map returned by this method is live, and you can add new attribute
                         * by updating the map directly. Because of this design, there's no setter.
                         * 
                         * 
                         * @return
                         *     always non-null
                         */
                        public Map<QName, String> getOtherAttributes() {
                            return otherAttributes;
                        }

                    }

                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <complexContent>
             *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       <sequence>
             *         <element name="name" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName"/>
             *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector" minOccurs="0"/>
             *       </sequence>
             *     </restriction>
             *   </complexContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "name",
                "vector"
            })
            public static class PhysicalPort {

                /**
                 * Component port name as specified inside the model port section
                 * 
                 */
                @XmlElement(required = true)
                protected String name;
                /**
                 * Definition of the indecies for a vectored port.
                 * 
                 */
                protected org.example.schema.s1685_2009.Vector vector;

                /**
                 * Component port name as specified inside the model port section
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getName()
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Definition of the indecies for a vectored port.
                 * 
                 * @return
                 *     possible object is
                 *     {@link org.example.schema.s1685_2009.Vector }
                 *     
                 */
                public org.example.schema.s1685_2009.Vector getVector() {
                    return vector;
                }

                /**
                 * Sets the value of the vector property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link org.example.schema.s1685_2009.Vector }
                 *     
                 * @see #getVector()
                 */
                public void setVector(org.example.schema.s1685_2009.Vector value) {
                    this.vector = value;
                }

            }

        }

    }

}
