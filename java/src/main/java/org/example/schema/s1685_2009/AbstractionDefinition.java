//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}versionedIdentifier"/>
 *         <element name="busType" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}libraryRefType"/>
 *         <element name="extends" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}libraryRefType" minOccurs="0"/>
 *         <element name="ports">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="port" maxOccurs="unbounded">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <element name="logicalName" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName" minOccurs="0"/>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description" minOccurs="0"/>
 *                             <choice>
 *                               <element name="wire">
 *                                 <complexType>
 *                                   <complexContent>
 *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                       <sequence>
 *                                         <element name="qualifier" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <choice>
 *                                                   <sequence>
 *                                                     <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                     <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                   </sequence>
 *                                                   <element name="isClock" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                   <element name="isReset" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                 </choice>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <sequence>
 *                                                   <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *                                                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
 *                                                 </sequence>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onMaster" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onSlave" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <choice minOccurs="0">
 *                                           <element name="defaultValue" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
 *                                           <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}requiresDriver"/>
 *                                         </choice>
 *                                       </sequence>
 *                                     </restriction>
 *                                   </complexContent>
 *                                 </complexType>
 *                               </element>
 *                               <element name="transactional">
 *                                 <complexType>
 *                                   <complexContent>
 *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                       <sequence>
 *                                         <element name="qualifier" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <sequence>
 *                                                   <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                   <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                                                 </sequence>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <sequence>
 *                                                   <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *                                                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
 *                                                 </sequence>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onMaster" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                         <element name="onSlave" minOccurs="0">
 *                                           <complexType>
 *                                             <complexContent>
 *                                               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
 *                                               </restriction>
 *                                             </complexContent>
 *                                           </complexType>
 *                                         </element>
 *                                       </sequence>
 *                                     </restriction>
 *                                   </complexContent>
 *                                 </complexType>
 *                               </element>
 *                             </choice>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *                           </sequence>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "vendor",
    "library",
    "name",
    "version",
    "busType",
    "_extends",
    "ports",
    "description",
    "vendorExtensions"
})
@XmlRootElement(name = "abstractionDefinition")
public class AbstractionDefinition {

    /**
     * Name of the vendor who supplies this file.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String vendor;
    /**
     * Name of the logical library this element belongs to.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String library;
    /**
     * The name of the object.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NMTOKEN")
    protected String name;
    /**
     * Indicates the version of the named element.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NMTOKEN")
    protected String version;
    /**
     * Reference to the busDefinition that this abstractionDefinition implements.
     * 
     */
    @XmlElement(required = true)
    protected LibraryRefType busType;
    /**
     * Optional name of abstraction type that this abstraction definition is compatible with. This abstraction definition may change the definitions of ports in the existing abstraction definition and add new ports, the ports in the original abstraction are not deleted but may be marked illegal to disallow their use.
     * 				This abstraction definition may only extend another abstraction definition if the bus type of this abstraction definition extends the bus type of the extended abstraction definition
     * 
     */
    @XmlElement(name = "extends")
    protected LibraryRefType _extends;
    /**
     * This is a list of logical ports defined by the bus.
     * 
     */
    @XmlElement(required = true)
    protected AbstractionDefinition.Ports ports;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;

    /**
     * Name of the vendor who supplies this file.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVendor() {
        return vendor;
    }

    /**
     * Sets the value of the vendor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getVendor()
     */
    public void setVendor(String value) {
        this.vendor = value;
    }

    /**
     * Name of the logical library this element belongs to.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLibrary() {
        return library;
    }

    /**
     * Sets the value of the library property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getLibrary()
     */
    public void setLibrary(String value) {
        this.library = value;
    }

    /**
     * The name of the object.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Indicates the version of the named element.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getVersion()
     */
    public void setVersion(String value) {
        this.version = value;
    }

    /**
     * Reference to the busDefinition that this abstractionDefinition implements.
     * 
     * @return
     *     possible object is
     *     {@link LibraryRefType }
     *     
     */
    public LibraryRefType getBusType() {
        return busType;
    }

    /**
     * Sets the value of the busType property.
     * 
     * @param value
     *     allowed object is
     *     {@link LibraryRefType }
     *     
     * @see #getBusType()
     */
    public void setBusType(LibraryRefType value) {
        this.busType = value;
    }

    /**
     * Optional name of abstraction type that this abstraction definition is compatible with. This abstraction definition may change the definitions of ports in the existing abstraction definition and add new ports, the ports in the original abstraction are not deleted but may be marked illegal to disallow their use.
     * 				This abstraction definition may only extend another abstraction definition if the bus type of this abstraction definition extends the bus type of the extended abstraction definition
     * 
     * @return
     *     possible object is
     *     {@link LibraryRefType }
     *     
     */
    public LibraryRefType getExtends() {
        return _extends;
    }

    /**
     * Sets the value of the extends property.
     * 
     * @param value
     *     allowed object is
     *     {@link LibraryRefType }
     *     
     * @see #getExtends()
     */
    public void setExtends(LibraryRefType value) {
        this._extends = value;
    }

    /**
     * This is a list of logical ports defined by the bus.
     * 
     * @return
     *     possible object is
     *     {@link AbstractionDefinition.Ports }
     *     
     */
    public AbstractionDefinition.Ports getPorts() {
        return ports;
    }

    /**
     * Sets the value of the ports property.
     * 
     * @param value
     *     allowed object is
     *     {@link AbstractionDefinition.Ports }
     *     
     * @see #getPorts()
     */
    public void setPorts(AbstractionDefinition.Ports value) {
        this.ports = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="port" maxOccurs="unbounded">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element name="logicalName" type="{http://www.w3.org/2001/XMLSchema}Name"/>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName" minOccurs="0"/>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description" minOccurs="0"/>
     *                   <choice>
     *                     <element name="wire">
     *                       <complexType>
     *                         <complexContent>
     *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                             <sequence>
     *                               <element name="qualifier" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <choice>
     *                                         <sequence>
     *                                           <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                           <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                         </sequence>
     *                                         <element name="isClock" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                         <element name="isReset" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                       </choice>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <sequence>
     *                                         <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
     *                                         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
     *                                       </sequence>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onMaster" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onSlave" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <choice minOccurs="0">
     *                                 <element name="defaultValue" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
     *                                 <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}requiresDriver"/>
     *                               </choice>
     *                             </sequence>
     *                           </restriction>
     *                         </complexContent>
     *                       </complexType>
     *                     </element>
     *                     <element name="transactional">
     *                       <complexType>
     *                         <complexContent>
     *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                             <sequence>
     *                               <element name="qualifier" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <sequence>
     *                                         <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                         <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                                       </sequence>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <sequence>
     *                                         <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
     *                                         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
     *                                       </sequence>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onMaster" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                               <element name="onSlave" minOccurs="0">
     *                                 <complexType>
     *                                   <complexContent>
     *                                     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
     *                                     </restriction>
     *                                   </complexContent>
     *                                 </complexType>
     *                               </element>
     *                             </sequence>
     *                           </restriction>
     *                         </complexContent>
     *                       </complexType>
     *                     </element>
     *                   </choice>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "port"
    })
    public static class Ports {

        @XmlElement(required = true)
        protected List<AbstractionDefinition.Ports.Port> port;

        /**
         * Gets the value of the port property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the port property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getPort().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AbstractionDefinition.Ports.Port }
         * </p>
         * 
         * 
         * @return
         *     The value of the port property.
         */
        public List<AbstractionDefinition.Ports.Port> getPort() {
            if (port == null) {
                port = new ArrayList<>();
            }
            return this.port;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="logicalName" type="{http://www.w3.org/2001/XMLSchema}Name"/>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName" minOccurs="0"/>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description" minOccurs="0"/>
         *         <choice>
         *           <element name="wire">
         *             <complexType>
         *               <complexContent>
         *                 <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                   <sequence>
         *                     <element name="qualifier" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <choice>
         *                               <sequence>
         *                                 <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                                 <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                               </sequence>
         *                               <element name="isClock" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                               <element name="isReset" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                             </choice>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <sequence>
         *                               <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
         *                               <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
         *                             </sequence>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onMaster" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onSlave" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <choice minOccurs="0">
         *                       <element name="defaultValue" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
         *                       <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}requiresDriver"/>
         *                     </choice>
         *                   </sequence>
         *                 </restriction>
         *               </complexContent>
         *             </complexType>
         *           </element>
         *           <element name="transactional">
         *             <complexType>
         *               <complexContent>
         *                 <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                   <sequence>
         *                     <element name="qualifier" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <sequence>
         *                               <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                               <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *                             </sequence>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <sequence>
         *                               <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
         *                               <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
         *                             </sequence>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onMaster" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                     <element name="onSlave" minOccurs="0">
         *                       <complexType>
         *                         <complexContent>
         *                           <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
         *                           </restriction>
         *                         </complexContent>
         *                       </complexType>
         *                     </element>
         *                   </sequence>
         *                 </restriction>
         *               </complexContent>
         *             </complexType>
         *           </element>
         *         </choice>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "logicalName",
            "displayName",
            "description",
            "wire",
            "transactional",
            "vendorExtensions"
        })
        public static class Port {

            /**
             * The assigned name of this port in bus specifications.
             * 
             */
            @XmlElement(required = true)
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String logicalName;
            /**
             * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
             * 
             */
            protected String displayName;
            /**
             * Full description string, typically for documentation
             * 
             */
            protected String description;
            /**
             * A port that carries logic or an array of logic values
             * 
             */
            protected AbstractionDefinition.Ports.Port.Wire wire;
            /**
             * A port that carries complex information modeled at a high level of abstraction.
             * 
             */
            protected AbstractionDefinition.Ports.Port.Transactional transactional;
            /**
             * Container for vendor specific extensions.
             * 
             */
            protected VendorExtensions vendorExtensions;

            /**
             * The assigned name of this port in bus specifications.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getLogicalName() {
                return logicalName;
            }

            /**
             * Sets the value of the logicalName property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getLogicalName()
             */
            public void setLogicalName(String value) {
                this.logicalName = value;
            }

            /**
             * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDisplayName() {
                return displayName;
            }

            /**
             * Sets the value of the displayName property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDisplayName()
             */
            public void setDisplayName(String value) {
                this.displayName = value;
            }

            /**
             * Full description string, typically for documentation
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDescription() {
                return description;
            }

            /**
             * Sets the value of the description property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDescription()
             */
            public void setDescription(String value) {
                this.description = value;
            }

            /**
             * A port that carries logic or an array of logic values
             * 
             * @return
             *     possible object is
             *     {@link AbstractionDefinition.Ports.Port.Wire }
             *     
             */
            public AbstractionDefinition.Ports.Port.Wire getWire() {
                return wire;
            }

            /**
             * Sets the value of the wire property.
             * 
             * @param value
             *     allowed object is
             *     {@link AbstractionDefinition.Ports.Port.Wire }
             *     
             * @see #getWire()
             */
            public void setWire(AbstractionDefinition.Ports.Port.Wire value) {
                this.wire = value;
            }

            /**
             * A port that carries complex information modeled at a high level of abstraction.
             * 
             * @return
             *     possible object is
             *     {@link AbstractionDefinition.Ports.Port.Transactional }
             *     
             */
            public AbstractionDefinition.Ports.Port.Transactional getTransactional() {
                return transactional;
            }

            /**
             * Sets the value of the transactional property.
             * 
             * @param value
             *     allowed object is
             *     {@link AbstractionDefinition.Ports.Port.Transactional }
             *     
             * @see #getTransactional()
             */
            public void setTransactional(AbstractionDefinition.Ports.Port.Transactional value) {
                this.transactional = value;
            }

            /**
             * Container for vendor specific extensions.
             * 
             * @return
             *     possible object is
             *     {@link VendorExtensions }
             *     
             */
            public VendorExtensions getVendorExtensions() {
                return vendorExtensions;
            }

            /**
             * Sets the value of the vendorExtensions property.
             * 
             * @param value
             *     allowed object is
             *     {@link VendorExtensions }
             *     
             * @see #getVendorExtensions()
             */
            public void setVendorExtensions(VendorExtensions value) {
                this.vendorExtensions = value;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <complexContent>
             *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       <sequence>
             *         <element name="qualifier" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <sequence>
             *                   <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                   <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                 </sequence>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <sequence>
             *                   <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
             *                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
             *                 </sequence>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onMaster" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onSlave" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *       </sequence>
             *     </restriction>
             *   </complexContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "qualifier",
                "onSystem",
                "onMaster",
                "onSlave"
            })
            public static class Transactional {

                /**
                 * The type of information this port carries A transactional port can carry both address and data information.
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Transactional.Qualifier qualifier;
                /**
                 * Defines constraints for this port when present in a system bus interface with a matching group name.
                 * 
                 */
                protected List<AbstractionDefinition.Ports.Port.Transactional.OnSystem> onSystem;
                /**
                 * Defines constraints for this port when present in a master bus interface.
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Transactional.OnMaster onMaster;
                /**
                 * Defines constraints for this port when present in a slave bus interface.
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Transactional.OnSlave onSlave;

                /**
                 * The type of information this port carries A transactional port can carry both address and data information.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.Qualifier }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Transactional.Qualifier getQualifier() {
                    return qualifier;
                }

                /**
                 * Sets the value of the qualifier property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.Qualifier }
                 *     
                 * @see #getQualifier()
                 */
                public void setQualifier(AbstractionDefinition.Ports.Port.Transactional.Qualifier value) {
                    this.qualifier = value;
                }

                /**
                 * Defines constraints for this port when present in a system bus interface with a matching group name.
                 * 
                 * Gets the value of the onSystem property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the onSystem property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getOnSystem().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link AbstractionDefinition.Ports.Port.Transactional.OnSystem }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the onSystem property.
                 */
                public List<AbstractionDefinition.Ports.Port.Transactional.OnSystem> getOnSystem() {
                    if (onSystem == null) {
                        onSystem = new ArrayList<>();
                    }
                    return this.onSystem;
                }

                /**
                 * Defines constraints for this port when present in a master bus interface.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.OnMaster }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Transactional.OnMaster getOnMaster() {
                    return onMaster;
                }

                /**
                 * Sets the value of the onMaster property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.OnMaster }
                 *     
                 * @see #getOnMaster()
                 */
                public void setOnMaster(AbstractionDefinition.Ports.Port.Transactional.OnMaster value) {
                    this.onMaster = value;
                }

                /**
                 * Defines constraints for this port when present in a slave bus interface.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.OnSlave }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Transactional.OnSlave getOnSlave() {
                    return onSlave;
                }

                /**
                 * Sets the value of the onSlave property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Transactional.OnSlave }
                 *     
                 * @see #getOnSlave()
                 */
                public void setOnSlave(AbstractionDefinition.Ports.Port.Transactional.OnSlave value) {
                    this.onSlave = value;
                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "presence",
                    "service"
                })
                public static class OnMaster {

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     */
                    @XmlElement(required = true)
                    protected ServiceType service;

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     * @return
                     *     possible object is
                     *     {@link ServiceType }
                     *     
                     */
                    public ServiceType getService() {
                        return service;
                    }

                    /**
                     * Sets the value of the service property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link ServiceType }
                     *     
                     * @see #getService()
                     */
                    public void setService(ServiceType value) {
                        this.service = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "presence",
                    "service"
                })
                public static class OnSlave {

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     */
                    @XmlElement(required = true)
                    protected ServiceType service;

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     * @return
                     *     possible object is
                     *     {@link ServiceType }
                     *     
                     */
                    public ServiceType getService() {
                        return service;
                    }

                    /**
                     * Sets the value of the service property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link ServiceType }
                     *     
                     * @see #getService()
                     */
                    public void setService(ServiceType value) {
                        this.service = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
                 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactionalPort"/>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "group",
                    "presence",
                    "service"
                })
                public static class OnSystem {

                    /**
                     * Used to group system ports into different groups within a common bus.
                     * 
                     */
                    @XmlElement(required = true)
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    @XmlSchemaType(name = "Name")
                    protected String group;
                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     */
                    @XmlElement(required = true)
                    protected ServiceType service;

                    /**
                     * Used to group system ports into different groups within a common bus.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getGroup() {
                        return group;
                    }

                    /**
                     * Sets the value of the group property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getGroup()
                     */
                    public void setGroup(String value) {
                        this.group = value;
                    }

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * The service that this transactional port can provide or requires.
                     * 
                     * @return
                     *     possible object is
                     *     {@link ServiceType }
                     *     
                     */
                    public ServiceType getService() {
                        return service;
                    }

                    /**
                     * Sets the value of the service property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link ServiceType }
                     *     
                     * @see #getService()
                     */
                    public void setService(ServiceType value) {
                        this.service = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *         <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "isAddress",
                    "isData"
                })
                public static class Qualifier {

                    /**
                     * If this element is present, the port contains address information.
                     * 
                     */
                    protected Boolean isAddress;
                    /**
                     * If this element is present, the port contains data information.
                     * 
                     */
                    protected Boolean isData;

                    /**
                     * If this element is present, the port contains address information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsAddress() {
                        return isAddress;
                    }

                    /**
                     * Sets the value of the isAddress property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsAddress()
                     */
                    public void setIsAddress(Boolean value) {
                        this.isAddress = value;
                    }

                    /**
                     * If this element is present, the port contains data information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsData() {
                        return isData;
                    }

                    /**
                     * Sets the value of the isData property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsData()
                     */
                    public void setIsData(Boolean value) {
                        this.isData = value;
                    }

                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <complexContent>
             *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       <sequence>
             *         <element name="qualifier" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <choice>
             *                   <sequence>
             *                     <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                     <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                   </sequence>
             *                   <element name="isClock" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                   <element name="isReset" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
             *                 </choice>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <sequence>
             *                   <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
             *                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
             *                 </sequence>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onMaster" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <element name="onSlave" minOccurs="0">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <choice minOccurs="0">
             *           <element name="defaultValue" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
             *           <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}requiresDriver"/>
             *         </choice>
             *       </sequence>
             *     </restriction>
             *   </complexContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "qualifier",
                "onSystem",
                "onMaster",
                "onSlave",
                "defaultValue",
                "requiresDriver"
            })
            public static class Wire {

                /**
                 * The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Wire.Qualifier qualifier;
                /**
                 * Defines constraints for this port when present in a system bus interface with a matching group name.
                 * 
                 */
                protected List<AbstractionDefinition.Ports.Port.Wire.OnSystem> onSystem;
                /**
                 * Defines constraints for this port when present in a master bus interface.
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Wire.OnMaster onMaster;
                /**
                 * Defines constraints for this port when present in a slave bus interface.
                 * 
                 */
                protected AbstractionDefinition.Ports.Port.Wire.OnSlave onSlave;
                /**
                 * Indicates the default value for this wire port.
                 * 
                 */
                protected String defaultValue;
                /**
                 * Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected
                 * 
                 */
                @XmlElement(defaultValue = "false")
                protected RequiresDriver requiresDriver;

                /**
                 * The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.Qualifier }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Wire.Qualifier getQualifier() {
                    return qualifier;
                }

                /**
                 * Sets the value of the qualifier property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.Qualifier }
                 *     
                 * @see #getQualifier()
                 */
                public void setQualifier(AbstractionDefinition.Ports.Port.Wire.Qualifier value) {
                    this.qualifier = value;
                }

                /**
                 * Defines constraints for this port when present in a system bus interface with a matching group name.
                 * 
                 * Gets the value of the onSystem property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the onSystem property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getOnSystem().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link AbstractionDefinition.Ports.Port.Wire.OnSystem }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the onSystem property.
                 */
                public List<AbstractionDefinition.Ports.Port.Wire.OnSystem> getOnSystem() {
                    if (onSystem == null) {
                        onSystem = new ArrayList<>();
                    }
                    return this.onSystem;
                }

                /**
                 * Defines constraints for this port when present in a master bus interface.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.OnMaster }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Wire.OnMaster getOnMaster() {
                    return onMaster;
                }

                /**
                 * Sets the value of the onMaster property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.OnMaster }
                 *     
                 * @see #getOnMaster()
                 */
                public void setOnMaster(AbstractionDefinition.Ports.Port.Wire.OnMaster value) {
                    this.onMaster = value;
                }

                /**
                 * Defines constraints for this port when present in a slave bus interface.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.OnSlave }
                 *     
                 */
                public AbstractionDefinition.Ports.Port.Wire.OnSlave getOnSlave() {
                    return onSlave;
                }

                /**
                 * Sets the value of the onSlave property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AbstractionDefinition.Ports.Port.Wire.OnSlave }
                 *     
                 * @see #getOnSlave()
                 */
                public void setOnSlave(AbstractionDefinition.Ports.Port.Wire.OnSlave value) {
                    this.onSlave = value;
                }

                /**
                 * Indicates the default value for this wire port.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDefaultValue() {
                    return defaultValue;
                }

                /**
                 * Sets the value of the defaultValue property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDefaultValue()
                 */
                public void setDefaultValue(String value) {
                    this.defaultValue = value;
                }

                /**
                 * Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected
                 * 
                 * @return
                 *     possible object is
                 *     {@link RequiresDriver }
                 *     
                 */
                public RequiresDriver getRequiresDriver() {
                    return requiresDriver;
                }

                /**
                 * Sets the value of the requiresDriver property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RequiresDriver }
                 *     
                 * @see #getRequiresDriver()
                 */
                public void setRequiresDriver(RequiresDriver value) {
                    this.requiresDriver = value;
                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "presence",
                    "width",
                    "direction",
                    "modeConstraints",
                    "mirroredModeConstraints"
                })
                public static class OnMaster {

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     */
                    @XmlSchemaType(name = "positiveInteger")
                    protected BigInteger width;
                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     */
                    @XmlElement(defaultValue = "out")
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    protected String direction;
                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType modeConstraints;
                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType mirroredModeConstraints;

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     * @return
                     *     possible object is
                     *     {@link BigInteger }
                     *     
                     */
                    public BigInteger getWidth() {
                        return width;
                    }

                    /**
                     * Sets the value of the width property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link BigInteger }
                     *     
                     * @see #getWidth()
                     */
                    public void setWidth(BigInteger value) {
                        this.width = value;
                    }

                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getDirection() {
                        return direction;
                    }

                    /**
                     * Sets the value of the direction property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getDirection()
                     */
                    public void setDirection(String value) {
                        this.direction = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getModeConstraints() {
                        return modeConstraints;
                    }

                    /**
                     * Sets the value of the modeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getModeConstraints()
                     */
                    public void setModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.modeConstraints = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
                        return mirroredModeConstraints;
                    }

                    /**
                     * Sets the value of the mirroredModeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getMirroredModeConstraints()
                     */
                    public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.mirroredModeConstraints = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "presence",
                    "width",
                    "direction",
                    "modeConstraints",
                    "mirroredModeConstraints"
                })
                public static class OnSlave {

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     */
                    @XmlSchemaType(name = "positiveInteger")
                    protected BigInteger width;
                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     */
                    @XmlElement(defaultValue = "out")
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    protected String direction;
                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType modeConstraints;
                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType mirroredModeConstraints;

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     * @return
                     *     possible object is
                     *     {@link BigInteger }
                     *     
                     */
                    public BigInteger getWidth() {
                        return width;
                    }

                    /**
                     * Sets the value of the width property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link BigInteger }
                     *     
                     * @see #getWidth()
                     */
                    public void setWidth(BigInteger value) {
                        this.width = value;
                    }

                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getDirection() {
                        return direction;
                    }

                    /**
                     * Sets the value of the direction property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getDirection()
                     */
                    public void setDirection(String value) {
                        this.direction = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getModeConstraints() {
                        return modeConstraints;
                    }

                    /**
                     * Sets the value of the modeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getModeConstraints()
                     */
                    public void setModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.modeConstraints = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
                        return mirroredModeConstraints;
                    }

                    /**
                     * Sets the value of the mirroredModeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getMirroredModeConstraints()
                     */
                    public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.mirroredModeConstraints = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
                 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wirePort"/>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "group",
                    "presence",
                    "width",
                    "direction",
                    "modeConstraints",
                    "mirroredModeConstraints"
                })
                public static class OnSystem {

                    /**
                     * Used to group system ports into different groups within a common bus.
                     * 
                     */
                    @XmlElement(required = true)
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    @XmlSchemaType(name = "Name")
                    protected String group;
                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     */
                    @XmlElement(defaultValue = "optional")
                    protected String presence;
                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     */
                    @XmlSchemaType(name = "positiveInteger")
                    protected BigInteger width;
                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     */
                    @XmlElement(defaultValue = "out")
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    protected String direction;
                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType modeConstraints;
                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     */
                    protected AbstractionDefPortConstraintsType mirroredModeConstraints;

                    /**
                     * Used to group system ports into different groups within a common bus.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getGroup() {
                        return group;
                    }

                    /**
                     * Sets the value of the group property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getGroup()
                     */
                    public void setGroup(String value) {
                        this.group = value;
                    }

                    /**
                     * If this element is present, the
                     *             existance of the port is controlled by the specified
                     *             value. valid values are 'illegal', 'required' and
                     *             'optional'.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getPresence() {
                        return presence;
                    }

                    /**
                     * Sets the value of the presence property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getPresence()
                     */
                    public void setPresence(String value) {
                        this.presence = value;
                    }

                    /**
                     * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
                     * 
                     * @return
                     *     possible object is
                     *     {@link BigInteger }
                     *     
                     */
                    public BigInteger getWidth() {
                        return width;
                    }

                    /**
                     * Sets the value of the width property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link BigInteger }
                     *     
                     * @see #getWidth()
                     */
                    public void setWidth(BigInteger value) {
                        this.width = value;
                    }

                    /**
                     * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getDirection() {
                        return direction;
                    }

                    /**
                     * Sets the value of the direction property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     * @see #getDirection()
                     */
                    public void setDirection(String value) {
                        this.direction = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getModeConstraints() {
                        return modeConstraints;
                    }

                    /**
                     * Sets the value of the modeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getModeConstraints()
                     */
                    public void setModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.modeConstraints = value;
                    }

                    /**
                     * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
                     * 
                     * @return
                     *     possible object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     */
                    public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
                        return mirroredModeConstraints;
                    }

                    /**
                     * Sets the value of the mirroredModeConstraints property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link AbstractionDefPortConstraintsType }
                     *     
                     * @see #getMirroredModeConstraints()
                     */
                    public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
                        this.mirroredModeConstraints = value;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <choice>
                 *         <sequence>
                 *           <element name="isAddress" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *           <element name="isData" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *         </sequence>
                 *         <element name="isClock" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *         <element name="isReset" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
                 *       </choice>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "isAddress",
                    "isData",
                    "isClock",
                    "isReset"
                })
                public static class Qualifier {

                    /**
                     * If this element is present, the port contains address information.
                     * 
                     */
                    protected Boolean isAddress;
                    /**
                     * If this element is present, the port contains data information.
                     * 
                     */
                    protected Boolean isData;
                    /**
                     * If this element is present, the port contains only clock information.
                     * 
                     */
                    protected Boolean isClock;
                    /**
                     * Is this element is present, the port contains only reset information.
                     * 
                     */
                    protected Boolean isReset;

                    /**
                     * If this element is present, the port contains address information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsAddress() {
                        return isAddress;
                    }

                    /**
                     * Sets the value of the isAddress property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsAddress()
                     */
                    public void setIsAddress(Boolean value) {
                        this.isAddress = value;
                    }

                    /**
                     * If this element is present, the port contains data information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsData() {
                        return isData;
                    }

                    /**
                     * Sets the value of the isData property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsData()
                     */
                    public void setIsData(Boolean value) {
                        this.isData = value;
                    }

                    /**
                     * If this element is present, the port contains only clock information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsClock() {
                        return isClock;
                    }

                    /**
                     * Sets the value of the isClock property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsClock()
                     */
                    public void setIsClock(Boolean value) {
                        this.isClock = value;
                    }

                    /**
                     * Is this element is present, the port contains only reset information.
                     * 
                     * @return
                     *     possible object is
                     *     {@link Boolean }
                     *     
                     */
                    public Boolean isIsReset() {
                        return isReset;
                    }

                    /**
                     * Sets the value of the isReset property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link Boolean }
                     *     
                     * @see #isIsReset()
                     */
                    public void setIsReset(Boolean value) {
                        this.isReset = value;
                    }

                }

            }

        }

    }

}
