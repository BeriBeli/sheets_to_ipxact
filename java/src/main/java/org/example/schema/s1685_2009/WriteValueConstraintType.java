//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * A constraint on the values that can be written to this field. Absence of this element implies that any value that fits can be written to it.
 * 
 * <p>Java class for writeValueConstraintType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="writeValueConstraintType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <choice>
 *         <element name="writeAsRead" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         <element name="useEnumeratedValues" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         <sequence>
 *           <element name="minimum">
 *             <complexType>
 *               <simpleContent>
 *                 <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
 *                   <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
 *                 </extension>
 *               </simpleContent>
 *             </complexType>
 *           </element>
 *           <element name="maximum">
 *             <complexType>
 *               <simpleContent>
 *                 <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
 *                   <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
 *                 </extension>
 *               </simpleContent>
 *             </complexType>
 *           </element>
 *         </sequence>
 *       </choice>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "writeValueConstraintType", propOrder = {
    "writeAsRead",
    "useEnumeratedValues",
    "minimum",
    "maximum"
})
public class WriteValueConstraintType {

    /**
     * writeAsRead indicates that only a value immediately read before a write is a legal value to be written.
     * 
     */
    protected Boolean writeAsRead;
    /**
     * useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.
     * 
     */
    protected Boolean useEnumeratedValues;
    /**
     * The minimum legal value that may be written to a field
     * 
     */
    protected WriteValueConstraintType.Minimum minimum;
    /**
     * The maximum legal value that may be written to a field
     * 
     */
    protected WriteValueConstraintType.Maximum maximum;

    /**
     * writeAsRead indicates that only a value immediately read before a write is a legal value to be written.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isWriteAsRead() {
        return writeAsRead;
    }

    /**
     * Sets the value of the writeAsRead property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isWriteAsRead()
     */
    public void setWriteAsRead(Boolean value) {
        this.writeAsRead = value;
    }

    /**
     * useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUseEnumeratedValues() {
        return useEnumeratedValues;
    }

    /**
     * Sets the value of the useEnumeratedValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isUseEnumeratedValues()
     */
    public void setUseEnumeratedValues(Boolean value) {
        this.useEnumeratedValues = value;
    }

    /**
     * The minimum legal value that may be written to a field
     * 
     * @return
     *     possible object is
     *     {@link WriteValueConstraintType.Minimum }
     *     
     */
    public WriteValueConstraintType.Minimum getMinimum() {
        return minimum;
    }

    /**
     * Sets the value of the minimum property.
     * 
     * @param value
     *     allowed object is
     *     {@link WriteValueConstraintType.Minimum }
     *     
     * @see #getMinimum()
     */
    public void setMinimum(WriteValueConstraintType.Minimum value) {
        this.minimum = value;
    }

    /**
     * The maximum legal value that may be written to a field
     * 
     * @return
     *     possible object is
     *     {@link WriteValueConstraintType.Maximum }
     *     
     */
    public WriteValueConstraintType.Maximum getMaximum() {
        return maximum;
    }

    /**
     * Sets the value of the maximum property.
     * 
     * @param value
     *     allowed object is
     *     {@link WriteValueConstraintType.Maximum }
     *     
     * @see #getMaximum()
     */
    public void setMaximum(WriteValueConstraintType.Maximum value) {
        this.maximum = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Maximum {

        /**
         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         */
        @XmlValue
        protected String value;
        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         */
        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String prompt;
        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         */
        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected FormatType format;
        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         */
        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected RangeTypeType rangeType;
        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         */
        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String choiceRef;
        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         */
        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Float order;
        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         */
        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "NMTOKENS")
        protected List<String> configGroups;
        /**
         * Length of the bit string, required if the format is bitString
         * 
         */
        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger bitStringLength;
        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         */
        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String minimum;
        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         */
        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String maximum;
        /**
         * Determines how a property value is resolved.
         * 
         */
        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected ResolveType resolve;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         */
        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String dependency;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<>();

        /**
         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getValue()
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPrompt() {
            return prompt;
        }

        /**
         * Sets the value of the prompt property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPrompt()
         */
        public void setPrompt(String value) {
            this.prompt = value;
        }

        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         * @return
         *     possible object is
         *     {@link FormatType }
         *     
         */
        public FormatType getFormat() {
            if (format == null) {
                return FormatType.LONG;
            } else {
                return format;
            }
        }

        /**
         * Sets the value of the format property.
         * 
         * @param value
         *     allowed object is
         *     {@link FormatType }
         *     
         * @see #getFormat()
         */
        public void setFormat(FormatType value) {
            this.format = value;
        }

        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         * @return
         *     possible object is
         *     {@link RangeTypeType }
         *     
         */
        public RangeTypeType getRangeType() {
            if (rangeType == null) {
                return RangeTypeType.FLOAT;
            } else {
                return rangeType;
            }
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link RangeTypeType }
         *     
         * @see #getRangeType()
         */
        public void setRangeType(RangeTypeType value) {
            this.rangeType = value;
        }

        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChoiceRef() {
            return choiceRef;
        }

        /**
         * Sets the value of the choiceRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getChoiceRef()
         */
        public void setChoiceRef(String value) {
            this.choiceRef = value;
        }

        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         * @return
         *     possible object is
         *     {@link Float }
         *     
         */
        public Float getOrder() {
            return order;
        }

        /**
         * Sets the value of the order property.
         * 
         * @param value
         *     allowed object is
         *     {@link Float }
         *     
         * @see #getOrder()
         */
        public void setOrder(Float value) {
            this.order = value;
        }

        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         * Gets the value of the configGroups property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getConfigGroups().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * </p>
         * 
         * 
         * @return
         *     The value of the configGroups property.
         */
        public List<String> getConfigGroups() {
            if (configGroups == null) {
                configGroups = new ArrayList<>();
            }
            return this.configGroups;
        }

        /**
         * Length of the bit string, required if the format is bitString
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getBitStringLength() {
            return bitStringLength;
        }

        /**
         * Sets the value of the bitStringLength property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getBitStringLength()
         */
        public void setBitStringLength(BigInteger value) {
            this.bitStringLength = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMinimum() {
            return minimum;
        }

        /**
         * Sets the value of the minimum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMinimum()
         */
        public void setMinimum(String value) {
            this.minimum = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMaximum() {
            return maximum;
        }

        /**
         * Sets the value of the maximum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMaximum()
         */
        public void setMaximum(String value) {
            this.maximum = value;
        }

        /**
         * Determines how a property value is resolved.
         * 
         * @return
         *     possible object is
         *     {@link ResolveType }
         *     
         */
        public ResolveType getResolve() {
            if (resolve == null) {
                return ResolveType.IMMEDIATE;
            } else {
                return resolve;
            }
        }

        /**
         * Sets the value of the resolve property.
         * 
         * @param value
         *     allowed object is
         *     {@link ResolveType }
         *     
         * @see #getResolve()
         */
        public void setResolve(ResolveType value) {
            this.resolve = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDependency() {
            return dependency;
        }

        /**
         * Sets the value of the dependency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDependency()
         */
        public void setDependency(String value) {
            this.dependency = value;
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Minimum {

        /**
         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         */
        @XmlValue
        protected String value;
        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         */
        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String prompt;
        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         */
        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected FormatType format;
        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         */
        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected RangeTypeType rangeType;
        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         */
        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String choiceRef;
        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         */
        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Float order;
        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         */
        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "NMTOKENS")
        protected List<String> configGroups;
        /**
         * Length of the bit string, required if the format is bitString
         * 
         */
        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger bitStringLength;
        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         */
        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String minimum;
        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         */
        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String maximum;
        /**
         * Determines how a property value is resolved.
         * 
         */
        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected ResolveType resolve;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         */
        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String dependency;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<>();

        /**
         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getValue()
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPrompt() {
            return prompt;
        }

        /**
         * Sets the value of the prompt property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPrompt()
         */
        public void setPrompt(String value) {
            this.prompt = value;
        }

        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         * @return
         *     possible object is
         *     {@link FormatType }
         *     
         */
        public FormatType getFormat() {
            if (format == null) {
                return FormatType.LONG;
            } else {
                return format;
            }
        }

        /**
         * Sets the value of the format property.
         * 
         * @param value
         *     allowed object is
         *     {@link FormatType }
         *     
         * @see #getFormat()
         */
        public void setFormat(FormatType value) {
            this.format = value;
        }

        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         * @return
         *     possible object is
         *     {@link RangeTypeType }
         *     
         */
        public RangeTypeType getRangeType() {
            if (rangeType == null) {
                return RangeTypeType.FLOAT;
            } else {
                return rangeType;
            }
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link RangeTypeType }
         *     
         * @see #getRangeType()
         */
        public void setRangeType(RangeTypeType value) {
            this.rangeType = value;
        }

        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChoiceRef() {
            return choiceRef;
        }

        /**
         * Sets the value of the choiceRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getChoiceRef()
         */
        public void setChoiceRef(String value) {
            this.choiceRef = value;
        }

        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         * @return
         *     possible object is
         *     {@link Float }
         *     
         */
        public Float getOrder() {
            return order;
        }

        /**
         * Sets the value of the order property.
         * 
         * @param value
         *     allowed object is
         *     {@link Float }
         *     
         * @see #getOrder()
         */
        public void setOrder(Float value) {
            this.order = value;
        }

        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         * Gets the value of the configGroups property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getConfigGroups().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * </p>
         * 
         * 
         * @return
         *     The value of the configGroups property.
         */
        public List<String> getConfigGroups() {
            if (configGroups == null) {
                configGroups = new ArrayList<>();
            }
            return this.configGroups;
        }

        /**
         * Length of the bit string, required if the format is bitString
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getBitStringLength() {
            return bitStringLength;
        }

        /**
         * Sets the value of the bitStringLength property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getBitStringLength()
         */
        public void setBitStringLength(BigInteger value) {
            this.bitStringLength = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMinimum() {
            return minimum;
        }

        /**
         * Sets the value of the minimum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMinimum()
         */
        public void setMinimum(String value) {
            this.minimum = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMaximum() {
            return maximum;
        }

        /**
         * Sets the value of the maximum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMaximum()
         */
        public void setMaximum(String value) {
            this.maximum = value;
        }

        /**
         * Determines how a property value is resolved.
         * 
         * @return
         *     possible object is
         *     {@link ResolveType }
         *     
         */
        public ResolveType getResolve() {
            if (resolve == null) {
                return ResolveType.IMMEDIATE;
            } else {
                return resolve;
            }
        }

        /**
         * Sets the value of the resolve property.
         * 
         * @param value
         *     allowed object is
         *     {@link ResolveType }
         *     
         * @see #getResolve()
         */
        public void setResolve(ResolveType value) {
            this.resolve = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDependency() {
            return dependency;
        }

        /**
         * Sets the value of the dependency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDependency()
         */
        public void setDependency(String value) {
            this.dependency = value;
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

    }

}
