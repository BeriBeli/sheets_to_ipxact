//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="name">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
 *         <element name="languageTools" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="fileBuilder" maxOccurs="unbounded" minOccurs="0">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType"/>
 *                             <element name="command">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element name="flags" minOccurs="0">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element name="replaceDefaultFlags" minOccurs="0">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *                           </sequence>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="linker" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="linkerFlags" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="linkerCommandFile" minOccurs="0">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <element name="name">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element name="commandLineSwitch">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element name="enable">
 *                               <complexType>
 *                                 <simpleContent>
 *                                   <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
 *                                     <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
 *                                   </extension>
 *                                 </simpleContent>
 *                               </complexType>
 *                             </element>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorRef" maxOccurs="unbounded" minOccurs="0"/>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *                           </sequence>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="fileSetRefGroup" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef" maxOccurs="unbounded"/>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       <attribute name="imageType" type="{http://www.w3.org/2001/XMLSchema}Name" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "description",
    "parameters",
    "languageTools",
    "fileSetRefGroup",
    "vendorExtensions"
})
@XmlRootElement(name = "executableImage")
public class ExecutableImage {

    /**
     * Name of the executable image file.
     * 
     */
    @XmlElement(required = true)
    protected ExecutableImage.Name name;
    /**
     * String for describing this executable image to users
     * 
     */
    protected String description;
    /**
     * Additional information about the load module, e.g. stack base addresses, table addresses, etc.
     * 
     */
    protected Parameters parameters;
    /**
     * Default commands and flags for software language tools needed to build the executable image.
     * 
     */
    protected ExecutableImage.LanguageTools languageTools;
    /**
     * Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.
     * 
     */
    protected ExecutableImage.FileSetRefGroup fileSetRefGroup;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * Unique ID for the executableImage, referenced in fileSet/function/fileRef
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    /**
     * Open element to describe the type of image. The contents is model and/or generator specific.
     * 
     */
    @XmlAttribute(name = "imageType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String imageType;

    /**
     * Name of the executable image file.
     * 
     * @return
     *     possible object is
     *     {@link ExecutableImage.Name }
     *     
     */
    public ExecutableImage.Name getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExecutableImage.Name }
     *     
     * @see #getName()
     */
    public void setName(ExecutableImage.Name value) {
        this.name = value;
    }

    /**
     * String for describing this executable image to users
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Additional information about the load module, e.g. stack base addresses, table addresses, etc.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Default commands and flags for software language tools needed to build the executable image.
     * 
     * @return
     *     possible object is
     *     {@link ExecutableImage.LanguageTools }
     *     
     */
    public ExecutableImage.LanguageTools getLanguageTools() {
        return languageTools;
    }

    /**
     * Sets the value of the languageTools property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExecutableImage.LanguageTools }
     *     
     * @see #getLanguageTools()
     */
    public void setLanguageTools(ExecutableImage.LanguageTools value) {
        this.languageTools = value;
    }

    /**
     * Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.
     * 
     * @return
     *     possible object is
     *     {@link ExecutableImage.FileSetRefGroup }
     *     
     */
    public ExecutableImage.FileSetRefGroup getFileSetRefGroup() {
        return fileSetRefGroup;
    }

    /**
     * Sets the value of the fileSetRefGroup property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExecutableImage.FileSetRefGroup }
     *     
     * @see #getFileSetRefGroup()
     */
    public void setFileSetRefGroup(ExecutableImage.FileSetRefGroup value) {
        this.fileSetRefGroup = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * Unique ID for the executableImage, referenced in fileSet/function/fileRef
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Open element to describe the type of image. The contents is model and/or generator specific.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getImageType() {
        return imageType;
    }

    /**
     * Sets the value of the imageType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getImageType()
     */
    public void setImageType(String value) {
        this.imageType = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef" maxOccurs="unbounded"/>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fileSetRef"
    })
    public static class FileSetRefGroup {

        /**
         * A reference to a fileSet.
         * 
         */
        @XmlElement(required = true)
        protected List<FileSetRef> fileSetRef;

        /**
         * A reference to a fileSet.
         * 
         * Gets the value of the fileSetRef property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fileSetRef property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getFileSetRef().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FileSetRef }
         * </p>
         * 
         * 
         * @return
         *     The value of the fileSetRef property.
         */
        public List<FileSetRef> getFileSetRef() {
            if (fileSetRef == null) {
                fileSetRef = new ArrayList<>();
            }
            return this.fileSetRef;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="fileBuilder" maxOccurs="unbounded" minOccurs="0">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType"/>
     *                   <element name="command">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element name="flags" minOccurs="0">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element name="replaceDefaultFlags" minOccurs="0">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *         <element name="linker" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="linkerFlags" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="linkerCommandFile" minOccurs="0">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element name="name">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element name="commandLineSwitch">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element name="enable">
     *                     <complexType>
     *                       <simpleContent>
     *                         <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
     *                         </extension>
     *                       </simpleContent>
     *                     </complexType>
     *                   </element>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorRef" maxOccurs="unbounded" minOccurs="0"/>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fileBuilder",
        "linker",
        "linkerFlags",
        "linkerCommandFile"
    })
    public static class LanguageTools {

        /**
         * A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.
         * 
         */
        protected List<ExecutableImage.LanguageTools.FileBuilder> fileBuilder;
        protected ExecutableImage.LanguageTools.Linker linker;
        protected ExecutableImage.LanguageTools.LinkerFlags linkerFlags;
        /**
         * Specifies a linker command file.
         * 
         */
        protected ExecutableImage.LanguageTools.LinkerCommandFile linkerCommandFile;

        /**
         * A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.
         * 
         * Gets the value of the fileBuilder property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fileBuilder property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getFileBuilder().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ExecutableImage.LanguageTools.FileBuilder }
         * </p>
         * 
         * 
         * @return
         *     The value of the fileBuilder property.
         */
        public List<ExecutableImage.LanguageTools.FileBuilder> getFileBuilder() {
            if (fileBuilder == null) {
                fileBuilder = new ArrayList<>();
            }
            return this.fileBuilder;
        }

        /**
         * Gets the value of the linker property.
         * 
         * @return
         *     possible object is
         *     {@link ExecutableImage.LanguageTools.Linker }
         *     
         */
        public ExecutableImage.LanguageTools.Linker getLinker() {
            return linker;
        }

        /**
         * Sets the value of the linker property.
         * 
         * @param value
         *     allowed object is
         *     {@link ExecutableImage.LanguageTools.Linker }
         *     
         */
        public void setLinker(ExecutableImage.LanguageTools.Linker value) {
            this.linker = value;
        }

        /**
         * Gets the value of the linkerFlags property.
         * 
         * @return
         *     possible object is
         *     {@link ExecutableImage.LanguageTools.LinkerFlags }
         *     
         */
        public ExecutableImage.LanguageTools.LinkerFlags getLinkerFlags() {
            return linkerFlags;
        }

        /**
         * Sets the value of the linkerFlags property.
         * 
         * @param value
         *     allowed object is
         *     {@link ExecutableImage.LanguageTools.LinkerFlags }
         *     
         */
        public void setLinkerFlags(ExecutableImage.LanguageTools.LinkerFlags value) {
            this.linkerFlags = value;
        }

        /**
         * Specifies a linker command file.
         * 
         * @return
         *     possible object is
         *     {@link ExecutableImage.LanguageTools.LinkerCommandFile }
         *     
         */
        public ExecutableImage.LanguageTools.LinkerCommandFile getLinkerCommandFile() {
            return linkerCommandFile;
        }

        /**
         * Sets the value of the linkerCommandFile property.
         * 
         * @param value
         *     allowed object is
         *     {@link ExecutableImage.LanguageTools.LinkerCommandFile }
         *     
         * @see #getLinkerCommandFile()
         */
        public void setLinkerCommandFile(ExecutableImage.LanguageTools.LinkerCommandFile value) {
            this.linkerCommandFile = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType"/>
         *         <element name="command">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element name="flags" minOccurs="0">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element name="replaceDefaultFlags" minOccurs="0">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "fileType",
            "userFileType",
            "command",
            "flags",
            "replaceDefaultFlags",
            "vendorExtensions"
        })
        public static class FileBuilder {

            /**
             * Enumerated file types known by IP-XACT.
             * 
             */
            protected String fileType;
            /**
             * Free form file type, not - yet - known by IP-XACT .
             * 
             */
            protected String userFileType;
            /**
             * Default command used to build files of the specified fileType.
             * 
             */
            @XmlElement(required = true)
            protected ExecutableImage.LanguageTools.FileBuilder.Command command;
            /**
             * Flags given to the build command when building files of this type.
             * 
             */
            protected ExecutableImage.LanguageTools.FileBuilder.Flags flags;
            /**
             * If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.
             * 
             * If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.
             * 
             */
            protected ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags replaceDefaultFlags;
            /**
             * Container for vendor specific extensions.
             * 
             */
            protected VendorExtensions vendorExtensions;

            /**
             * Enumerated file types known by IP-XACT.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getFileType() {
                return fileType;
            }

            /**
             * Sets the value of the fileType property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getFileType()
             */
            public void setFileType(String value) {
                this.fileType = value;
            }

            /**
             * Free form file type, not - yet - known by IP-XACT .
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getUserFileType() {
                return userFileType;
            }

            /**
             * Sets the value of the userFileType property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getUserFileType()
             */
            public void setUserFileType(String value) {
                this.userFileType = value;
            }

            /**
             * Default command used to build files of the specified fileType.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.Command }
             *     
             */
            public ExecutableImage.LanguageTools.FileBuilder.Command getCommand() {
                return command;
            }

            /**
             * Sets the value of the command property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.Command }
             *     
             * @see #getCommand()
             */
            public void setCommand(ExecutableImage.LanguageTools.FileBuilder.Command value) {
                this.command = value;
            }

            /**
             * Flags given to the build command when building files of this type.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.Flags }
             *     
             */
            public ExecutableImage.LanguageTools.FileBuilder.Flags getFlags() {
                return flags;
            }

            /**
             * Sets the value of the flags property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.Flags }
             *     
             * @see #getFlags()
             */
            public void setFlags(ExecutableImage.LanguageTools.FileBuilder.Flags value) {
                this.flags = value;
            }

            /**
             * If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.
             * 
             * If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags }
             *     
             */
            public ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags getReplaceDefaultFlags() {
                return replaceDefaultFlags;
            }

            /**
             * Sets the value of the replaceDefaultFlags property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags }
             *     
             * @see #getReplaceDefaultFlags()
             */
            public void setReplaceDefaultFlags(ExecutableImage.LanguageTools.FileBuilder.ReplaceDefaultFlags value) {
                this.replaceDefaultFlags = value;
            }

            /**
             * Container for vendor specific extensions.
             * 
             * @return
             *     possible object is
             *     {@link VendorExtensions }
             *     
             */
            public VendorExtensions getVendorExtensions() {
                return vendorExtensions;
            }

            /**
             * Sets the value of the vendorExtensions property.
             * 
             * @param value
             *     allowed object is
             *     {@link VendorExtensions }
             *     
             * @see #getVendorExtensions()
             */
            public void setVendorExtensions(VendorExtensions value) {
                this.vendorExtensions = value;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Command {

                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * Gets the value of the value property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.STRING;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Flags {

                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * Gets the value of the value property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.STRING;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class ReplaceDefaultFlags {

                @XmlValue
                protected boolean value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * Gets the value of the value property.
                 * 
                 */
                public boolean isValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 */
                public void setValue(boolean value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.BOOL;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.INT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Linker {

            @XmlValue
            protected String value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.STRING;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="name">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element name="commandLineSwitch">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element name="enable">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorRef" maxOccurs="unbounded" minOccurs="0"/>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "name",
            "commandLineSwitch",
            "enable",
            "generatorRef",
            "vendorExtensions"
        })
        public static class LinkerCommandFile {

            /**
             * Linker command file name.
             * 
             */
            @XmlElement(required = true)
            protected ExecutableImage.LanguageTools.LinkerCommandFile.Name name;
            /**
             * The command line switch to specify the linker command file.
             * 
             */
            @XmlElement(required = true)
            protected ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch commandLineSwitch;
            /**
             * Specifies whether to generate and enable the linker command file.
             * 
             */
            @XmlElement(required = true)
            protected ExecutableImage.LanguageTools.LinkerCommandFile.Enable enable;
            /**
             * A reference to a generator element.
             * 
             */
            protected List<String> generatorRef;
            /**
             * Container for vendor specific extensions.
             * 
             */
            protected VendorExtensions vendorExtensions;

            /**
             * Linker command file name.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.Name }
             *     
             */
            public ExecutableImage.LanguageTools.LinkerCommandFile.Name getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.Name }
             *     
             * @see #getName()
             */
            public void setName(ExecutableImage.LanguageTools.LinkerCommandFile.Name value) {
                this.name = value;
            }

            /**
             * The command line switch to specify the linker command file.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch }
             *     
             */
            public ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch getCommandLineSwitch() {
                return commandLineSwitch;
            }

            /**
             * Sets the value of the commandLineSwitch property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch }
             *     
             * @see #getCommandLineSwitch()
             */
            public void setCommandLineSwitch(ExecutableImage.LanguageTools.LinkerCommandFile.CommandLineSwitch value) {
                this.commandLineSwitch = value;
            }

            /**
             * Specifies whether to generate and enable the linker command file.
             * 
             * @return
             *     possible object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.Enable }
             *     
             */
            public ExecutableImage.LanguageTools.LinkerCommandFile.Enable getEnable() {
                return enable;
            }

            /**
             * Sets the value of the enable property.
             * 
             * @param value
             *     allowed object is
             *     {@link ExecutableImage.LanguageTools.LinkerCommandFile.Enable }
             *     
             * @see #getEnable()
             */
            public void setEnable(ExecutableImage.LanguageTools.LinkerCommandFile.Enable value) {
                this.enable = value;
            }

            /**
             * A reference to a generator element.
             * 
             * Gets the value of the generatorRef property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the generatorRef property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getGeneratorRef().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the generatorRef property.
             */
            public List<String> getGeneratorRef() {
                if (generatorRef == null) {
                    generatorRef = new ArrayList<>();
                }
                return this.generatorRef;
            }

            /**
             * Container for vendor specific extensions.
             * 
             * @return
             *     possible object is
             *     {@link VendorExtensions }
             *     
             */
            public VendorExtensions getVendorExtensions() {
                return vendorExtensions;
            }

            /**
             * Sets the value of the vendorExtensions property.
             * 
             * @param value
             *     allowed object is
             *     {@link VendorExtensions }
             *     
             * @see #getVendorExtensions()
             */
            public void setVendorExtensions(VendorExtensions value) {
                this.vendorExtensions = value;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class CommandLineSwitch {

                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * Gets the value of the value property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.STRING;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Enable {

                @XmlValue
                protected boolean value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * Gets the value of the value property.
                 * 
                 */
                public boolean isValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 */
                public void setValue(boolean value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.BOOL;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.INT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Name {

                /**
                 * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
                 * 
                 */
                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getValue()
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.STRING;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class LinkerFlags {

            @XmlValue
            protected String value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.STRING;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Name {

        /**
         * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
         * 
         */
        @XmlValue
        protected String value;

        /**
         * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getValue()
         */
        public void setValue(String value) {
            this.value = value;
        }

    }

}
