//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * This is an indication on the formatof the value for user defined properties.  bitString means either a double quoted string of 1's an 0's or a scaledInteger number. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
 * 
 * <p>Java class for formatType</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * <pre>{@code
 * <simpleType name="formatType">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     <enumeration value="bitString"/>
 *     <enumeration value="bool"/>
 *     <enumeration value="float"/>
 *     <enumeration value="long"/>
 *     <enumeration value="string"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "formatType")
@XmlEnum
public enum FormatType {

    @XmlEnumValue("bitString")
    BIT_STRING("bitString"),
    @XmlEnumValue("bool")
    BOOL("bool"),
    @XmlEnumValue("float")
    FLOAT("float"),
    @XmlEnumValue("long")
    LONG("long"),
    @XmlEnumValue("string")
    STRING("string");
    private final String value;

    FormatType(String v) {
        value = v;
    }

    /**
     * Gets the value associated to the enum constant.
     * 
     * @return
     *     The value linked to the enum.
     */
    public String value() {
        return value;
    }

    /**
     * Gets the enum associated to the value passed as parameter.
     * 
     * @param v
     *     The value to get the enum from.
     * @return
     *     The enum which corresponds to the value, if it exists.
     * @throws IllegalArgumentException
     *     If no value matches in the enum declaration.
     */
    public static FormatType fromValue(String v) {
        for (FormatType c: FormatType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
