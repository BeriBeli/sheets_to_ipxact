//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2009;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}versionedIdentifier"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentInstances" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interconnections" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}adHocConnections" minOccurs="0"/>
 *         <element name="hierConnections" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="hierConnection" maxOccurs="unbounded">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <element name="interface" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface"/>
 *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *                           </sequence>
 *                           <attribute name="interfaceRef" use="required" type="{http://www.w3.org/2001/XMLSchema}Name" />
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "vendor",
    "library",
    "name",
    "version",
    "componentInstances",
    "interconnections",
    "adHocConnections",
    "hierConnections",
    "description",
    "vendorExtensions"
})
@XmlRootElement(name = "design")
public class Design {

    /**
     * Name of the vendor who supplies this file.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String vendor;
    /**
     * Name of the logical library this element belongs to.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String library;
    /**
     * The name of the object.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NMTOKEN")
    protected String name;
    /**
     * Indicates the version of the named element.
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NMTOKEN")
    protected String version;
    /**
     * Sub instances of internal components.
     * 
     */
    protected ComponentInstances componentInstances;
    /**
     * Connections between internal sub components.
     * 
     */
    protected Interconnections interconnections;
    /**
     * Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).
     * 
     */
    protected AdHocConnections adHocConnections;
    /**
     * A list of hierarchy connections between bus interfaces on component instances and the bus interfaces on the encompassing component.
     * 
     */
    protected Design.HierConnections hierConnections;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;

    /**
     * Name of the vendor who supplies this file.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVendor() {
        return vendor;
    }

    /**
     * Sets the value of the vendor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getVendor()
     */
    public void setVendor(String value) {
        this.vendor = value;
    }

    /**
     * Name of the logical library this element belongs to.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLibrary() {
        return library;
    }

    /**
     * Sets the value of the library property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getLibrary()
     */
    public void setLibrary(String value) {
        this.library = value;
    }

    /**
     * The name of the object.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Indicates the version of the named element.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getVersion()
     */
    public void setVersion(String value) {
        this.version = value;
    }

    /**
     * Sub instances of internal components.
     * 
     * @return
     *     possible object is
     *     {@link ComponentInstances }
     *     
     */
    public ComponentInstances getComponentInstances() {
        return componentInstances;
    }

    /**
     * Sets the value of the componentInstances property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComponentInstances }
     *     
     * @see #getComponentInstances()
     */
    public void setComponentInstances(ComponentInstances value) {
        this.componentInstances = value;
    }

    /**
     * Connections between internal sub components.
     * 
     * @return
     *     possible object is
     *     {@link Interconnections }
     *     
     */
    public Interconnections getInterconnections() {
        return interconnections;
    }

    /**
     * Sets the value of the interconnections property.
     * 
     * @param value
     *     allowed object is
     *     {@link Interconnections }
     *     
     * @see #getInterconnections()
     */
    public void setInterconnections(Interconnections value) {
        this.interconnections = value;
    }

    /**
     * Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).
     * 
     * @return
     *     possible object is
     *     {@link AdHocConnections }
     *     
     */
    public AdHocConnections getAdHocConnections() {
        return adHocConnections;
    }

    /**
     * Sets the value of the adHocConnections property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdHocConnections }
     *     
     * @see #getAdHocConnections()
     */
    public void setAdHocConnections(AdHocConnections value) {
        this.adHocConnections = value;
    }

    /**
     * A list of hierarchy connections between bus interfaces on component instances and the bus interfaces on the encompassing component.
     * 
     * @return
     *     possible object is
     *     {@link Design.HierConnections }
     *     
     */
    public Design.HierConnections getHierConnections() {
        return hierConnections;
    }

    /**
     * Sets the value of the hierConnections property.
     * 
     * @param value
     *     allowed object is
     *     {@link Design.HierConnections }
     *     
     * @see #getHierConnections()
     */
    public void setHierConnections(Design.HierConnections value) {
        this.hierConnections = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="hierConnection" maxOccurs="unbounded">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element name="interface" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface"/>
     *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *                 </sequence>
     *                 <attribute name="interfaceRef" use="required" type="{http://www.w3.org/2001/XMLSchema}Name" />
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "hierConnection"
    })
    public static class HierConnections {

        /**
         * Represents a hierarchy connection
         * 
         */
        @XmlElement(required = true)
        protected List<Design.HierConnections.HierConnection> hierConnection;

        /**
         * Represents a hierarchy connection
         * 
         * Gets the value of the hierConnection property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the hierConnection property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getHierConnection().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Design.HierConnections.HierConnection }
         * </p>
         * 
         * 
         * @return
         *     The value of the hierConnection property.
         */
        public List<Design.HierConnections.HierConnection> getHierConnection() {
            if (hierConnection == null) {
                hierConnection = new ArrayList<>();
            }
            return this.hierConnection;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="interface" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface"/>
         *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
         *       </sequence>
         *       <attribute name="interfaceRef" use="required" type="{http://www.w3.org/2001/XMLSchema}Name" />
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "_interface",
            "vendorExtensions"
        })
        public static class HierConnection {

            /**
             * Component and bus reference to export to the upper level component.
             * 
             * The componentRef and busRef attributes indicate the instance name and bus interface name (active or monitor) of the hierachical connection.
             * 
             */
            @XmlElement(name = "interface", required = true)
            protected Interface _interface;
            /**
             * Container for vendor specific extensions.
             * 
             */
            protected VendorExtensions vendorExtensions;
            /**
             * This is the name of the bus interface on the upper level component.
             * 
             */
            @XmlAttribute(name = "interfaceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", required = true)
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String interfaceRef;

            /**
             * Component and bus reference to export to the upper level component.
             * 
             * The componentRef and busRef attributes indicate the instance name and bus interface name (active or monitor) of the hierachical connection.
             * 
             * @return
             *     possible object is
             *     {@link Interface }
             *     
             */
            public Interface getInterface() {
                return _interface;
            }

            /**
             * Sets the value of the interface property.
             * 
             * @param value
             *     allowed object is
             *     {@link Interface }
             *     
             * @see #getInterface()
             */
            public void setInterface(Interface value) {
                this._interface = value;
            }

            /**
             * Container for vendor specific extensions.
             * 
             * @return
             *     possible object is
             *     {@link VendorExtensions }
             *     
             */
            public VendorExtensions getVendorExtensions() {
                return vendorExtensions;
            }

            /**
             * Sets the value of the vendorExtensions property.
             * 
             * @param value
             *     allowed object is
             *     {@link VendorExtensions }
             *     
             * @see #getVendorExtensions()
             */
            public void setVendorExtensions(VendorExtensions value) {
                this.vendorExtensions = value;
            }

            /**
             * This is the name of the bus interface on the upper level component.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getInterfaceRef() {
                return interfaceRef;
            }

            /**
             * Sets the value of the interfaceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getInterfaceRef()
             */
            public void setInterfaceRef(String value) {
                this.interfaceRef = value;
            }

        }

    }

}
