//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2014;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlType;


/**
 * A constraint on the values that can be written to this field. Absence of this element implies that any value that fits can be written to it.
 * 
 * <p>Java class for writeValueConstraintType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="writeValueConstraintType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <choice>
 *         <element name="writeAsRead" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         <element name="useEnumeratedValues" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         <sequence>
 *           <element name="minimum" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}unsignedBitVectorExpression"/>
 *           <element name="maximum" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}unsignedBitVectorExpression"/>
 *         </sequence>
 *       </choice>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "writeValueConstraintType", propOrder = {
    "writeAsRead",
    "useEnumeratedValues",
    "minimum",
    "maximum"
})
public class WriteValueConstraintType {

    /**
     * writeAsRead indicates that only a value immediately read before a write is a legal value to be written.
     * 
     */
    protected Boolean writeAsRead;
    /**
     * useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.
     * 
     */
    protected Boolean useEnumeratedValues;
    /**
     * The minimum legal value that may be written to a field
     * 
     */
    protected UnsignedBitVectorExpression minimum;
    /**
     * The maximum legal value that may be written to a field
     * 
     */
    protected UnsignedBitVectorExpression maximum;

    /**
     * writeAsRead indicates that only a value immediately read before a write is a legal value to be written.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isWriteAsRead() {
        return writeAsRead;
    }

    /**
     * Sets the value of the writeAsRead property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isWriteAsRead()
     */
    public void setWriteAsRead(Boolean value) {
        this.writeAsRead = value;
    }

    /**
     * useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUseEnumeratedValues() {
        return useEnumeratedValues;
    }

    /**
     * Sets the value of the useEnumeratedValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isUseEnumeratedValues()
     */
    public void setUseEnumeratedValues(Boolean value) {
        this.useEnumeratedValues = value;
    }

    /**
     * The minimum legal value that may be written to a field
     * 
     * @return
     *     possible object is
     *     {@link UnsignedBitVectorExpression }
     *     
     */
    public UnsignedBitVectorExpression getMinimum() {
        return minimum;
    }

    /**
     * Sets the value of the minimum property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnsignedBitVectorExpression }
     *     
     * @see #getMinimum()
     */
    public void setMinimum(UnsignedBitVectorExpression value) {
        this.minimum = value;
    }

    /**
     * The maximum legal value that may be written to a field
     * 
     * @return
     *     possible object is
     *     {@link UnsignedBitVectorExpression }
     *     
     */
    public UnsignedBitVectorExpression getMaximum() {
        return maximum;
    }

    /**
     * Sets the value of the maximum property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnsignedBitVectorExpression }
     *     
     * @see #getMaximum()
     */
    public void setMaximum(UnsignedBitVectorExpression value) {
        this.maximum = value;
    }

}
