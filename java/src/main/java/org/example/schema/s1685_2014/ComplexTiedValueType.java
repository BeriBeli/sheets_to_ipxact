//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.example.schema.s1685_2014;

import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;


/**
 * An unsigned longint expression that resolves to the value set {0, 1, ...} or open or default.  It is derived from longintExpression and it supports an expression value.
 * 
 * <p>Java class for complexTiedValueType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="complexTiedValueType">
 *   <simpleContent>
 *     <extension base="<http://www.accellera.org/XMLSchema/IPXACT/1685-2014>simpleTiedValueType">
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}any.att"/>
 *       <attribute name="minimum" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       <attribute name="maximum" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </extension>
 *   </simpleContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "complexTiedValueType", propOrder = {
    "value"
})
public class ComplexTiedValueType {

    @XmlValue
    protected String value;
    /**
     * For elements which can be specified using expression which are supposed to be resolved to a long value, this indicates the minimum value allowed.
     * 
     */
    @XmlAttribute(name = "minimum")
    protected Integer minimum;
    /**
     * For elements which can be specified using expression which are supposed to be resolved to a long value, this indicates the maximum value allowed.
     * 
     */
    @XmlAttribute(name = "maximum")
    protected Integer maximum;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * For elements which can be specified using expression which are supposed to be resolved to a long value, this indicates the minimum value allowed.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMinimum() {
        return minimum;
    }

    /**
     * Sets the value of the minimum property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     * @see #getMinimum()
     */
    public void setMinimum(Integer value) {
        this.minimum = value;
    }

    /**
     * For elements which can be specified using expression which are supposed to be resolved to a long value, this indicates the maximum value allowed.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaximum() {
        return maximum;
    }

    /**
     * Sets the value of the maximum property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     * @see #getMaximum()
     */
    public void setMaximum(Integer value) {
        this.maximum = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
