//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroupPort"/>
 *         <element name="internalPortReference" maxOccurs="unbounded">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <attribute name="componentRef" use="required" type="{http://www.w3.org/2001/XMLSchema}Name" />
 *                 <attribute name="portRef" use="required" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName" />
 *                 <attribute name="left" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *                 <attribute name="right" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="externalPortReference" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <attribute name="portRef" use="required" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName" />
 *                 <attribute name="left" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *                 <attribute name="right" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *       <attribute name="tiedValue" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "displayName",
    "description",
    "internalPortReference",
    "externalPortReference"
})
@XmlRootElement(name = "adHocConnection")
public class AdHocConnection {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Defines a reference to a port on a component contained within the design.
     * 
     */
    @XmlElement(required = true)
    protected List<AdHocConnection.InternalPortReference> internalPortReference;
    /**
     * Defines a reference to a port on the component containing this design. The portRef attribute indicates the name of the port in the containing component.
     * 
     */
    protected List<AdHocConnection.ExternalPortReference> externalPortReference;
    /**
     * The logic value of this connection. Only valid for ports of style wire.
     * 
     */
    @XmlAttribute(name = "tiedValue", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    protected String tiedValue;

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Defines a reference to a port on a component contained within the design.
     * 
     * Gets the value of the internalPortReference property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the internalPortReference property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getInternalPortReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdHocConnection.InternalPortReference }
     * </p>
     * 
     * 
     * @return
     *     The value of the internalPortReference property.
     */
    public List<AdHocConnection.InternalPortReference> getInternalPortReference() {
        if (internalPortReference == null) {
            internalPortReference = new ArrayList<>();
        }
        return this.internalPortReference;
    }

    /**
     * Defines a reference to a port on the component containing this design. The portRef attribute indicates the name of the port in the containing component.
     * 
     * Gets the value of the externalPortReference property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the externalPortReference property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getExternalPortReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdHocConnection.ExternalPortReference }
     * </p>
     * 
     * 
     * @return
     *     The value of the externalPortReference property.
     */
    public List<AdHocConnection.ExternalPortReference> getExternalPortReference() {
        if (externalPortReference == null) {
            externalPortReference = new ArrayList<>();
        }
        return this.externalPortReference;
    }

    /**
     * The logic value of this connection. Only valid for ports of style wire.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTiedValue() {
        return tiedValue;
    }

    /**
     * Sets the value of the tiedValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getTiedValue()
     */
    public void setTiedValue(String value) {
        this.tiedValue = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <attribute name="portRef" use="required" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName" />
     *       <attribute name="left" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
     *       <attribute name="right" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ExternalPortReference {

        /**
         * A port on the top level component.
         * 
         */
        @XmlAttribute(name = "portRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", required = true)
        protected String portRef;
        /**
         * Left index of a vector.
         * 
         */
        @XmlAttribute(name = "left", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger left;
        /**
         * Right index of a vector.
         * 
         */
        @XmlAttribute(name = "right", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger right;

        /**
         * A port on the top level component.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPortRef() {
            return portRef;
        }

        /**
         * Sets the value of the portRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPortRef()
         */
        public void setPortRef(String value) {
            this.portRef = value;
        }

        /**
         * Left index of a vector.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getLeft() {
            return left;
        }

        /**
         * Sets the value of the left property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getLeft()
         */
        public void setLeft(BigInteger value) {
            this.left = value;
        }

        /**
         * Right index of a vector.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getRight() {
            return right;
        }

        /**
         * Sets the value of the right property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getRight()
         */
        public void setRight(BigInteger value) {
            this.right = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <attribute name="componentRef" use="required" type="{http://www.w3.org/2001/XMLSchema}Name" />
     *       <attribute name="portRef" use="required" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName" />
     *       <attribute name="left" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
     *       <attribute name="right" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class InternalPortReference {

        /**
         * A reference to the instanceName element of a component in this design.
         * 
         */
        @XmlAttribute(name = "componentRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String componentRef;
        /**
         * A port on the on the referenced component from componentRef.
         * 
         */
        @XmlAttribute(name = "portRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", required = true)
        protected String portRef;
        /**
         * Left index of a vector.
         * 
         */
        @XmlAttribute(name = "left", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger left;
        /**
         * Right index of a vector.
         * 
         */
        @XmlAttribute(name = "right", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger right;

        /**
         * A reference to the instanceName element of a component in this design.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getComponentRef() {
            return componentRef;
        }

        /**
         * Sets the value of the componentRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getComponentRef()
         */
        public void setComponentRef(String value) {
            this.componentRef = value;
        }

        /**
         * A port on the on the referenced component from componentRef.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPortRef() {
            return portRef;
        }

        /**
         * Sets the value of the portRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPortRef()
         */
        public void setPortRef(String value) {
            this.portRef = value;
        }

        /**
         * Left index of a vector.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getLeft() {
            return left;
        }

        /**
         * Sets the value of the left property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getLeft()
         */
        public void setLeft(BigInteger value) {
            this.left = value;
        }

        /**
         * Right index of a vector.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getRight() {
            return right;
        }

        /**
         * Sets the value of the right property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getRight()
         */
        public void setRight(BigInteger value) {
            this.right = value;
        }

    }

}
