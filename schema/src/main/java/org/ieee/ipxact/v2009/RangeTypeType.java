//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * This type is used to indicate how the minimum and maximum attributes values should be interpreted. For purposes of this attribute, an int is 4 bytes and a long is 8 bytes.
 * 
 * <p>Java class for rangeTypeType</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * <pre>{@code
 * <simpleType name="rangeTypeType">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     <enumeration value="float"/>
 *     <enumeration value="int"/>
 *     <enumeration value="unsigned int"/>
 *     <enumeration value="long"/>
 *     <enumeration value="unsigned long"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "rangeTypeType")
@XmlEnum
public enum RangeTypeType {

    @XmlEnumValue("float")
    FLOAT("float"),
    @XmlEnumValue("int")
    INT("int"),
    @XmlEnumValue("unsigned int")
    UNSIGNED_INT("unsigned int"),
    @XmlEnumValue("long")
    LONG("long"),
    @XmlEnumValue("unsigned long")
    UNSIGNED_LONG("unsigned long");
    private final String value;

    RangeTypeType(String v) {
        value = v;
    }

    /**
     * Gets the value associated to the enum constant.
     * 
     * @return
     *     The value linked to the enum.
     */
    public String value() {
        return value;
    }

    /**
     * Gets the enum associated to the value passed as parameter.
     * 
     * @param v
     *     The value to get the enum from.
     * @return
     *     The enum which corresponds to the value, if it exists.
     * @throws IllegalArgumentException
     *     If no value matches in the enum declaration.
     */
    public static RangeTypeType fromValue(String v) {
        for (RangeTypeType c: RangeTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
