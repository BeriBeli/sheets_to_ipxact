//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
 *         <element name="dim" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="addressOffset" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerFileDefinitionGroup"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "displayName",
    "description",
    "dim",
    "addressOffset",
    "typeIdentifier",
    "range",
    "register",
    "registerFile",
    "parameters",
    "vendorExtensions"
})
@XmlRootElement(name = "registerFile")
public class RegisterFile {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.
     * 
     */
    @XmlSchemaType(name = "nonNegativeInteger")
    protected List<BigInteger> dim;
    /**
     * Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.
     * 
     */
    @XmlElement(required = true)
    protected String addressOffset;
    /**
     * Identifier name used to indicate that multiple registerFile elements contain the exact same information except for the elements in the registerFileInstanceGroup.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String typeIdentifier;
    /**
     * The range of a register file.  Expressed as the number of addressable units accessible to the block. Specified in units of addressUnitBits.
     * 
     */
    @XmlElement(required = true)
    protected RegisterFile.Range range;
    /**
     * A single register
     * 
     */
    protected List<RegisterFile.Register> register;
    /**
     * A structure of registers and register files
     * 
     */
    protected List<RegisterFile> registerFile;
    /**
     * A collection of parameters.
     * 
     */
    protected Parameters parameters;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.
     * 
     * Gets the value of the dim property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dim property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getDim().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BigInteger }
     * </p>
     * 
     * 
     * @return
     *     The value of the dim property.
     */
    public List<BigInteger> getDim() {
        if (dim == null) {
            dim = new ArrayList<>();
        }
        return this.dim;
    }

    /**
     * Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAddressOffset() {
        return addressOffset;
    }

    /**
     * Sets the value of the addressOffset property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getAddressOffset()
     */
    public void setAddressOffset(String value) {
        this.addressOffset = value;
    }

    /**
     * Identifier name used to indicate that multiple registerFile elements contain the exact same information except for the elements in the registerFileInstanceGroup.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTypeIdentifier() {
        return typeIdentifier;
    }

    /**
     * Sets the value of the typeIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getTypeIdentifier()
     */
    public void setTypeIdentifier(String value) {
        this.typeIdentifier = value;
    }

    /**
     * The range of a register file.  Expressed as the number of addressable units accessible to the block. Specified in units of addressUnitBits.
     * 
     * @return
     *     possible object is
     *     {@link RegisterFile.Range }
     *     
     */
    public RegisterFile.Range getRange() {
        return range;
    }

    /**
     * Sets the value of the range property.
     * 
     * @param value
     *     allowed object is
     *     {@link RegisterFile.Range }
     *     
     * @see #getRange()
     */
    public void setRange(RegisterFile.Range value) {
        this.range = value;
    }

    /**
     * A single register
     * 
     * Gets the value of the register property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the register property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getRegister().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RegisterFile.Register }
     * </p>
     * 
     * 
     * @return
     *     The value of the register property.
     */
    public List<RegisterFile.Register> getRegister() {
        if (register == null) {
            register = new ArrayList<>();
        }
        return this.register;
    }

    /**
     * A structure of registers and register files
     * 
     * Gets the value of the registerFile property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the registerFile property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getRegisterFile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RegisterFile }
     * </p>
     * 
     * 
     * @return
     *     The value of the registerFile property.
     */
    public List<RegisterFile> getRegisterFile() {
        if (registerFile == null) {
            registerFile = new ArrayList<>();
        }
        return this.registerFile;
    }

    /**
     * A collection of parameters.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledPositiveInteger">
     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Range {

        /**
         * A scaled positive integer that consists of the value set {1, 2, ...}.  It is derived from scaledNonNegativeInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         */
        @XmlValue
        protected String value;
        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         */
        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String prompt;
        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         */
        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected FormatType format;
        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         */
        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected RangeTypeType rangeType;
        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         */
        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String choiceRef;
        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         */
        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Float order;
        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         */
        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "NMTOKENS")
        protected List<String> configGroups;
        /**
         * Length of the bit string, required if the format is bitString
         * 
         */
        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger bitStringLength;
        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         */
        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String minimum;
        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         */
        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String maximum;
        /**
         * Determines how a property value is resolved.
         * 
         */
        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected ResolveType resolve;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         */
        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String dependency;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<>();

        /**
         * A scaled positive integer that consists of the value set {1, 2, ...}.  It is derived from scaledNonNegativeInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getValue()
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPrompt() {
            return prompt;
        }

        /**
         * Sets the value of the prompt property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPrompt()
         */
        public void setPrompt(String value) {
            this.prompt = value;
        }

        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         * @return
         *     possible object is
         *     {@link FormatType }
         *     
         */
        public FormatType getFormat() {
            if (format == null) {
                return FormatType.LONG;
            } else {
                return format;
            }
        }

        /**
         * Sets the value of the format property.
         * 
         * @param value
         *     allowed object is
         *     {@link FormatType }
         *     
         * @see #getFormat()
         */
        public void setFormat(FormatType value) {
            this.format = value;
        }

        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         * @return
         *     possible object is
         *     {@link RangeTypeType }
         *     
         */
        public RangeTypeType getRangeType() {
            if (rangeType == null) {
                return RangeTypeType.FLOAT;
            } else {
                return rangeType;
            }
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link RangeTypeType }
         *     
         * @see #getRangeType()
         */
        public void setRangeType(RangeTypeType value) {
            this.rangeType = value;
        }

        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChoiceRef() {
            return choiceRef;
        }

        /**
         * Sets the value of the choiceRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getChoiceRef()
         */
        public void setChoiceRef(String value) {
            this.choiceRef = value;
        }

        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         * @return
         *     possible object is
         *     {@link Float }
         *     
         */
        public Float getOrder() {
            return order;
        }

        /**
         * Sets the value of the order property.
         * 
         * @param value
         *     allowed object is
         *     {@link Float }
         *     
         * @see #getOrder()
         */
        public void setOrder(Float value) {
            this.order = value;
        }

        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         * Gets the value of the configGroups property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getConfigGroups().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * </p>
         * 
         * 
         * @return
         *     The value of the configGroups property.
         */
        public List<String> getConfigGroups() {
            if (configGroups == null) {
                configGroups = new ArrayList<>();
            }
            return this.configGroups;
        }

        /**
         * Length of the bit string, required if the format is bitString
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getBitStringLength() {
            return bitStringLength;
        }

        /**
         * Sets the value of the bitStringLength property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getBitStringLength()
         */
        public void setBitStringLength(BigInteger value) {
            this.bitStringLength = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMinimum() {
            return minimum;
        }

        /**
         * Sets the value of the minimum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMinimum()
         */
        public void setMinimum(String value) {
            this.minimum = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMaximum() {
            return maximum;
        }

        /**
         * Sets the value of the maximum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMaximum()
         */
        public void setMaximum(String value) {
            this.maximum = value;
        }

        /**
         * Determines how a property value is resolved.
         * 
         * @return
         *     possible object is
         *     {@link ResolveType }
         *     
         */
        public ResolveType getResolve() {
            if (resolve == null) {
                return ResolveType.IMMEDIATE;
            } else {
                return resolve;
            }
        }

        /**
         * Sets the value of the resolve property.
         * 
         * @param value
         *     allowed object is
         *     {@link ResolveType }
         *     
         * @see #getResolve()
         */
        public void setResolve(ResolveType value) {
            this.resolve = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDependency() {
            return dependency;
        }

        /**
         * Sets the value of the dependency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDependency()
         */
        public void setDependency(String value) {
            this.dependency = value;
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
     *         <element name="dim" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" maxOccurs="unbounded" minOccurs="0"/>
     *         <element name="addressOffset" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger"/>
     *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerDefinitionGroup"/>
     *         <element name="alternateRegisters" minOccurs="0">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element name="alternateRegister" maxOccurs="unbounded">
     *                     <complexType>
     *                       <complexContent>
     *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           <sequence>
     *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
     *                             <element name="alternateGroups">
     *                               <complexType>
     *                                 <complexContent>
     *                                   <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                     <sequence>
     *                                       <element name="alternateGroup" type="{http://www.w3.org/2001/XMLSchema}Name" maxOccurs="unbounded"/>
     *                                     </sequence>
     *                                   </restriction>
     *                                 </complexContent>
     *                               </complexType>
     *                             </element>
     *                             <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateRegisterDefinitionGroup"/>
     *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
     *                             <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *                           </sequence>
     *                           <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
     *                         </restriction>
     *                       </complexContent>
     *                     </complexType>
     *                   </element>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
     *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
     *       </sequence>
     *       <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "name",
        "displayName",
        "description",
        "dim",
        "addressOffset",
        "typeIdentifier",
        "size",
        "_volatile",
        "access",
        "reset",
        "field",
        "alternateRegisters",
        "parameters",
        "vendorExtensions"
    })
    public static class Register {

        /**
         * Unique name
         * 
         */
        @XmlElement(required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String name;
        /**
         * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
         * 
         */
        protected String displayName;
        /**
         * Full description string, typically for documentation
         * 
         */
        protected String description;
        /**
         * Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.
         * 
         */
        @XmlSchemaType(name = "nonNegativeInteger")
        protected List<BigInteger> dim;
        /**
         * Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.
         * 
         */
        @XmlElement(required = true)
        protected String addressOffset;
        /**
         * Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the registerDefinitionGroup.
         * 
         */
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String typeIdentifier;
        /**
         * Width of the register in bits.
         * 
         */
        @XmlElement(required = true)
        protected RegisterFile.Register.Size size;
        /**
         * Indicates whether the data is volatile.
         * 
         */
        @XmlElement(name = "volatile", defaultValue = "false")
        protected Boolean _volatile;
        /**
         * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
         * 
         */
        protected AccessType access;
        /**
         * Register value at reset.
         * 
         */
        protected RegisterFile.Register.Reset reset;
        /**
         * Describes individual bit fields within the register.
         * 
         */
        protected List<FieldType> field;
        /**
         * Alternate definitions for the current register
         * 
         */
        protected RegisterFile.Register.AlternateRegisters alternateRegisters;
        /**
         * A collection of parameters.
         * 
         */
        protected Parameters parameters;
        /**
         * Container for vendor specific extensions.
         * 
         */
        protected VendorExtensions vendorExtensions;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Unique name
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getName()
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDisplayName() {
            return displayName;
        }

        /**
         * Sets the value of the displayName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDisplayName()
         */
        public void setDisplayName(String value) {
            this.displayName = value;
        }

        /**
         * Full description string, typically for documentation
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDescription() {
            return description;
        }

        /**
         * Sets the value of the description property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDescription()
         */
        public void setDescription(String value) {
            this.description = value;
        }

        /**
         * Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.
         * 
         * Gets the value of the dim property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the dim property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getDim().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link BigInteger }
         * </p>
         * 
         * 
         * @return
         *     The value of the dim property.
         */
        public List<BigInteger> getDim() {
            if (dim == null) {
                dim = new ArrayList<>();
            }
            return this.dim;
        }

        /**
         * Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAddressOffset() {
            return addressOffset;
        }

        /**
         * Sets the value of the addressOffset property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getAddressOffset()
         */
        public void setAddressOffset(String value) {
            this.addressOffset = value;
        }

        /**
         * Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the registerDefinitionGroup.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTypeIdentifier() {
            return typeIdentifier;
        }

        /**
         * Sets the value of the typeIdentifier property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getTypeIdentifier()
         */
        public void setTypeIdentifier(String value) {
            this.typeIdentifier = value;
        }

        /**
         * Width of the register in bits.
         * 
         * @return
         *     possible object is
         *     {@link RegisterFile.Register.Size }
         *     
         */
        public RegisterFile.Register.Size getSize() {
            return size;
        }

        /**
         * Sets the value of the size property.
         * 
         * @param value
         *     allowed object is
         *     {@link RegisterFile.Register.Size }
         *     
         * @see #getSize()
         */
        public void setSize(RegisterFile.Register.Size value) {
            this.size = value;
        }

        /**
         * Indicates whether the data is volatile.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isVolatile() {
            return _volatile;
        }

        /**
         * Sets the value of the volatile property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         * @see #isVolatile()
         */
        public void setVolatile(Boolean value) {
            this._volatile = value;
        }

        /**
         * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
         * 
         * @return
         *     possible object is
         *     {@link AccessType }
         *     
         */
        public AccessType getAccess() {
            return access;
        }

        /**
         * Sets the value of the access property.
         * 
         * @param value
         *     allowed object is
         *     {@link AccessType }
         *     
         * @see #getAccess()
         */
        public void setAccess(AccessType value) {
            this.access = value;
        }

        /**
         * Register value at reset.
         * 
         * @return
         *     possible object is
         *     {@link RegisterFile.Register.Reset }
         *     
         */
        public RegisterFile.Register.Reset getReset() {
            return reset;
        }

        /**
         * Sets the value of the reset property.
         * 
         * @param value
         *     allowed object is
         *     {@link RegisterFile.Register.Reset }
         *     
         * @see #getReset()
         */
        public void setReset(RegisterFile.Register.Reset value) {
            this.reset = value;
        }

        /**
         * Describes individual bit fields within the register.
         * 
         * Gets the value of the field property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the field property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getField().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FieldType }
         * </p>
         * 
         * 
         * @return
         *     The value of the field property.
         */
        public List<FieldType> getField() {
            if (field == null) {
                field = new ArrayList<>();
            }
            return this.field;
        }

        /**
         * Alternate definitions for the current register
         * 
         * @return
         *     possible object is
         *     {@link RegisterFile.Register.AlternateRegisters }
         *     
         */
        public RegisterFile.Register.AlternateRegisters getAlternateRegisters() {
            return alternateRegisters;
        }

        /**
         * Sets the value of the alternateRegisters property.
         * 
         * @param value
         *     allowed object is
         *     {@link RegisterFile.Register.AlternateRegisters }
         *     
         * @see #getAlternateRegisters()
         */
        public void setAlternateRegisters(RegisterFile.Register.AlternateRegisters value) {
            this.alternateRegisters = value;
        }

        /**
         * A collection of parameters.
         * 
         * @return
         *     possible object is
         *     {@link Parameters }
         *     
         */
        public Parameters getParameters() {
            return parameters;
        }

        /**
         * Sets the value of the parameters property.
         * 
         * @param value
         *     allowed object is
         *     {@link Parameters }
         *     
         * @see #getParameters()
         */
        public void setParameters(Parameters value) {
            this.parameters = value;
        }

        /**
         * Container for vendor specific extensions.
         * 
         * @return
         *     possible object is
         *     {@link VendorExtensions }
         *     
         */
        public VendorExtensions getVendorExtensions() {
            return vendorExtensions;
        }

        /**
         * Sets the value of the vendorExtensions property.
         * 
         * @param value
         *     allowed object is
         *     {@link VendorExtensions }
         *     
         * @see #getVendorExtensions()
         */
        public void setVendorExtensions(VendorExtensions value) {
            this.vendorExtensions = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="alternateRegister" maxOccurs="unbounded">
         *           <complexType>
         *             <complexContent>
         *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 <sequence>
         *                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
         *                   <element name="alternateGroups">
         *                     <complexType>
         *                       <complexContent>
         *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                           <sequence>
         *                             <element name="alternateGroup" type="{http://www.w3.org/2001/XMLSchema}Name" maxOccurs="unbounded"/>
         *                           </sequence>
         *                         </restriction>
         *                       </complexContent>
         *                     </complexType>
         *                   </element>
         *                   <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateRegisterDefinitionGroup"/>
         *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
         *                   <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
         *                 </sequence>
         *                 <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
         *               </restriction>
         *             </complexContent>
         *           </complexType>
         *         </element>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "alternateRegister"
        })
        public static class AlternateRegisters {

            /**
             * Alternate definition for the current register
             * 
             */
            @XmlElement(required = true)
            protected List<RegisterFile.Register.AlternateRegisters.AlternateRegister> alternateRegister;

            /**
             * Alternate definition for the current register
             * 
             * Gets the value of the alternateRegister property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the alternateRegister property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getAlternateRegister().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link RegisterFile.Register.AlternateRegisters.AlternateRegister }
             * </p>
             * 
             * 
             * @return
             *     The value of the alternateRegister property.
             */
            public List<RegisterFile.Register.AlternateRegisters.AlternateRegister> getAlternateRegister() {
                if (alternateRegister == null) {
                    alternateRegister = new ArrayList<>();
                }
                return this.alternateRegister;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <complexContent>
             *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       <sequence>
             *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
             *         <element name="alternateGroups">
             *           <complexType>
             *             <complexContent>
             *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 <sequence>
             *                   <element name="alternateGroup" type="{http://www.w3.org/2001/XMLSchema}Name" maxOccurs="unbounded"/>
             *                 </sequence>
             *               </restriction>
             *             </complexContent>
             *           </complexType>
             *         </element>
             *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateRegisterDefinitionGroup"/>
             *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters" minOccurs="0"/>
             *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
             *       </sequence>
             *       <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
             *     </restriction>
             *   </complexContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "name",
                "displayName",
                "description",
                "alternateGroups",
                "typeIdentifier",
                "_volatile",
                "access",
                "reset",
                "field",
                "parameters",
                "vendorExtensions"
            })
            public static class AlternateRegister {

                /**
                 * Unique name
                 * 
                 */
                @XmlElement(required = true)
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String name;
                /**
                 * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
                 * 
                 */
                protected String displayName;
                /**
                 * Full description string, typically for documentation
                 * 
                 */
                protected String description;
                /**
                 * Defines a list of grouping names that this register description belongs.
                 * 
                 */
                @XmlElement(required = true)
                protected RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups alternateGroups;
                /**
                 * Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the alternateRegisterDefinitionGroup.
                 * 
                 */
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String typeIdentifier;
                /**
                 * Indicates whether the data is volatile.
                 * 
                 */
                @XmlElement(name = "volatile", defaultValue = "false")
                protected Boolean _volatile;
                /**
                 * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
                 * 
                 */
                protected AccessType access;
                /**
                 * Register value at reset.
                 * 
                 */
                protected RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset reset;
                /**
                 * Describes individual bit fields within the register.
                 * 
                 */
                protected List<FieldType> field;
                /**
                 * A collection of parameters.
                 * 
                 */
                protected Parameters parameters;
                /**
                 * Container for vendor specific extensions.
                 * 
                 */
                protected VendorExtensions vendorExtensions;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;

                /**
                 * Unique name
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getName()
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDisplayName() {
                    return displayName;
                }

                /**
                 * Sets the value of the displayName property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDisplayName()
                 */
                public void setDisplayName(String value) {
                    this.displayName = value;
                }

                /**
                 * Full description string, typically for documentation
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDescription() {
                    return description;
                }

                /**
                 * Sets the value of the description property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDescription()
                 */
                public void setDescription(String value) {
                    this.description = value;
                }

                /**
                 * Defines a list of grouping names that this register description belongs.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups }
                 *     
                 */
                public RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups getAlternateGroups() {
                    return alternateGroups;
                }

                /**
                 * Sets the value of the alternateGroups property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups }
                 *     
                 * @see #getAlternateGroups()
                 */
                public void setAlternateGroups(RegisterFile.Register.AlternateRegisters.AlternateRegister.AlternateGroups value) {
                    this.alternateGroups = value;
                }

                /**
                 * Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the alternateRegisterDefinitionGroup.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getTypeIdentifier() {
                    return typeIdentifier;
                }

                /**
                 * Sets the value of the typeIdentifier property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getTypeIdentifier()
                 */
                public void setTypeIdentifier(String value) {
                    this.typeIdentifier = value;
                }

                /**
                 * Indicates whether the data is volatile.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Boolean }
                 *     
                 */
                public Boolean isVolatile() {
                    return _volatile;
                }

                /**
                 * Sets the value of the volatile property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Boolean }
                 *     
                 * @see #isVolatile()
                 */
                public void setVolatile(Boolean value) {
                    this._volatile = value;
                }

                /**
                 * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
                 * 
                 * @return
                 *     possible object is
                 *     {@link AccessType }
                 *     
                 */
                public AccessType getAccess() {
                    return access;
                }

                /**
                 * Sets the value of the access property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link AccessType }
                 *     
                 * @see #getAccess()
                 */
                public void setAccess(AccessType value) {
                    this.access = value;
                }

                /**
                 * Register value at reset.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset }
                 *     
                 */
                public RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset getReset() {
                    return reset;
                }

                /**
                 * Sets the value of the reset property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset }
                 *     
                 * @see #getReset()
                 */
                public void setReset(RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset value) {
                    this.reset = value;
                }

                /**
                 * Describes individual bit fields within the register.
                 * 
                 * Gets the value of the field property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the field property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getField().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link FieldType }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the field property.
                 */
                public List<FieldType> getField() {
                    if (field == null) {
                        field = new ArrayList<>();
                    }
                    return this.field;
                }

                /**
                 * A collection of parameters.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Parameters }
                 *     
                 */
                public Parameters getParameters() {
                    return parameters;
                }

                /**
                 * Sets the value of the parameters property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Parameters }
                 *     
                 * @see #getParameters()
                 */
                public void setParameters(Parameters value) {
                    this.parameters = value;
                }

                /**
                 * Container for vendor specific extensions.
                 * 
                 * @return
                 *     possible object is
                 *     {@link VendorExtensions }
                 *     
                 */
                public VendorExtensions getVendorExtensions() {
                    return vendorExtensions;
                }

                /**
                 * Sets the value of the vendorExtensions property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link VendorExtensions }
                 *     
                 * @see #getVendorExtensions()
                 */
                public void setVendorExtensions(VendorExtensions value) {
                    this.vendorExtensions = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="alternateGroup" type="{http://www.w3.org/2001/XMLSchema}Name" maxOccurs="unbounded"/>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "alternateGroup"
                })
                public static class AlternateGroups {

                    /**
                     * Defines a grouping name that this register description belongs.
                     * 
                     */
                    @XmlElement(required = true)
                    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                    @XmlSchemaType(name = "Name")
                    protected List<String> alternateGroup;

                    /**
                     * Defines a grouping name that this register description belongs.
                     * 
                     * Gets the value of the alternateGroup property.
                     * 
                     * <p>This accessor method returns a reference to the live list,
                     * not a snapshot. Therefore any modification you make to the
                     * returned list will be present inside the JAXB object.
                     * This is why there is not a <CODE>set</CODE> method for the alternateGroup property.</p>
                     * 
                     * <p>
                     * For example, to add a new item, do as follows:
                     * </p>
                     * <pre>
                     * getAlternateGroup().add(newItem);
                     * </pre>
                     * 
                     * 
                     * <p>
                     * Objects of the following type(s) are allowed in the list
                     * {@link String }
                     * </p>
                     * 
                     * 
                     * @return
                     *     The value of the alternateGroup property.
                     */
                    public List<String> getAlternateGroup() {
                        if (alternateGroup == null) {
                            alternateGroup = new ArrayList<>();
                        }
                        return this.alternateGroup;
                    }

                }


                /**
                 * <p>Java class for anonymous complex type</p>.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.</p>
                 * 
                 * <pre>{@code
                 * <complexType>
                 *   <complexContent>
                 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       <sequence>
                 *         <element name="value">
                 *           <complexType>
                 *             <simpleContent>
                 *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
                 *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                 *               </extension>
                 *             </simpleContent>
                 *           </complexType>
                 *         </element>
                 *         <element name="mask" minOccurs="0">
                 *           <complexType>
                 *             <simpleContent>
                 *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
                 *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                 *               </extension>
                 *             </simpleContent>
                 *           </complexType>
                 *         </element>
                 *       </sequence>
                 *     </restriction>
                 *   </complexContent>
                 * </complexType>
                 * }</pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "value",
                    "mask"
                })
                public static class Reset {

                    /**
                     * The value itself.
                     * 
                     */
                    @XmlElement(required = true)
                    protected RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value value;
                    /**
                     * Mask to be anded with the value before comparing to the reset value.
                     * 
                     */
                    protected RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask mask;

                    /**
                     * The value itself.
                     * 
                     * @return
                     *     possible object is
                     *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value }
                     *     
                     */
                    public RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value getValue() {
                        return value;
                    }

                    /**
                     * Sets the value of the value property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value }
                     *     
                     * @see #getValue()
                     */
                    public void setValue(RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Value value) {
                        this.value = value;
                    }

                    /**
                     * Mask to be anded with the value before comparing to the reset value.
                     * 
                     * @return
                     *     possible object is
                     *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask }
                     *     
                     */
                    public RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask getMask() {
                        return mask;
                    }

                    /**
                     * Sets the value of the mask property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask }
                     *     
                     * @see #getMask()
                     */
                    public void setMask(RegisterFile.Register.AlternateRegisters.AlternateRegister.Reset.Mask value) {
                        this.mask = value;
                    }


                    /**
                     * <p>Java class for anonymous complex type</p>.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.</p>
                     * 
                     * <pre>{@code
                     * <complexType>
                     *   <simpleContent>
                     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
                     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                     *     </extension>
                     *   </simpleContent>
                     * </complexType>
                     * }</pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "", propOrder = {
                        "value"
                    })
                    public static class Mask {

                        /**
                         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                         * 
                         */
                        @XmlValue
                        protected String value;
                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         */
                        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String prompt;
                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         */
                        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected FormatType format;
                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         */
                        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected RangeTypeType rangeType;
                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         */
                        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlSchemaType(name = "Name")
                        protected String choiceRef;
                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         */
                        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected Float order;
                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         */
                        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "NMTOKENS")
                        protected List<String> configGroups;
                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         */
                        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger bitStringLength;
                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         */
                        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String minimum;
                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         */
                        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String maximum;
                        /**
                         * Determines how a property value is resolved.
                         * 
                         */
                        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected ResolveType resolve;
                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         */
                        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlID
                        @XmlSchemaType(name = "ID")
                        protected String id;
                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         */
                        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String dependency;
                        @XmlAnyAttribute
                        private Map<QName, String> otherAttributes = new HashMap<>();

                        /**
                         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getValue() {
                            return value;
                        }

                        /**
                         * Sets the value of the value property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getValue()
                         */
                        public void setValue(String value) {
                            this.value = value;
                        }

                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getPrompt() {
                            return prompt;
                        }

                        /**
                         * Sets the value of the prompt property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getPrompt()
                         */
                        public void setPrompt(String value) {
                            this.prompt = value;
                        }

                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         * @return
                         *     possible object is
                         *     {@link FormatType }
                         *     
                         */
                        public FormatType getFormat() {
                            if (format == null) {
                                return FormatType.LONG;
                            } else {
                                return format;
                            }
                        }

                        /**
                         * Sets the value of the format property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link FormatType }
                         *     
                         * @see #getFormat()
                         */
                        public void setFormat(FormatType value) {
                            this.format = value;
                        }

                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         * @return
                         *     possible object is
                         *     {@link RangeTypeType }
                         *     
                         */
                        public RangeTypeType getRangeType() {
                            if (rangeType == null) {
                                return RangeTypeType.FLOAT;
                            } else {
                                return rangeType;
                            }
                        }

                        /**
                         * Sets the value of the rangeType property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link RangeTypeType }
                         *     
                         * @see #getRangeType()
                         */
                        public void setRangeType(RangeTypeType value) {
                            this.rangeType = value;
                        }

                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getChoiceRef() {
                            return choiceRef;
                        }

                        /**
                         * Sets the value of the choiceRef property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getChoiceRef()
                         */
                        public void setChoiceRef(String value) {
                            this.choiceRef = value;
                        }

                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         * @return
                         *     possible object is
                         *     {@link Float }
                         *     
                         */
                        public Float getOrder() {
                            return order;
                        }

                        /**
                         * Sets the value of the order property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link Float }
                         *     
                         * @see #getOrder()
                         */
                        public void setOrder(Float value) {
                            this.order = value;
                        }

                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         * Gets the value of the configGroups property.
                         * 
                         * <p>This accessor method returns a reference to the live list,
                         * not a snapshot. Therefore any modification you make to the
                         * returned list will be present inside the JAXB object.
                         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                         * 
                         * <p>
                         * For example, to add a new item, do as follows:
                         * </p>
                         * <pre>
                         * getConfigGroups().add(newItem);
                         * </pre>
                         * 
                         * 
                         * <p>
                         * Objects of the following type(s) are allowed in the list
                         * {@link String }
                         * </p>
                         * 
                         * 
                         * @return
                         *     The value of the configGroups property.
                         */
                        public List<String> getConfigGroups() {
                            if (configGroups == null) {
                                configGroups = new ArrayList<>();
                            }
                            return this.configGroups;
                        }

                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getBitStringLength() {
                            return bitStringLength;
                        }

                        /**
                         * Sets the value of the bitStringLength property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         * @see #getBitStringLength()
                         */
                        public void setBitStringLength(BigInteger value) {
                            this.bitStringLength = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMinimum() {
                            return minimum;
                        }

                        /**
                         * Sets the value of the minimum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMinimum()
                         */
                        public void setMinimum(String value) {
                            this.minimum = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMaximum() {
                            return maximum;
                        }

                        /**
                         * Sets the value of the maximum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMaximum()
                         */
                        public void setMaximum(String value) {
                            this.maximum = value;
                        }

                        /**
                         * Determines how a property value is resolved.
                         * 
                         * @return
                         *     possible object is
                         *     {@link ResolveType }
                         *     
                         */
                        public ResolveType getResolve() {
                            if (resolve == null) {
                                return ResolveType.IMMEDIATE;
                            } else {
                                return resolve;
                            }
                        }

                        /**
                         * Sets the value of the resolve property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link ResolveType }
                         *     
                         * @see #getResolve()
                         */
                        public void setResolve(ResolveType value) {
                            this.resolve = value;
                        }

                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getId() {
                            return id;
                        }

                        /**
                         * Sets the value of the id property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getId()
                         */
                        public void setId(String value) {
                            this.id = value;
                        }

                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getDependency() {
                            return dependency;
                        }

                        /**
                         * Sets the value of the dependency property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getDependency()
                         */
                        public void setDependency(String value) {
                            this.dependency = value;
                        }

                        /**
                         * Gets a map that contains attributes that aren't bound to any typed property on this class.
                         * 
                         * <p>
                         * the map is keyed by the name of the attribute and 
                         * the value is the string value of the attribute.
                         * 
                         * the map returned by this method is live, and you can add new attribute
                         * by updating the map directly. Because of this design, there's no setter.
                         * 
                         * 
                         * @return
                         *     always non-null
                         */
                        public Map<QName, String> getOtherAttributes() {
                            return otherAttributes;
                        }

                    }


                    /**
                     * <p>Java class for anonymous complex type</p>.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.</p>
                     * 
                     * <pre>{@code
                     * <complexType>
                     *   <simpleContent>
                     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
                     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
                     *     </extension>
                     *   </simpleContent>
                     * </complexType>
                     * }</pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "", propOrder = {
                        "value"
                    })
                    public static class Value {

                        /**
                         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                         * 
                         */
                        @XmlValue
                        protected String value;
                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         */
                        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String prompt;
                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         */
                        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected FormatType format;
                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         */
                        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected RangeTypeType rangeType;
                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         */
                        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlSchemaType(name = "Name")
                        protected String choiceRef;
                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         */
                        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected Float order;
                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         */
                        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "NMTOKENS")
                        protected List<String> configGroups;
                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         */
                        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlSchemaType(name = "nonNegativeInteger")
                        protected BigInteger bitStringLength;
                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         */
                        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String minimum;
                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         */
                        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String maximum;
                        /**
                         * Determines how a property value is resolved.
                         * 
                         */
                        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected ResolveType resolve;
                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         */
                        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                        @XmlID
                        @XmlSchemaType(name = "ID")
                        protected String id;
                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         */
                        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                        protected String dependency;
                        @XmlAnyAttribute
                        private Map<QName, String> otherAttributes = new HashMap<>();

                        /**
                         * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getValue() {
                            return value;
                        }

                        /**
                         * Sets the value of the value property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getValue()
                         */
                        public void setValue(String value) {
                            this.value = value;
                        }

                        /**
                         * Provides a string used to prompt the user for user-resolved property values.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getPrompt() {
                            return prompt;
                        }

                        /**
                         * Sets the value of the prompt property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getPrompt()
                         */
                        public void setPrompt(String value) {
                            this.prompt = value;
                        }

                        /**
                         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                         * 
                         * @return
                         *     possible object is
                         *     {@link FormatType }
                         *     
                         */
                        public FormatType getFormat() {
                            if (format == null) {
                                return FormatType.LONG;
                            } else {
                                return format;
                            }
                        }

                        /**
                         * Sets the value of the format property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link FormatType }
                         *     
                         * @see #getFormat()
                         */
                        public void setFormat(FormatType value) {
                            this.format = value;
                        }

                        /**
                         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                         * 
                         * @return
                         *     possible object is
                         *     {@link RangeTypeType }
                         *     
                         */
                        public RangeTypeType getRangeType() {
                            if (rangeType == null) {
                                return RangeTypeType.FLOAT;
                            } else {
                                return rangeType;
                            }
                        }

                        /**
                         * Sets the value of the rangeType property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link RangeTypeType }
                         *     
                         * @see #getRangeType()
                         */
                        public void setRangeType(RangeTypeType value) {
                            this.rangeType = value;
                        }

                        /**
                         * For user defined properties, refers the choice element enumerating the values to choose from.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getChoiceRef() {
                            return choiceRef;
                        }

                        /**
                         * Sets the value of the choiceRef property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getChoiceRef()
                         */
                        public void setChoiceRef(String value) {
                            this.choiceRef = value;
                        }

                        /**
                         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                         * 
                         * @return
                         *     possible object is
                         *     {@link Float }
                         *     
                         */
                        public Float getOrder() {
                            return order;
                        }

                        /**
                         * Sets the value of the order property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link Float }
                         *     
                         * @see #getOrder()
                         */
                        public void setOrder(Float value) {
                            this.order = value;
                        }

                        /**
                         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                         * 
                         * Gets the value of the configGroups property.
                         * 
                         * <p>This accessor method returns a reference to the live list,
                         * not a snapshot. Therefore any modification you make to the
                         * returned list will be present inside the JAXB object.
                         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                         * 
                         * <p>
                         * For example, to add a new item, do as follows:
                         * </p>
                         * <pre>
                         * getConfigGroups().add(newItem);
                         * </pre>
                         * 
                         * 
                         * <p>
                         * Objects of the following type(s) are allowed in the list
                         * {@link String }
                         * </p>
                         * 
                         * 
                         * @return
                         *     The value of the configGroups property.
                         */
                        public List<String> getConfigGroups() {
                            if (configGroups == null) {
                                configGroups = new ArrayList<>();
                            }
                            return this.configGroups;
                        }

                        /**
                         * Length of the bit string, required if the format is bitString
                         * 
                         * @return
                         *     possible object is
                         *     {@link BigInteger }
                         *     
                         */
                        public BigInteger getBitStringLength() {
                            return bitStringLength;
                        }

                        /**
                         * Sets the value of the bitStringLength property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link BigInteger }
                         *     
                         * @see #getBitStringLength()
                         */
                        public void setBitStringLength(BigInteger value) {
                            this.bitStringLength = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMinimum() {
                            return minimum;
                        }

                        /**
                         * Sets the value of the minimum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMinimum()
                         */
                        public void setMinimum(String value) {
                            this.minimum = value;
                        }

                        /**
                         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getMaximum() {
                            return maximum;
                        }

                        /**
                         * Sets the value of the maximum property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getMaximum()
                         */
                        public void setMaximum(String value) {
                            this.maximum = value;
                        }

                        /**
                         * Determines how a property value is resolved.
                         * 
                         * @return
                         *     possible object is
                         *     {@link ResolveType }
                         *     
                         */
                        public ResolveType getResolve() {
                            if (resolve == null) {
                                return ResolveType.IMMEDIATE;
                            } else {
                                return resolve;
                            }
                        }

                        /**
                         * Sets the value of the resolve property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link ResolveType }
                         *     
                         * @see #getResolve()
                         */
                        public void setResolve(ResolveType value) {
                            this.resolve = value;
                        }

                        /**
                         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getId() {
                            return id;
                        }

                        /**
                         * Sets the value of the id property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getId()
                         */
                        public void setId(String value) {
                            this.id = value;
                        }

                        /**
                         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getDependency() {
                            return dependency;
                        }

                        /**
                         * Sets the value of the dependency property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         * @see #getDependency()
                         */
                        public void setDependency(String value) {
                            this.dependency = value;
                        }

                        /**
                         * Gets a map that contains attributes that aren't bound to any typed property on this class.
                         * 
                         * <p>
                         * the map is keyed by the name of the attribute and 
                         * the value is the string value of the attribute.
                         * 
                         * the map returned by this method is live, and you can add new attribute
                         * by updating the map directly. Because of this design, there's no setter.
                         * 
                         * 
                         * @return
                         *     always non-null
                         */
                        public Map<QName, String> getOtherAttributes() {
                            return otherAttributes;
                        }

                    }

                }

            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element name="value">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *         <element name="mask" minOccurs="0">
         *           <complexType>
         *             <simpleContent>
         *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
         *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
         *               </extension>
         *             </simpleContent>
         *           </complexType>
         *         </element>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value",
            "mask"
        })
        public static class Reset {

            /**
             * The value itself.
             * 
             */
            @XmlElement(required = true)
            protected RegisterFile.Register.Reset.Value value;
            /**
             * Mask to be anded with the value before comparing to the reset value.
             * 
             */
            protected RegisterFile.Register.Reset.Mask mask;

            /**
             * The value itself.
             * 
             * @return
             *     possible object is
             *     {@link RegisterFile.Register.Reset.Value }
             *     
             */
            public RegisterFile.Register.Reset.Value getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link RegisterFile.Register.Reset.Value }
             *     
             * @see #getValue()
             */
            public void setValue(RegisterFile.Register.Reset.Value value) {
                this.value = value;
            }

            /**
             * Mask to be anded with the value before comparing to the reset value.
             * 
             * @return
             *     possible object is
             *     {@link RegisterFile.Register.Reset.Mask }
             *     
             */
            public RegisterFile.Register.Reset.Mask getMask() {
                return mask;
            }

            /**
             * Sets the value of the mask property.
             * 
             * @param value
             *     allowed object is
             *     {@link RegisterFile.Register.Reset.Mask }
             *     
             * @see #getMask()
             */
            public void setMask(RegisterFile.Register.Reset.Mask value) {
                this.mask = value;
            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Mask {

                /**
                 * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                 * 
                 */
                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getValue()
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.LONG;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }


            /**
             * <p>Java class for anonymous complex type</p>.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.</p>
             * 
             * <pre>{@code
             * <complexType>
             *   <simpleContent>
             *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>scaledNonNegativeInteger">
             *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
             *     </extension>
             *   </simpleContent>
             * </complexType>
             * }</pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class Value {

                /**
                 * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                 * 
                 */
                @XmlValue
                protected String value;
                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 */
                @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String prompt;
                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 */
                @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected FormatType format;
                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 */
                @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected RangeTypeType rangeType;
                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 */
                @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlSchemaType(name = "Name")
                protected String choiceRef;
                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 */
                @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected Float order;
                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 */
                @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "NMTOKENS")
                protected List<String> configGroups;
                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 */
                @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger bitStringLength;
                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 */
                @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String minimum;
                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 */
                @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String maximum;
                /**
                 * Determines how a property value is resolved.
                 * 
                 */
                @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected ResolveType resolve;
                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 */
                @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                @XmlID
                @XmlSchemaType(name = "ID")
                protected String id;
                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 */
                @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
                protected String dependency;
                @XmlAnyAttribute
                private Map<QName, String> otherAttributes = new HashMap<>();

                /**
                 * A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getValue()
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Provides a string used to prompt the user for user-resolved property values.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getPrompt() {
                    return prompt;
                }

                /**
                 * Sets the value of the prompt property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getPrompt()
                 */
                public void setPrompt(String value) {
                    this.prompt = value;
                }

                /**
                 * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
                 * 
                 * @return
                 *     possible object is
                 *     {@link FormatType }
                 *     
                 */
                public FormatType getFormat() {
                    if (format == null) {
                        return FormatType.LONG;
                    } else {
                        return format;
                    }
                }

                /**
                 * Sets the value of the format property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link FormatType }
                 *     
                 * @see #getFormat()
                 */
                public void setFormat(FormatType value) {
                    this.format = value;
                }

                /**
                 * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
                 * 
                 * @return
                 *     possible object is
                 *     {@link RangeTypeType }
                 *     
                 */
                public RangeTypeType getRangeType() {
                    if (rangeType == null) {
                        return RangeTypeType.FLOAT;
                    } else {
                        return rangeType;
                    }
                }

                /**
                 * Sets the value of the rangeType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link RangeTypeType }
                 *     
                 * @see #getRangeType()
                 */
                public void setRangeType(RangeTypeType value) {
                    this.rangeType = value;
                }

                /**
                 * For user defined properties, refers the choice element enumerating the values to choose from.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getChoiceRef() {
                    return choiceRef;
                }

                /**
                 * Sets the value of the choiceRef property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getChoiceRef()
                 */
                public void setChoiceRef(String value) {
                    this.choiceRef = value;
                }

                /**
                 * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Float }
                 *     
                 */
                public Float getOrder() {
                    return order;
                }

                /**
                 * Sets the value of the order property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Float }
                 *     
                 * @see #getOrder()
                 */
                public void setOrder(Float value) {
                    this.order = value;
                }

                /**
                 * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
                 * 
                 * Gets the value of the configGroups property.
                 * 
                 * <p>This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * </p>
                 * <pre>
                 * getConfigGroups().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * </p>
                 * 
                 * 
                 * @return
                 *     The value of the configGroups property.
                 */
                public List<String> getConfigGroups() {
                    if (configGroups == null) {
                        configGroups = new ArrayList<>();
                    }
                    return this.configGroups;
                }

                /**
                 * Length of the bit string, required if the format is bitString
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getBitStringLength() {
                    return bitStringLength;
                }

                /**
                 * Sets the value of the bitStringLength property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 * @see #getBitStringLength()
                 */
                public void setBitStringLength(BigInteger value) {
                    this.bitStringLength = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMinimum() {
                    return minimum;
                }

                /**
                 * Sets the value of the minimum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMinimum()
                 */
                public void setMinimum(String value) {
                    this.minimum = value;
                }

                /**
                 * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getMaximum() {
                    return maximum;
                }

                /**
                 * Sets the value of the maximum property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getMaximum()
                 */
                public void setMaximum(String value) {
                    this.maximum = value;
                }

                /**
                 * Determines how a property value is resolved.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ResolveType }
                 *     
                 */
                public ResolveType getResolve() {
                    if (resolve == null) {
                        return ResolveType.IMMEDIATE;
                    } else {
                        return resolve;
                    }
                }

                /**
                 * Sets the value of the resolve property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ResolveType }
                 *     
                 * @see #getResolve()
                 */
                public void setResolve(ResolveType value) {
                    this.resolve = value;
                }

                /**
                 * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getId()
                 */
                public void setId(String value) {
                    this.id = value;
                }

                /**
                 * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDependency() {
                    return dependency;
                }

                /**
                 * Sets the value of the dependency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 * @see #getDependency()
                 */
                public void setDependency(String value) {
                    this.dependency = value;
                }

                /**
                 * Gets a map that contains attributes that aren't bound to any typed property on this class.
                 * 
                 * <p>
                 * the map is keyed by the name of the attribute and 
                 * the value is the string value of the attribute.
                 * 
                 * the map returned by this method is live, and you can add new attribute
                 * by updating the map directly. Because of this design, there's no setter.
                 * 
                 * 
                 * @return
                 *     always non-null
                 */
                public Map<QName, String> getOtherAttributes() {
                    return otherAttributes;
                }

            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>positiveInteger">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}long.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Size {

            @XmlValue
            @XmlSchemaType(name = "positiveInteger")
            protected BigInteger value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             */
            public void setValue(BigInteger value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.LONG;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }

    }

}
