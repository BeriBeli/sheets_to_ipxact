//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Wire port type for a component.
 * 
 * <p>Java class for portWireType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="portWireType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="direction" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentPortDirectionType"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wireTypeDefs" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driver" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constraintSets" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="allLogicalDirectionsAllowed" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "portWireType", propOrder = {
    "direction",
    "vector",
    "wireTypeDefs",
    "driver",
    "constraintSets"
})
@XmlSeeAlso({
    AbstractorPortWireType.class
})
public class PortWireType {

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     */
    @XmlElement(required = true)
    @XmlSchemaType(name = "token")
    protected ComponentPortDirectionType direction;
    /**
     * Specific left and right vector bounds. Signal width is
     * max(left,right)-min(left,right)+1 When the bounds are not present, a scalar port is assumed.
     * 
     */
    protected Vector vector;
    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     */
    protected WireTypeDefs wireTypeDefs;
    /**
     * Wire port driver element.
     * 
     */
    protected DriverType driver;
    /**
     * List of constraintSet elements for a component port.
     * 
     */
    protected ConstraintSets constraintSets;
    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     */
    @XmlAttribute(name = "allLogicalDirectionsAllowed", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    protected Boolean allLogicalDirectionsAllowed;

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     * @return
     *     possible object is
     *     {@link ComponentPortDirectionType }
     *     
     */
    public ComponentPortDirectionType getDirection() {
        return direction;
    }

    /**
     * Sets the value of the direction property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComponentPortDirectionType }
     *     
     * @see #getDirection()
     */
    public void setDirection(ComponentPortDirectionType value) {
        this.direction = value;
    }

    /**
     * Specific left and right vector bounds. Signal width is
     * max(left,right)-min(left,right)+1 When the bounds are not present, a scalar port is assumed.
     * 
     * @return
     *     possible object is
     *     {@link Vector }
     *     
     */
    public Vector getVector() {
        return vector;
    }

    /**
     * Sets the value of the vector property.
     * 
     * @param value
     *     allowed object is
     *     {@link Vector }
     *     
     * @see #getVector()
     */
    public void setVector(Vector value) {
        this.vector = value;
    }

    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     * @return
     *     possible object is
     *     {@link WireTypeDefs }
     *     
     */
    public WireTypeDefs getWireTypeDefs() {
        return wireTypeDefs;
    }

    /**
     * Sets the value of the wireTypeDefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link WireTypeDefs }
     *     
     * @see #getWireTypeDefs()
     */
    public void setWireTypeDefs(WireTypeDefs value) {
        this.wireTypeDefs = value;
    }

    /**
     * Wire port driver element.
     * 
     * @return
     *     possible object is
     *     {@link DriverType }
     *     
     */
    public DriverType getDriver() {
        return driver;
    }

    /**
     * Sets the value of the driver property.
     * 
     * @param value
     *     allowed object is
     *     {@link DriverType }
     *     
     * @see #getDriver()
     */
    public void setDriver(DriverType value) {
        this.driver = value;
    }

    /**
     * List of constraintSet elements for a component port.
     * 
     * @return
     *     possible object is
     *     {@link ConstraintSets }
     *     
     */
    public ConstraintSets getConstraintSets() {
        return constraintSets;
    }

    /**
     * Sets the value of the constraintSets property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConstraintSets }
     *     
     * @see #getConstraintSets()
     */
    public void setConstraintSets(ConstraintSets value) {
        this.constraintSets = value;
    }

    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isAllLogicalDirectionsAllowed() {
        if (allLogicalDirectionsAllowed == null) {
            return false;
        } else {
            return allLogicalDirectionsAllowed;
        }
    }

    /**
     * Sets the value of the allLogicalDirectionsAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isAllLogicalDirectionsAllowed()
     */
    public void setAllLogicalDirectionsAllowed(Boolean value) {
        this.allLogicalDirectionsAllowed = value;
    }

}
