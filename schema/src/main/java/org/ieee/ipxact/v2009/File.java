//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlElementRef;
import jakarta.xml.bind.annotation.XmlElementRefs;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="name">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
 *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <sequence>
 *           <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType" maxOccurs="unbounded"/>
 *         </sequence>
 *         <element name="isIncludeFile" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
 *                 <attribute name="externalDeclarations" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="logicalName" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>Name">
 *                 <attribute name="default" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="exportedName" type="{http://www.w3.org/2001/XMLSchema}Name" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="buildCommand" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="command" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="flags" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                           <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="replaceDefaultFlags" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="targetName" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
 *                           <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="define" type="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="imageType" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="fileId" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       <anyAttribute processContents='lax'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "fileType",
    "isIncludeFile",
    "logicalName",
    "exportedName",
    "buildCommand",
    "dependency",
    "define",
    "imageType",
    "description",
    "vendorExtensions"
})
@XmlRootElement(name = "file")
public class File {

    /**
     * Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file.
     * 
     */
    @XmlElement(required = true)
    protected File.Name name;
    /**
     * The type of a file refenced by IP-XACT.
     * Either: fileType - a known IP-XACT file type, or userFileType - a file type not yet known by IP-XACT. If multiple types are specified, the order is important. The first type is the primary type of the file and the latter types are types that may be embedded in the file. For example a Verilog file containing PSL assertions.
     * 
     */
    @XmlElementRefs({
        @XmlElementRef(name = "fileType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "userFileType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<String>> fileType;
    /**
     * Indicate that the file is include file.
     * 
     */
    protected File.IsIncludeFile isIncludeFile;
    /**
     * Logical name for this file or directory e.g. VHDL library name.
     * 
     */
    protected File.LogicalName logicalName;
    /**
     * Defines exported names that can be accessed externally, e.g. exported function names from a C source file.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected List<String> exportedName;
    /**
     * Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.
     * 
     */
    protected File.BuildCommand buildCommand;
    /**
     * Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.
     * 
     */
    protected List<String> dependency;
    /**
     * Specifies define symbols that are used in the source file.  The spirit:name element gives the name to be defined and the text content of the spirit:value element holds the value.  This element supports full configurability.
     * 
     */
    protected List<NameValuePairType> define;
    /**
     * Relates the current file to a certain executable image type in the design.
     * 
     */
    protected List<String> imageType;
    /**
     * String for describing this file to users
     * 
     */
    protected String description;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * Unique ID for this file, referenced in fileSet/function/fileRef
     * 
     */
    @XmlAttribute(name = "fileId", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String fileId;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file.
     * 
     * @return
     *     possible object is
     *     {@link File.Name }
     *     
     */
    public File.Name getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.Name }
     *     
     * @see #getName()
     */
    public void setName(File.Name value) {
        this.name = value;
    }

    /**
     * The type of a file refenced by IP-XACT.
     * Either: fileType - a known IP-XACT file type, or userFileType - a file type not yet known by IP-XACT. If multiple types are specified, the order is important. The first type is the primary type of the file and the latter types are types that may be embedded in the file. For example a Verilog file containing PSL assertions.
     * 
     * Gets the value of the fileType property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fileType property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getFileType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * </p>
     * 
     * 
     * @return
     *     The value of the fileType property.
     */
    public List<JAXBElement<String>> getFileType() {
        if (fileType == null) {
            fileType = new ArrayList<>();
        }
        return this.fileType;
    }

    /**
     * Indicate that the file is include file.
     * 
     * @return
     *     possible object is
     *     {@link File.IsIncludeFile }
     *     
     */
    public File.IsIncludeFile getIsIncludeFile() {
        return isIncludeFile;
    }

    /**
     * Sets the value of the isIncludeFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.IsIncludeFile }
     *     
     * @see #getIsIncludeFile()
     */
    public void setIsIncludeFile(File.IsIncludeFile value) {
        this.isIncludeFile = value;
    }

    /**
     * Logical name for this file or directory e.g. VHDL library name.
     * 
     * @return
     *     possible object is
     *     {@link File.LogicalName }
     *     
     */
    public File.LogicalName getLogicalName() {
        return logicalName;
    }

    /**
     * Sets the value of the logicalName property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.LogicalName }
     *     
     * @see #getLogicalName()
     */
    public void setLogicalName(File.LogicalName value) {
        this.logicalName = value;
    }

    /**
     * Defines exported names that can be accessed externally, e.g. exported function names from a C source file.
     * 
     * Gets the value of the exportedName property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the exportedName property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getExportedName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * </p>
     * 
     * 
     * @return
     *     The value of the exportedName property.
     */
    public List<String> getExportedName() {
        if (exportedName == null) {
            exportedName = new ArrayList<>();
        }
        return this.exportedName;
    }

    /**
     * Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.
     * 
     * @return
     *     possible object is
     *     {@link File.BuildCommand }
     *     
     */
    public File.BuildCommand getBuildCommand() {
        return buildCommand;
    }

    /**
     * Sets the value of the buildCommand property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.BuildCommand }
     *     
     * @see #getBuildCommand()
     */
    public void setBuildCommand(File.BuildCommand value) {
        this.buildCommand = value;
    }

    /**
     * Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.
     * 
     * Gets the value of the dependency property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dependency property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getDependency().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * </p>
     * 
     * 
     * @return
     *     The value of the dependency property.
     */
    public List<String> getDependency() {
        if (dependency == null) {
            dependency = new ArrayList<>();
        }
        return this.dependency;
    }

    /**
     * Specifies define symbols that are used in the source file.  The spirit:name element gives the name to be defined and the text content of the spirit:value element holds the value.  This element supports full configurability.
     * 
     * Gets the value of the define property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the define property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getDefine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameValuePairType }
     * </p>
     * 
     * 
     * @return
     *     The value of the define property.
     */
    public List<NameValuePairType> getDefine() {
        if (define == null) {
            define = new ArrayList<>();
        }
        return this.define;
    }

    /**
     * Relates the current file to a certain executable image type in the design.
     * 
     * Gets the value of the imageType property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the imageType property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getImageType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * </p>
     * 
     * 
     * @return
     *     The value of the imageType property.
     */
    public List<String> getImageType() {
        if (imageType == null) {
            imageType = new ArrayList<>();
        }
        return this.imageType;
    }

    /**
     * String for describing this file to users
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * Unique ID for this file, referenced in fileSet/function/fileRef
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileId() {
        return fileId;
    }

    /**
     * Sets the value of the fileId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getFileId()
     */
    public void setFileId(String value) {
        this.fileId = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="command" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="flags" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *                 <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="replaceDefaultFlags" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="targetName" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
     *                 <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "command",
        "flags",
        "replaceDefaultFlags",
        "targetName"
    })
    public static class BuildCommand {

        /**
         * Command used to build this file.
         * 
         */
        protected File.BuildCommand.Command command;
        /**
         * Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.
         * 
         */
        protected File.BuildCommand.Flags flags;
        /**
         * If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.
         * 
         */
        protected File.BuildCommand.ReplaceDefaultFlags replaceDefaultFlags;
        /**
         * Pathname to the file that is derived (built) from the source file.
         * 
         */
        protected File.BuildCommand.TargetName targetName;

        /**
         * Command used to build this file.
         * 
         * @return
         *     possible object is
         *     {@link File.BuildCommand.Command }
         *     
         */
        public File.BuildCommand.Command getCommand() {
            return command;
        }

        /**
         * Sets the value of the command property.
         * 
         * @param value
         *     allowed object is
         *     {@link File.BuildCommand.Command }
         *     
         * @see #getCommand()
         */
        public void setCommand(File.BuildCommand.Command value) {
            this.command = value;
        }

        /**
         * Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.
         * 
         * @return
         *     possible object is
         *     {@link File.BuildCommand.Flags }
         *     
         */
        public File.BuildCommand.Flags getFlags() {
            return flags;
        }

        /**
         * Sets the value of the flags property.
         * 
         * @param value
         *     allowed object is
         *     {@link File.BuildCommand.Flags }
         *     
         * @see #getFlags()
         */
        public void setFlags(File.BuildCommand.Flags value) {
            this.flags = value;
        }

        /**
         * If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.
         * 
         * @return
         *     possible object is
         *     {@link File.BuildCommand.ReplaceDefaultFlags }
         *     
         */
        public File.BuildCommand.ReplaceDefaultFlags getReplaceDefaultFlags() {
            return replaceDefaultFlags;
        }

        /**
         * Sets the value of the replaceDefaultFlags property.
         * 
         * @param value
         *     allowed object is
         *     {@link File.BuildCommand.ReplaceDefaultFlags }
         *     
         * @see #getReplaceDefaultFlags()
         */
        public void setReplaceDefaultFlags(File.BuildCommand.ReplaceDefaultFlags value) {
            this.replaceDefaultFlags = value;
        }

        /**
         * Pathname to the file that is derived (built) from the source file.
         * 
         * @return
         *     possible object is
         *     {@link File.BuildCommand.TargetName }
         *     
         */
        public File.BuildCommand.TargetName getTargetName() {
            return targetName;
        }

        /**
         * Sets the value of the targetName property.
         * 
         * @param value
         *     allowed object is
         *     {@link File.BuildCommand.TargetName }
         *     
         * @see #getTargetName()
         */
        public void setTargetName(File.BuildCommand.TargetName value) {
            this.targetName = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Command {

            @XmlValue
            protected String value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.STRING;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *       <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Flags {

            @XmlValue
            protected String value;
            /**
             * "true" indicates that the flags shall be appended to any existing flags, "false"indicates these flags will replace any existing default flags.
             * 
             */
            @XmlAttribute(name = "append", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Boolean append;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * "true" indicates that the flags shall be appended to any existing flags, "false"indicates these flags will replace any existing default flags.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isAppend() {
                return append;
            }

            /**
             * Sets the value of the append property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             * @see #isAppend()
             */
            public void setAppend(Boolean value) {
                this.append = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.STRING;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bool.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class ReplaceDefaultFlags {

            @XmlValue
            protected boolean value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * Gets the value of the value property.
             * 
             */
            public boolean isValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             */
            public void setValue(boolean value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.BOOL;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.INT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
         *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class TargetName {

            /**
             * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
             * 
             */
            @XmlValue
            protected String value;
            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             */
            @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String prompt;
            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             */
            @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected FormatType format;
            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             */
            @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected RangeTypeType rangeType;
            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             */
            @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlSchemaType(name = "Name")
            protected String choiceRef;
            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             */
            @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected Float order;
            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             */
            @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "NMTOKENS")
            protected List<String> configGroups;
            /**
             * Length of the bit string, required if the format is bitString
             * 
             */
            @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger bitStringLength;
            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             */
            @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String minimum;
            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             */
            @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String maximum;
            /**
             * Determines how a property value is resolved.
             * 
             */
            @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected ResolveType resolve;
            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;
            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             */
            @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
            protected String dependency;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<>();

            /**
             * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getValue()
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Provides a string used to prompt the user for user-resolved property values.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPrompt() {
                return prompt;
            }

            /**
             * Sets the value of the prompt property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getPrompt()
             */
            public void setPrompt(String value) {
                this.prompt = value;
            }

            /**
             * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
             * 
             * @return
             *     possible object is
             *     {@link FormatType }
             *     
             */
            public FormatType getFormat() {
                if (format == null) {
                    return FormatType.STRING;
                } else {
                    return format;
                }
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link FormatType }
             *     
             * @see #getFormat()
             */
            public void setFormat(FormatType value) {
                this.format = value;
            }

            /**
             * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
             * 
             * @return
             *     possible object is
             *     {@link RangeTypeType }
             *     
             */
            public RangeTypeType getRangeType() {
                if (rangeType == null) {
                    return RangeTypeType.FLOAT;
                } else {
                    return rangeType;
                }
            }

            /**
             * Sets the value of the rangeType property.
             * 
             * @param value
             *     allowed object is
             *     {@link RangeTypeType }
             *     
             * @see #getRangeType()
             */
            public void setRangeType(RangeTypeType value) {
                this.rangeType = value;
            }

            /**
             * For user defined properties, refers the choice element enumerating the values to choose from.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getChoiceRef() {
                return choiceRef;
            }

            /**
             * Sets the value of the choiceRef property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getChoiceRef()
             */
            public void setChoiceRef(String value) {
                this.choiceRef = value;
            }

            /**
             * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
             * 
             * @return
             *     possible object is
             *     {@link Float }
             *     
             */
            public Float getOrder() {
                return order;
            }

            /**
             * Sets the value of the order property.
             * 
             * @param value
             *     allowed object is
             *     {@link Float }
             *     
             * @see #getOrder()
             */
            public void setOrder(Float value) {
                this.order = value;
            }

            /**
             * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
             * 
             * Gets the value of the configGroups property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getConfigGroups().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * </p>
             * 
             * 
             * @return
             *     The value of the configGroups property.
             */
            public List<String> getConfigGroups() {
                if (configGroups == null) {
                    configGroups = new ArrayList<>();
                }
                return this.configGroups;
            }

            /**
             * Length of the bit string, required if the format is bitString
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getBitStringLength() {
                return bitStringLength;
            }

            /**
             * Sets the value of the bitStringLength property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             * @see #getBitStringLength()
             */
            public void setBitStringLength(BigInteger value) {
                this.bitStringLength = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMinimum() {
                return minimum;
            }

            /**
             * Sets the value of the minimum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMinimum()
             */
            public void setMinimum(String value) {
                this.minimum = value;
            }

            /**
             * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMaximum() {
                return maximum;
            }

            /**
             * Sets the value of the maximum property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getMaximum()
             */
            public void setMaximum(String value) {
                this.maximum = value;
            }

            /**
             * Determines how a property value is resolved.
             * 
             * @return
             *     possible object is
             *     {@link ResolveType }
             *     
             */
            public ResolveType getResolve() {
                if (resolve == null) {
                    return ResolveType.IMMEDIATE;
                } else {
                    return resolve;
                }
            }

            /**
             * Sets the value of the resolve property.
             * 
             * @param value
             *     allowed object is
             *     {@link ResolveType }
             *     
             * @see #getResolve()
             */
            public void setResolve(ResolveType value) {
                this.resolve = value;
            }

            /**
             * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

            /**
             * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDependency() {
                return dependency;
            }

            /**
             * Sets the value of the dependency property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getDependency()
             */
            public void setDependency(String value) {
                this.dependency = value;
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *       <attribute name="externalDeclarations" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class IsIncludeFile {

        @XmlValue
        protected boolean value;
        /**
         * the File contains some declarations that are needed in top file
         * 
         */
        @XmlAttribute(name = "externalDeclarations", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Boolean externalDeclarations;

        /**
         * Gets the value of the value property.
         * 
         */
        public boolean isValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(boolean value) {
            this.value = value;
        }

        /**
         * the File contains some declarations that are needed in top file
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isExternalDeclarations() {
            if (externalDeclarations == null) {
                return false;
            } else {
                return externalDeclarations;
            }
        }

        /**
         * Sets the value of the externalDeclarations property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         * @see #isExternalDeclarations()
         */
        public void setExternalDeclarations(Boolean value) {
            this.externalDeclarations = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>Name">
     *       <attribute name="default" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class LogicalName {

        @XmlValue
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String value;
        /**
         * The logical name shall only be used as a default and another process may override this name.
         * 
         */
        @XmlAttribute(name = "default", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Boolean _default;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * The logical name shall only be used as a default and another process may override this name.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isDefault() {
            if (_default == null) {
                return false;
            } else {
                return _default;
            }
        }

        /**
         * Sets the value of the default property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         * @see #isDefault()
         */
        public void setDefault(Boolean value) {
            this._default = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009>spiritURI">
     *       <attGroup ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}string.prompt.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Name {

        /**
         * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
         * 
         */
        @XmlValue
        protected String value;
        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         */
        @XmlAttribute(name = "prompt", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String prompt;
        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         */
        @XmlAttribute(name = "format", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected FormatType format;
        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         */
        @XmlAttribute(name = "rangeType", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected RangeTypeType rangeType;
        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         */
        @XmlAttribute(name = "choiceRef", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String choiceRef;
        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         */
        @XmlAttribute(name = "order", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected Float order;
        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         */
        @XmlAttribute(name = "configGroups", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "NMTOKENS")
        protected List<String> configGroups;
        /**
         * Length of the bit string, required if the format is bitString
         * 
         */
        @XmlAttribute(name = "bitStringLength", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger bitStringLength;
        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         */
        @XmlAttribute(name = "minimum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String minimum;
        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         */
        @XmlAttribute(name = "maximum", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String maximum;
        /**
         * Determines how a property value is resolved.
         * 
         */
        @XmlAttribute(name = "resolve", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected ResolveType resolve;
        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         */
        @XmlAttribute(name = "dependency", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
        protected String dependency;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<>();

        /**
         * IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getValue()
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Provides a string used to prompt the user for user-resolved property values.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPrompt() {
            return prompt;
        }

        /**
         * Sets the value of the prompt property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getPrompt()
         */
        public void setPrompt(String value) {
            this.prompt = value;
        }

        /**
         * This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.
         * 
         * @return
         *     possible object is
         *     {@link FormatType }
         *     
         */
        public FormatType getFormat() {
            if (format == null) {
                return FormatType.STRING;
            } else {
                return format;
            }
        }

        /**
         * Sets the value of the format property.
         * 
         * @param value
         *     allowed object is
         *     {@link FormatType }
         *     
         * @see #getFormat()
         */
        public void setFormat(FormatType value) {
            this.format = value;
        }

        /**
         * Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.
         * 
         * @return
         *     possible object is
         *     {@link RangeTypeType }
         *     
         */
        public RangeTypeType getRangeType() {
            if (rangeType == null) {
                return RangeTypeType.FLOAT;
            } else {
                return rangeType;
            }
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link RangeTypeType }
         *     
         * @see #getRangeType()
         */
        public void setRangeType(RangeTypeType value) {
            this.rangeType = value;
        }

        /**
         * For user defined properties, refers the choice element enumerating the values to choose from.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChoiceRef() {
            return choiceRef;
        }

        /**
         * Sets the value of the choiceRef property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getChoiceRef()
         */
        public void setChoiceRef(String value) {
            this.choiceRef = value;
        }

        /**
         * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
         * 
         * @return
         *     possible object is
         *     {@link Float }
         *     
         */
        public Float getOrder() {
            return order;
        }

        /**
         * Sets the value of the order property.
         * 
         * @param value
         *     allowed object is
         *     {@link Float }
         *     
         * @see #getOrder()
         */
        public void setOrder(Float value) {
            this.order = value;
        }

        /**
         * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
         * 
         * Gets the value of the configGroups property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getConfigGroups().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * </p>
         * 
         * 
         * @return
         *     The value of the configGroups property.
         */
        public List<String> getConfigGroups() {
            if (configGroups == null) {
                configGroups = new ArrayList<>();
            }
            return this.configGroups;
        }

        /**
         * Length of the bit string, required if the format is bitString
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getBitStringLength() {
            return bitStringLength;
        }

        /**
         * Sets the value of the bitStringLength property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getBitStringLength()
         */
        public void setBitStringLength(BigInteger value) {
            this.bitStringLength = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMinimum() {
            return minimum;
        }

        /**
         * Sets the value of the minimum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMinimum()
         */
        public void setMinimum(String value) {
            this.minimum = value;
        }

        /**
         * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMaximum() {
            return maximum;
        }

        /**
         * Sets the value of the maximum property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getMaximum()
         */
        public void setMaximum(String value) {
            this.maximum = value;
        }

        /**
         * Determines how a property value is resolved.
         * 
         * @return
         *     possible object is
         *     {@link ResolveType }
         *     
         */
        public ResolveType getResolve() {
            if (resolve == null) {
                return ResolveType.IMMEDIATE;
            } else {
                return resolve;
            }
        }

        /**
         * Sets the value of the resolve property.
         * 
         * @param value
         *     allowed object is
         *     {@link ResolveType }
         *     
         * @see #getResolve()
         */
        public void setResolve(ResolveType value) {
            this.resolve = value;
        }

        /**
         * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

        /**
         * Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDependency() {
            return dependency;
        }

        /**
         * Sets the value of the dependency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getDependency()
         */
        public void setDependency(String value) {
            this.dependency = value;
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

    }

}
