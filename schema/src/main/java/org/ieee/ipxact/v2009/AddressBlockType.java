//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2009;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * Top level address block that specify an address
 * 
 * <p>Java class for addressBlockType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="addressBlockType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameGroup"/>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpecifier"/>
 *         <group ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlockDefinitionGroup"/>
 *         <element ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attribute ref="{http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id"/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "addressBlockType", propOrder = {
    "name",
    "displayName",
    "description",
    "baseAddress",
    "typeIdentifier",
    "range",
    "width",
    "usage",
    "_volatile",
    "access",
    "parameters",
    "register",
    "registerFile",
    "vendorExtensions"
})
public class AddressBlockType {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.
     * 
     */
    @XmlElement(required = true)
    protected BaseAddress baseAddress;
    /**
     * Identifier name used to indicate that multiple addressBlock elements contain the exact same information except for the elements in the addressBlockInstanceGroup.
     * 
     */
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String typeIdentifier;
    /**
     * The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:
     * 					number_of_bits_in_block = spirit:addressUnitBits * spirit:range
     * 					number_of_rows_in_block = number_of_bits_in_block / spirit:width
     * 
     */
    @XmlElement(required = true)
    protected BankedBlockType.Range range;
    /**
     * The bit width of a row in the address block. The range and the width are related by the following formulas:
     * 					number_of_bits_in_block = spirit:addressUnitBits * spirit:range
     * 					number_of_rows_in_block = number_of_bits_in_block / spirit:width
     * 
     */
    @XmlElement(required = true)
    protected BankedBlockType.Width width;
    /**
     * Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.
     * 
     */
    @XmlSchemaType(name = "token")
    protected UsageType usage;
    /**
     * Indicates whether the data is volatile.
     * 
     */
    @XmlElement(name = "volatile", defaultValue = "false")
    protected Boolean _volatile;
    /**
     * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
     * 
     */
    protected AccessType access;
    /**
     * Any additional parameters needed to describe this address block to the generators.
     * 
     */
    protected Parameters parameters;
    /**
     * A single register
     * 
     */
    protected List<RegisterFile.Register> register;
    /**
     * A structure of registers and register files
     * 
     */
    protected List<RegisterFile> registerFile;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.
     * 
     * @return
     *     possible object is
     *     {@link BaseAddress }
     *     
     */
    public BaseAddress getBaseAddress() {
        return baseAddress;
    }

    /**
     * Sets the value of the baseAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseAddress }
     *     
     * @see #getBaseAddress()
     */
    public void setBaseAddress(BaseAddress value) {
        this.baseAddress = value;
    }

    /**
     * Identifier name used to indicate that multiple addressBlock elements contain the exact same information except for the elements in the addressBlockInstanceGroup.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTypeIdentifier() {
        return typeIdentifier;
    }

    /**
     * Sets the value of the typeIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getTypeIdentifier()
     */
    public void setTypeIdentifier(String value) {
        this.typeIdentifier = value;
    }

    /**
     * The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:
     * 					number_of_bits_in_block = spirit:addressUnitBits * spirit:range
     * 					number_of_rows_in_block = number_of_bits_in_block / spirit:width
     * 
     * @return
     *     possible object is
     *     {@link BankedBlockType.Range }
     *     
     */
    public BankedBlockType.Range getRange() {
        return range;
    }

    /**
     * Sets the value of the range property.
     * 
     * @param value
     *     allowed object is
     *     {@link BankedBlockType.Range }
     *     
     * @see #getRange()
     */
    public void setRange(BankedBlockType.Range value) {
        this.range = value;
    }

    /**
     * The bit width of a row in the address block. The range and the width are related by the following formulas:
     * 					number_of_bits_in_block = spirit:addressUnitBits * spirit:range
     * 					number_of_rows_in_block = number_of_bits_in_block / spirit:width
     * 
     * @return
     *     possible object is
     *     {@link BankedBlockType.Width }
     *     
     */
    public BankedBlockType.Width getWidth() {
        return width;
    }

    /**
     * Sets the value of the width property.
     * 
     * @param value
     *     allowed object is
     *     {@link BankedBlockType.Width }
     *     
     * @see #getWidth()
     */
    public void setWidth(BankedBlockType.Width value) {
        this.width = value;
    }

    /**
     * Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.
     * 
     * @return
     *     possible object is
     *     {@link UsageType }
     *     
     */
    public UsageType getUsage() {
        return usage;
    }

    /**
     * Sets the value of the usage property.
     * 
     * @param value
     *     allowed object is
     *     {@link UsageType }
     *     
     * @see #getUsage()
     */
    public void setUsage(UsageType value) {
        this.usage = value;
    }

    /**
     * Indicates whether the data is volatile.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isVolatile() {
        return _volatile;
    }

    /**
     * Sets the value of the volatile property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isVolatile()
     */
    public void setVolatile(Boolean value) {
        this._volatile = value;
    }

    /**
     * Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.
     * 
     * @return
     *     possible object is
     *     {@link AccessType }
     *     
     */
    public AccessType getAccess() {
        return access;
    }

    /**
     * Sets the value of the access property.
     * 
     * @param value
     *     allowed object is
     *     {@link AccessType }
     *     
     * @see #getAccess()
     */
    public void setAccess(AccessType value) {
        this.access = value;
    }

    /**
     * Any additional parameters needed to describe this address block to the generators.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * A single register
     * 
     * Gets the value of the register property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the register property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getRegister().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RegisterFile.Register }
     * </p>
     * 
     * 
     * @return
     *     The value of the register property.
     */
    public List<RegisterFile.Register> getRegister() {
        if (register == null) {
            register = new ArrayList<>();
        }
        return this.register;
    }

    /**
     * A structure of registers and register files
     * 
     * Gets the value of the registerFile property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the registerFile property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getRegisterFile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RegisterFile }
     * </p>
     * 
     * 
     * @return
     *     The value of the registerFile property.
     */
    public List<RegisterFile> getRegisterFile() {
        if (registerFile == null) {
            registerFile = new ArrayList<>();
        }
        return this.registerFile;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

}
