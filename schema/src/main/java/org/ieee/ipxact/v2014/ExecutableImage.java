//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2014;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlElementRef;
import jakarta.xml.bind.annotation.XmlElementRefs;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}nameGroup"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}parameters" minOccurs="0"/>
 *         <element name="languageTools" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="fileBuilder" maxOccurs="unbounded" minOccurs="0">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}fileType"/>
 *                             <element name="command" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
 *                             <element name="flags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression" minOccurs="0"/>
 *                             <element name="replaceDefaultFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}unsignedBitExpression" minOccurs="0"/>
 *                             <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}vendorExtensions" minOccurs="0"/>
 *                           </sequence>
 *                           <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}id.att"/>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                   <sequence minOccurs="0">
 *                     <element name="linker" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
 *                     <choice>
 *                       <sequence>
 *                         <element name="linkerFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
 *                         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}linkerCommandFile" minOccurs="0"/>
 *                       </sequence>
 *                       <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}linkerCommandFile"/>
 *                     </choice>
 *                   </sequence>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="fileSetRefGroup" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}fileSetRef" maxOccurs="unbounded"/>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}id.att"/>
 *       <attribute name="imageId" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       <attribute name="imageType" type="{http://www.w3.org/2001/XMLSchema}Name" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "displayName",
    "description",
    "parameters",
    "languageTools",
    "fileSetRefGroup",
    "vendorExtensions"
})
@XmlRootElement(name = "executableImage")
public class ExecutableImage {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     */
    protected String displayName;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Additional information about the load module, e.g. stack base addresses, table addresses, etc.
     * 
     */
    protected Parameters parameters;
    /**
     * Default commands and flags for software language tools needed to build the executable image.
     * 
     */
    protected ExecutableImage.LanguageTools languageTools;
    /**
     * Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.
     * 
     */
    protected ExecutableImage.FileSetRefGroup fileSetRefGroup;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * Unique ID for the executableImage, referenced in fileSet/function/fileRef
     * 
     */
    @XmlAttribute(name = "imageId", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String imageId;
    /**
     * Open element to describe the type of image. The contents is model and/or generator specific.
     * 
     */
    @XmlAttribute(name = "imageType")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String imageType;
    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Additional information about the load module, e.g. stack base addresses, table addresses, etc.
     * 
     * @return
     *     possible object is
     *     {@link Parameters }
     *     
     */
    public Parameters getParameters() {
        return parameters;
    }

    /**
     * Sets the value of the parameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link Parameters }
     *     
     * @see #getParameters()
     */
    public void setParameters(Parameters value) {
        this.parameters = value;
    }

    /**
     * Default commands and flags for software language tools needed to build the executable image.
     * 
     * @return
     *     possible object is
     *     {@link ExecutableImage.LanguageTools }
     *     
     */
    public ExecutableImage.LanguageTools getLanguageTools() {
        return languageTools;
    }

    /**
     * Sets the value of the languageTools property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExecutableImage.LanguageTools }
     *     
     * @see #getLanguageTools()
     */
    public void setLanguageTools(ExecutableImage.LanguageTools value) {
        this.languageTools = value;
    }

    /**
     * Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.
     * 
     * @return
     *     possible object is
     *     {@link ExecutableImage.FileSetRefGroup }
     *     
     */
    public ExecutableImage.FileSetRefGroup getFileSetRefGroup() {
        return fileSetRefGroup;
    }

    /**
     * Sets the value of the fileSetRefGroup property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExecutableImage.FileSetRefGroup }
     *     
     * @see #getFileSetRefGroup()
     */
    public void setFileSetRefGroup(ExecutableImage.FileSetRefGroup value) {
        this.fileSetRefGroup = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * Unique ID for the executableImage, referenced in fileSet/function/fileRef
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getImageId() {
        return imageId;
    }

    /**
     * Sets the value of the imageId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getImageId()
     */
    public void setImageId(String value) {
        this.imageId = value;
    }

    /**
     * Open element to describe the type of image. The contents is model and/or generator specific.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getImageType() {
        return imageType;
    }

    /**
     * Sets the value of the imageType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getImageType()
     */
    public void setImageType(String value) {
        this.imageType = value;
    }

    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}fileSetRef" maxOccurs="unbounded"/>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fileSetRef"
    })
    public static class FileSetRefGroup {

        /**
         * A reference to a fileSet.
         * 
         */
        @XmlElement(required = true)
        protected List<FileSetRef> fileSetRef;

        /**
         * A reference to a fileSet.
         * 
         * Gets the value of the fileSetRef property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fileSetRef property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getFileSetRef().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FileSetRef }
         * </p>
         * 
         * 
         * @return
         *     The value of the fileSetRef property.
         */
        public List<FileSetRef> getFileSetRef() {
            if (fileSetRef == null) {
                fileSetRef = new ArrayList<>();
            }
            return this.fileSetRef;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="fileBuilder" maxOccurs="unbounded" minOccurs="0">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}fileType"/>
     *                   <element name="command" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
     *                   <element name="flags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression" minOccurs="0"/>
     *                   <element name="replaceDefaultFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}unsignedBitExpression" minOccurs="0"/>
     *                   <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}vendorExtensions" minOccurs="0"/>
     *                 </sequence>
     *                 <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}id.att"/>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *         <sequence minOccurs="0">
     *           <element name="linker" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
     *           <choice>
     *             <sequence>
     *               <element name="linkerFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
     *               <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}linkerCommandFile" minOccurs="0"/>
     *             </sequence>
     *             <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}linkerCommandFile"/>
     *           </choice>
     *         </sequence>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class LanguageTools {

        /**
         * Gets the rest of the content model. 
         * 
         * <p>
         * You are getting this "catch-all" property because of the following reason: 
         * The field name "LinkerCommandFile" is used by two different parts of a schema. See: 
         * line 251 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2014/file.xsd
         * line 249 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2014/file.xsd
         * <p>
         * To get rid of this property, apply a property customization to one 
         * of both of the following declarations to change their names:
         * 
         */
        @XmlElementRefs({
            @XmlElementRef(name = "fileBuilder", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2014", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "linker", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2014", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "linkerFlags", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2014", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "linkerCommandFile", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2014", type = LinkerCommandFile.class, required = false)
        })
        protected List<Object> content;

        /**
         * Gets the rest of the content model. 
         * 
         * <p>
         * You are getting this "catch-all" property because of the following reason: 
         * The field name "LinkerCommandFile" is used by two different parts of a schema. See: 
         * line 251 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2014/file.xsd
         * line 249 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2014/file.xsd
         * <p>
         * To get rid of this property, apply a property customization to one 
         * of both of the following declarations to change their names:
         * 
         * Gets the value of the content property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the content property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getContent().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link JAXBElement }{@code <}{@link ExecutableImage.LanguageTools.FileBuilder }{@code >}
         * {@link JAXBElement }{@code <}{@link StringExpression }{@code >}
         * {@link JAXBElement }{@code <}{@link StringExpression }{@code >}
         * {@link LinkerCommandFile }
         * </p>
         * 
         * 
         * @return
         *     The value of the content property.
         */
        public List<Object> getContent() {
            if (content == null) {
                content = new ArrayList<>();
            }
            return this.content;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}fileType"/>
         *         <element name="command" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression"/>
         *         <element name="flags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}stringExpression" minOccurs="0"/>
         *         <element name="replaceDefaultFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}unsignedBitExpression" minOccurs="0"/>
         *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}vendorExtensions" minOccurs="0"/>
         *       </sequence>
         *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}id.att"/>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "fileType",
            "command",
            "flags",
            "replaceDefaultFlags",
            "vendorExtensions"
        })
        public static class FileBuilder {

            /**
             * Enumerated file types known by IP-XACT.
             * 
             */
            @XmlElement(required = true)
            protected FileType fileType;
            /**
             * Default command used to build files of the specified fileType.
             * 
             */
            @XmlElement(required = true)
            protected StringExpression command;
            /**
             * Flags given to the build command when building files of this type.
             * 
             */
            protected StringExpression flags;
            /**
             * If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.
             * 
             * If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.
             * 
             */
            protected UnsignedBitExpression replaceDefaultFlags;
            /**
             * Container for vendor specific extensions.
             * 
             */
            protected VendorExtensions vendorExtensions;
            /**
             * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
             * 
             */
            @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            @XmlID
            @XmlSchemaType(name = "ID")
            protected String id;

            /**
             * Enumerated file types known by IP-XACT.
             * 
             * @return
             *     possible object is
             *     {@link FileType }
             *     
             */
            public FileType getFileType() {
                return fileType;
            }

            /**
             * Sets the value of the fileType property.
             * 
             * @param value
             *     allowed object is
             *     {@link FileType }
             *     
             * @see #getFileType()
             */
            public void setFileType(FileType value) {
                this.fileType = value;
            }

            /**
             * Default command used to build files of the specified fileType.
             * 
             * @return
             *     possible object is
             *     {@link StringExpression }
             *     
             */
            public StringExpression getCommand() {
                return command;
            }

            /**
             * Sets the value of the command property.
             * 
             * @param value
             *     allowed object is
             *     {@link StringExpression }
             *     
             * @see #getCommand()
             */
            public void setCommand(StringExpression value) {
                this.command = value;
            }

            /**
             * Flags given to the build command when building files of this type.
             * 
             * @return
             *     possible object is
             *     {@link StringExpression }
             *     
             */
            public StringExpression getFlags() {
                return flags;
            }

            /**
             * Sets the value of the flags property.
             * 
             * @param value
             *     allowed object is
             *     {@link StringExpression }
             *     
             * @see #getFlags()
             */
            public void setFlags(StringExpression value) {
                this.flags = value;
            }

            /**
             * If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.
             * 
             * If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.
             * 
             * @return
             *     possible object is
             *     {@link UnsignedBitExpression }
             *     
             */
            public UnsignedBitExpression getReplaceDefaultFlags() {
                return replaceDefaultFlags;
            }

            /**
             * Sets the value of the replaceDefaultFlags property.
             * 
             * @param value
             *     allowed object is
             *     {@link UnsignedBitExpression }
             *     
             * @see #getReplaceDefaultFlags()
             */
            public void setReplaceDefaultFlags(UnsignedBitExpression value) {
                this.replaceDefaultFlags = value;
            }

            /**
             * Container for vendor specific extensions.
             * 
             * @return
             *     possible object is
             *     {@link VendorExtensions }
             *     
             */
            public VendorExtensions getVendorExtensions() {
                return vendorExtensions;
            }

            /**
             * Sets the value of the vendorExtensions property.
             * 
             * @param value
             *     allowed object is
             *     {@link VendorExtensions }
             *     
             * @see #getVendorExtensions()
             */
            public void setVendorExtensions(VendorExtensions value) {
                this.vendorExtensions = value;
            }

            /**
             * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             * @see #getId()
             */
            public void setId(String value) {
                this.id = value;
            }

        }

    }

}
