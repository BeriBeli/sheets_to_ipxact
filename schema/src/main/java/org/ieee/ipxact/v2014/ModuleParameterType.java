//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2014;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Name value pair with data type information.
 * 
 * <p>Java class for moduleParameterType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="moduleParameterType">
 *   <complexContent>
 *     <extension base="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}parameterType">
 *       <sequence>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}isPresent" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="dataType" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="usageType" default="nontyped">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="nontyped"/>
 *             <enumeration value="typed"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "moduleParameterType", propOrder = {
    "isPresent"
})
public class ModuleParameterType
    extends ParameterType
{

    /**
     * Expression that determines whether the enclosing element should be treated as present (expression evaluates to "true") or disregarded (expression evalutes to "false")
     * 
     */
    protected UnsignedBitExpression isPresent;
    /**
     * The data type of the argument as pertains to the language. Example: "int", "double", "char *".
     * 
     */
    @XmlAttribute(name = "dataType")
    protected String dataType;
    /**
     * Indicates the type of the module parameter. Legal values are defined in the attribute enumeration list. Default value is 'nontyped'.
     * 
     */
    @XmlAttribute(name = "usageType")
    protected String usageType;

    /**
     * Expression that determines whether the enclosing element should be treated as present (expression evaluates to "true") or disregarded (expression evalutes to "false")
     * 
     * @return
     *     possible object is
     *     {@link UnsignedBitExpression }
     *     
     */
    public UnsignedBitExpression getIsPresent() {
        return isPresent;
    }

    /**
     * Sets the value of the isPresent property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnsignedBitExpression }
     *     
     * @see #getIsPresent()
     */
    public void setIsPresent(UnsignedBitExpression value) {
        this.isPresent = value;
    }

    /**
     * The data type of the argument as pertains to the language. Example: "int", "double", "char *".
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Sets the value of the dataType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDataType()
     */
    public void setDataType(String value) {
        this.dataType = value;
    }

    /**
     * Indicates the type of the module parameter. Legal values are defined in the attribute enumeration list. Default value is 'nontyped'.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUsageType() {
        if (usageType == null) {
            return "nontyped";
        } else {
            return usageType;
        }
    }

    /**
     * Sets the value of the usageType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getUsageType()
     */
    public void setUsageType(String value) {
        this.usageType = value;
    }

}
