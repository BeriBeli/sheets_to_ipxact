//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2014;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Wire port type for a component.
 * 
 * <p>Java class for portWireType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="portWireType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="direction" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}componentPortDirectionType"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}vectors" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}wireTypeDefs" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}drivers" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2014}constraintSets" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="allLogicalDirectionsAllowed" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "portWireType", propOrder = {
    "direction",
    "vectors",
    "wireTypeDefs",
    "drivers",
    "constraintSets"
})
@XmlSeeAlso({
    AbstractorPortWireType.class
})
public class PortWireType {

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     */
    @XmlElement(required = true)
    @XmlSchemaType(name = "token")
    protected ComponentPortDirectionType direction;
    /**
     * Vectored information.
     * 
     */
    protected Vectors vectors;
    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     */
    protected WireTypeDefs wireTypeDefs;
    /**
     * Container for wire port driver elements.
     * 
     */
    protected Drivers drivers;
    /**
     * List of constraintSet elements for a component port.
     * 
     */
    protected ConstraintSets constraintSets;
    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     */
    @XmlAttribute(name = "allLogicalDirectionsAllowed")
    protected Boolean allLogicalDirectionsAllowed;

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     * @return
     *     possible object is
     *     {@link ComponentPortDirectionType }
     *     
     */
    public ComponentPortDirectionType getDirection() {
        return direction;
    }

    /**
     * Sets the value of the direction property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComponentPortDirectionType }
     *     
     * @see #getDirection()
     */
    public void setDirection(ComponentPortDirectionType value) {
        this.direction = value;
    }

    /**
     * Vectored information.
     * 
     * @return
     *     possible object is
     *     {@link Vectors }
     *     
     */
    public Vectors getVectors() {
        return vectors;
    }

    /**
     * Sets the value of the vectors property.
     * 
     * @param value
     *     allowed object is
     *     {@link Vectors }
     *     
     * @see #getVectors()
     */
    public void setVectors(Vectors value) {
        this.vectors = value;
    }

    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     * @return
     *     possible object is
     *     {@link WireTypeDefs }
     *     
     */
    public WireTypeDefs getWireTypeDefs() {
        return wireTypeDefs;
    }

    /**
     * Sets the value of the wireTypeDefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link WireTypeDefs }
     *     
     * @see #getWireTypeDefs()
     */
    public void setWireTypeDefs(WireTypeDefs value) {
        this.wireTypeDefs = value;
    }

    /**
     * Container for wire port driver elements.
     * 
     * @return
     *     possible object is
     *     {@link Drivers }
     *     
     */
    public Drivers getDrivers() {
        return drivers;
    }

    /**
     * Sets the value of the drivers property.
     * 
     * @param value
     *     allowed object is
     *     {@link Drivers }
     *     
     * @see #getDrivers()
     */
    public void setDrivers(Drivers value) {
        this.drivers = value;
    }

    /**
     * List of constraintSet elements for a component port.
     * 
     * @return
     *     possible object is
     *     {@link ConstraintSets }
     *     
     */
    public ConstraintSets getConstraintSets() {
        return constraintSets;
    }

    /**
     * Sets the value of the constraintSets property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConstraintSets }
     *     
     * @see #getConstraintSets()
     */
    public void setConstraintSets(ConstraintSets value) {
        this.constraintSets = value;
    }

    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isAllLogicalDirectionsAllowed() {
        if (allLogicalDirectionsAllowed == null) {
            return false;
        } else {
            return allLogicalDirectionsAllowed;
        }
    }

    /**
     * Sets the value of the allLogicalDirectionsAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isAllLogicalDirectionsAllowed()
     */
    public void setAllLogicalDirectionsAllowed(Boolean value) {
        this.allLogicalDirectionsAllowed = value;
    }

}
