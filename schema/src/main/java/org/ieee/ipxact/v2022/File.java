//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2022;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="name" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}ipxactURI"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}fileType" maxOccurs="unbounded"/>
 *         <element name="isStructural" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         <element name="isIncludeFile" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
 *                 <attribute name="externalDeclarations" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="logicalName" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>Name">
 *                 <attribute name="default" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="exportedName" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>Name">
 *                 <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="buildCommand" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="command" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}stringExpression" minOccurs="0"/>
 *                   <element name="flags" minOccurs="0">
 *                     <complexType>
 *                       <simpleContent>
 *                         <extension base="<http://www.accellera.org/XMLSchema/IPXACT/1685-2022>stringExpression">
 *                           <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *                           <anyAttribute processContents='lax' namespace='##other'/>
 *                         </extension>
 *                       </simpleContent>
 *                     </complexType>
 *                   </element>
 *                   <element name="replaceDefaultFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}unsignedBitExpression" minOccurs="0"/>
 *                   <element name="targetName" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}ipxactURI" minOccurs="0"/>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}dependency" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="define" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}nameValuePairType" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="imageType" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <simpleContent>
 *               <extension base="<http://www.w3.org/2001/XMLSchema>string">
 *                 <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *               </extension>
 *             </simpleContent>
 *           </complexType>
 *         </element>
 *         <element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}any.att"/>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *       <attribute name="fileId" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "fileType",
    "isStructural",
    "isIncludeFile",
    "logicalName",
    "exportedName",
    "buildCommand",
    "dependency",
    "define",
    "imageType",
    "description",
    "vendorExtensions"
})
@XmlRootElement(name = "file")
public class File {

    /**
     * Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file.
     * 
     */
    @XmlElement(required = true)
    protected IpxactURI name;
    /**
     * Enumerated file types known by IP-XACT.
     * 
     */
    @XmlElement(required = true)
    protected List<FileType> fileType;
    /**
     * Indicates that the current file is purely structural.
     * 
     */
    @XmlElement(defaultValue = "false")
    protected Boolean isStructural;
    /**
     * Indicate that the file is include file.
     * 
     */
    protected File.IsIncludeFile isIncludeFile;
    /**
     * Logical name for this file or directory e.g. VHDL library name.
     * 
     */
    protected File.LogicalName logicalName;
    /**
     * Defines exported names that can be accessed externally, e.g. exported function names from a C source file.
     * 
     */
    protected List<File.ExportedName> exportedName;
    /**
     * Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.
     * 
     */
    protected File.BuildCommand buildCommand;
    /**
     * Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.
     * 
     */
    protected List<Dependency> dependency;
    /**
     * Specifies define symbols that are used in the source file.  The ipxact:name element gives the name to be defined and the text content of the ipxact:value element holds the value.  This element supports full configurability.
     * 
     */
    protected List<NameValuePairType> define;
    /**
     * Relates the current file to a certain executable image type in the design.
     * 
     */
    protected List<File.ImageType> imageType;
    /**
     * String for describing this file to users
     * 
     */
    protected String description;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * Unique ID for this file, referenced in fileSet/function/fileRef
     * 
     */
    @XmlAttribute(name = "fileId")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String fileId;
    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file.
     * 
     * @return
     *     possible object is
     *     {@link IpxactURI }
     *     
     */
    public IpxactURI getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link IpxactURI }
     *     
     * @see #getName()
     */
    public void setName(IpxactURI value) {
        this.name = value;
    }

    /**
     * Enumerated file types known by IP-XACT.
     * 
     * Gets the value of the fileType property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fileType property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getFileType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileType }
     * </p>
     * 
     * 
     * @return
     *     The value of the fileType property.
     */
    public List<FileType> getFileType() {
        if (fileType == null) {
            fileType = new ArrayList<>();
        }
        return this.fileType;
    }

    /**
     * Indicates that the current file is purely structural.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsStructural() {
        return isStructural;
    }

    /**
     * Sets the value of the isStructural property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isIsStructural()
     */
    public void setIsStructural(Boolean value) {
        this.isStructural = value;
    }

    /**
     * Indicate that the file is include file.
     * 
     * @return
     *     possible object is
     *     {@link File.IsIncludeFile }
     *     
     */
    public File.IsIncludeFile getIsIncludeFile() {
        return isIncludeFile;
    }

    /**
     * Sets the value of the isIncludeFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.IsIncludeFile }
     *     
     * @see #getIsIncludeFile()
     */
    public void setIsIncludeFile(File.IsIncludeFile value) {
        this.isIncludeFile = value;
    }

    /**
     * Logical name for this file or directory e.g. VHDL library name.
     * 
     * @return
     *     possible object is
     *     {@link File.LogicalName }
     *     
     */
    public File.LogicalName getLogicalName() {
        return logicalName;
    }

    /**
     * Sets the value of the logicalName property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.LogicalName }
     *     
     * @see #getLogicalName()
     */
    public void setLogicalName(File.LogicalName value) {
        this.logicalName = value;
    }

    /**
     * Defines exported names that can be accessed externally, e.g. exported function names from a C source file.
     * 
     * Gets the value of the exportedName property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the exportedName property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getExportedName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link File.ExportedName }
     * </p>
     * 
     * 
     * @return
     *     The value of the exportedName property.
     */
    public List<File.ExportedName> getExportedName() {
        if (exportedName == null) {
            exportedName = new ArrayList<>();
        }
        return this.exportedName;
    }

    /**
     * Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.
     * 
     * @return
     *     possible object is
     *     {@link File.BuildCommand }
     *     
     */
    public File.BuildCommand getBuildCommand() {
        return buildCommand;
    }

    /**
     * Sets the value of the buildCommand property.
     * 
     * @param value
     *     allowed object is
     *     {@link File.BuildCommand }
     *     
     * @see #getBuildCommand()
     */
    public void setBuildCommand(File.BuildCommand value) {
        this.buildCommand = value;
    }

    /**
     * Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.
     * 
     * Gets the value of the dependency property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dependency property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getDependency().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Dependency }
     * </p>
     * 
     * 
     * @return
     *     The value of the dependency property.
     */
    public List<Dependency> getDependency() {
        if (dependency == null) {
            dependency = new ArrayList<>();
        }
        return this.dependency;
    }

    /**
     * Specifies define symbols that are used in the source file.  The ipxact:name element gives the name to be defined and the text content of the ipxact:value element holds the value.  This element supports full configurability.
     * 
     * Gets the value of the define property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the define property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getDefine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameValuePairType }
     * </p>
     * 
     * 
     * @return
     *     The value of the define property.
     */
    public List<NameValuePairType> getDefine() {
        if (define == null) {
            define = new ArrayList<>();
        }
        return this.define;
    }

    /**
     * Relates the current file to a certain executable image type in the design.
     * 
     * Gets the value of the imageType property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the imageType property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getImageType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link File.ImageType }
     * </p>
     * 
     * 
     * @return
     *     The value of the imageType property.
     */
    public List<File.ImageType> getImageType() {
        if (imageType == null) {
            imageType = new ArrayList<>();
        }
        return this.imageType;
    }

    /**
     * String for describing this file to users
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * Unique ID for this file, referenced in fileSet/function/fileRef
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileId() {
        return fileId;
    }

    /**
     * Sets the value of the fileId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getFileId()
     */
    public void setFileId(String value) {
        this.fileId = value;
    }

    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="command" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}stringExpression" minOccurs="0"/>
     *         <element name="flags" minOccurs="0">
     *           <complexType>
     *             <simpleContent>
     *               <extension base="<http://www.accellera.org/XMLSchema/IPXACT/1685-2022>stringExpression">
     *                 <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
     *                 <anyAttribute processContents='lax' namespace='##other'/>
     *               </extension>
     *             </simpleContent>
     *           </complexType>
     *         </element>
     *         <element name="replaceDefaultFlags" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}unsignedBitExpression" minOccurs="0"/>
     *         <element name="targetName" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}ipxactURI" minOccurs="0"/>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "command",
        "flags",
        "replaceDefaultFlags",
        "targetName"
    })
    public static class BuildCommand {

        /**
         * Command used to build this file.
         * 
         */
        protected StringExpression command;
        /**
         * Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.
         * 
         */
        protected File.BuildCommand.Flags flags;
        /**
         * If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.
         * 
         */
        protected UnsignedBitExpression replaceDefaultFlags;
        /**
         * Pathname to the file that is derived (built) from the source file.
         * 
         */
        protected IpxactURI targetName;

        /**
         * Command used to build this file.
         * 
         * @return
         *     possible object is
         *     {@link StringExpression }
         *     
         */
        public StringExpression getCommand() {
            return command;
        }

        /**
         * Sets the value of the command property.
         * 
         * @param value
         *     allowed object is
         *     {@link StringExpression }
         *     
         * @see #getCommand()
         */
        public void setCommand(StringExpression value) {
            this.command = value;
        }

        /**
         * Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.
         * 
         * @return
         *     possible object is
         *     {@link File.BuildCommand.Flags }
         *     
         */
        public File.BuildCommand.Flags getFlags() {
            return flags;
        }

        /**
         * Sets the value of the flags property.
         * 
         * @param value
         *     allowed object is
         *     {@link File.BuildCommand.Flags }
         *     
         * @see #getFlags()
         */
        public void setFlags(File.BuildCommand.Flags value) {
            this.flags = value;
        }

        /**
         * If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.
         * 
         * @return
         *     possible object is
         *     {@link UnsignedBitExpression }
         *     
         */
        public UnsignedBitExpression getReplaceDefaultFlags() {
            return replaceDefaultFlags;
        }

        /**
         * Sets the value of the replaceDefaultFlags property.
         * 
         * @param value
         *     allowed object is
         *     {@link UnsignedBitExpression }
         *     
         * @see #getReplaceDefaultFlags()
         */
        public void setReplaceDefaultFlags(UnsignedBitExpression value) {
            this.replaceDefaultFlags = value;
        }

        /**
         * Pathname to the file that is derived (built) from the source file.
         * 
         * @return
         *     possible object is
         *     {@link IpxactURI }
         *     
         */
        public IpxactURI getTargetName() {
            return targetName;
        }

        /**
         * Sets the value of the targetName property.
         * 
         * @param value
         *     allowed object is
         *     {@link IpxactURI }
         *     
         * @see #getTargetName()
         */
        public void setTargetName(IpxactURI value) {
            this.targetName = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.accellera.org/XMLSchema/IPXACT/1685-2022>stringExpression">
         *       <attribute name="append" type="{http://www.w3.org/2001/XMLSchema}boolean" />
         *       <anyAttribute processContents='lax' namespace='##other'/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Flags
            extends StringExpression
        {

            /**
             * "true" indicates that the flags shall be appended to any existing flags, "false"indicates these flags will replace any existing default flags.
             * 
             */
            @XmlAttribute(name = "append")
            protected Boolean append;

            /**
             * "true" indicates that the flags shall be appended to any existing flags, "false"indicates these flags will replace any existing default flags.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isAppend() {
                return append;
            }

            /**
             * Sets the value of the append property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             * @see #isAppend()
             */
            public void setAppend(Boolean value) {
                this.append = value;
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>Name">
     *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class ExportedName {

        @XmlValue
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String value;
        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>string">
     *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class ImageType {

        @XmlValue
        protected String value;
        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>boolean">
     *       <attribute name="externalDeclarations" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class IsIncludeFile {

        @XmlValue
        protected boolean value;
        /**
         * the File contains some declarations that are needed in top file
         * 
         */
        @XmlAttribute(name = "externalDeclarations")
        protected Boolean externalDeclarations;

        /**
         * Gets the value of the value property.
         * 
         */
        public boolean isValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(boolean value) {
            this.value = value;
        }

        /**
         * the File contains some declarations that are needed in top file
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isExternalDeclarations() {
            if (externalDeclarations == null) {
                return false;
            } else {
                return externalDeclarations;
            }
        }

        /**
         * Sets the value of the externalDeclarations property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         * @see #isExternalDeclarations()
         */
        public void setExternalDeclarations(Boolean value) {
            this.externalDeclarations = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <simpleContent>
     *     <extension base="<http://www.w3.org/2001/XMLSchema>Name">
     *       <attribute name="default" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
     *     </extension>
     *   </simpleContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class LogicalName {

        @XmlValue
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String value;
        /**
         * The logical name shall only be used as a default and another process may override this name.
         * 
         */
        @XmlAttribute(name = "default")
        protected Boolean _default;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * The logical name shall only be used as a default and another process may override this name.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isDefault() {
            if (_default == null) {
                return false;
            } else {
                return _default;
            }
        }

        /**
         * Sets the value of the default property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         * @see #isDefault()
         */
        public void setDefault(Boolean value) {
            this._default = value;
        }

    }

}
