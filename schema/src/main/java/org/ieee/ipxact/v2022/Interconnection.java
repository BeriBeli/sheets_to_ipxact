//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2022;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElementRef;
import jakarta.xml.bind.annotation.XmlElementRefs;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}nameGroup"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}activeInterface"/>
 *         <choice>
 *           <sequence>
 *             <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}activeInterface" maxOccurs="unbounded"/>
 *             <element name="hierInterface" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}hierInterfaceType" maxOccurs="unbounded" minOccurs="0"/>
 *           </sequence>
 *           <element name="hierInterface" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}hierInterfaceType" maxOccurs="unbounded"/>
 *         </choice>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "content"
})
@XmlRootElement(name = "interconnection")
public class Interconnection {

    /**
     * Gets the rest of the content model. 
     * 
     * <p>
     * You are getting this "catch-all" property because of the following reason: 
     * The field name "ActiveInterface" is used by two different parts of a schema. See: 
     * line 193 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2022/subInstances.xsd
     * line 184 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2022/subInstances.xsd
     * <p>
     * To get rid of this property, apply a property customization to one 
     * of both of the following declarations to change their names:
     * 
     */
    @XmlElementRefs({
        @XmlElementRef(name = "name", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "displayName", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "shortDescription", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "description", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "activeInterface", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = ActiveInterface.class, required = false),
        @XmlElementRef(name = "hierInterface", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "vendorExtensions", namespace = "http://www.accellera.org/XMLSchema/IPXACT/1685-2022", type = VendorExtensions.class, required = false)
    })
    protected List<Object> content;
    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;

    /**
     * Gets the rest of the content model. 
     * 
     * <p>
     * You are getting this "catch-all" property because of the following reason: 
     * The field name "ActiveInterface" is used by two different parts of a schema. See: 
     * line 193 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2022/subInstances.xsd
     * line 184 of file:/Users/beribeli/Downloads/ipxact_schema_files/1685-2022/subInstances.xsd
     * <p>
     * To get rid of this property, apply a property customization to one 
     * of both of the following declarations to change their names:
     * 
     * Gets the value of the content property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link HierInterfaceType }{@code >}
     * {@link ActiveInterface }
     * {@link VendorExtensions }
     * </p>
     * 
     * 
     * @return
     *     The value of the content property.
     */
    public List<Object> getContent() {
        if (content == null) {
            content = new ArrayList<>();
        }
        return this.content;
    }

    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

}
