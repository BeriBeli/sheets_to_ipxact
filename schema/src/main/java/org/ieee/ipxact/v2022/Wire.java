//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2022;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="qualifier" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}qualifierType" minOccurs="0"/>
 *         <element name="onSystem" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
 *                   <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
 *                 </sequence>
 *                 <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="onInitiator" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="onTarget" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <choice minOccurs="0">
 *           <element name="defaultValue" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}unsignedBitVectorExpression"/>
 *           <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}requiresDriver"/>
 *         </choice>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "qualifier",
    "onSystem",
    "onInitiator",
    "onTarget",
    "defaultValue",
    "requiresDriver"
})
@XmlRootElement(name = "wire")
public class Wire {

    /**
     * The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset
     * 
     */
    protected QualifierType qualifier;
    /**
     * Defines constraints for this port when present in a system bus interface with a matching group name.
     * 
     */
    protected List<Wire.OnSystem> onSystem;
    /**
     * Defines constraints for this port when present in a initiator bus interface.
     * 
     */
    protected Wire.OnInitiator onInitiator;
    /**
     * Defines constraints for this port when present in a target bus interface.
     * 
     */
    protected Wire.OnTarget onTarget;
    /**
     * Indicates the default value for this wire port.
     * 
     */
    protected UnsignedBitVectorExpression defaultValue;
    /**
     * Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected
     * 
     */
    @XmlElement(defaultValue = "false")
    protected RequiresDriver requiresDriver;

    /**
     * The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset
     * 
     * @return
     *     possible object is
     *     {@link QualifierType }
     *     
     */
    public QualifierType getQualifier() {
        return qualifier;
    }

    /**
     * Sets the value of the qualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link QualifierType }
     *     
     * @see #getQualifier()
     */
    public void setQualifier(QualifierType value) {
        this.qualifier = value;
    }

    /**
     * Defines constraints for this port when present in a system bus interface with a matching group name.
     * 
     * Gets the value of the onSystem property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the onSystem property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getOnSystem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Wire.OnSystem }
     * </p>
     * 
     * 
     * @return
     *     The value of the onSystem property.
     */
    public List<Wire.OnSystem> getOnSystem() {
        if (onSystem == null) {
            onSystem = new ArrayList<>();
        }
        return this.onSystem;
    }

    /**
     * Defines constraints for this port when present in a initiator bus interface.
     * 
     * @return
     *     possible object is
     *     {@link Wire.OnInitiator }
     *     
     */
    public Wire.OnInitiator getOnInitiator() {
        return onInitiator;
    }

    /**
     * Sets the value of the onInitiator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Wire.OnInitiator }
     *     
     * @see #getOnInitiator()
     */
    public void setOnInitiator(Wire.OnInitiator value) {
        this.onInitiator = value;
    }

    /**
     * Defines constraints for this port when present in a target bus interface.
     * 
     * @return
     *     possible object is
     *     {@link Wire.OnTarget }
     *     
     */
    public Wire.OnTarget getOnTarget() {
        return onTarget;
    }

    /**
     * Sets the value of the onTarget property.
     * 
     * @param value
     *     allowed object is
     *     {@link Wire.OnTarget }
     *     
     * @see #getOnTarget()
     */
    public void setOnTarget(Wire.OnTarget value) {
        this.onTarget = value;
    }

    /**
     * Indicates the default value for this wire port.
     * 
     * @return
     *     possible object is
     *     {@link UnsignedBitVectorExpression }
     *     
     */
    public UnsignedBitVectorExpression getDefaultValue() {
        return defaultValue;
    }

    /**
     * Sets the value of the defaultValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnsignedBitVectorExpression }
     *     
     * @see #getDefaultValue()
     */
    public void setDefaultValue(UnsignedBitVectorExpression value) {
        this.defaultValue = value;
    }

    /**
     * Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected
     * 
     * @return
     *     possible object is
     *     {@link RequiresDriver }
     *     
     */
    public RequiresDriver getRequiresDriver() {
        return requiresDriver;
    }

    /**
     * Sets the value of the requiresDriver property.
     * 
     * @param value
     *     allowed object is
     *     {@link RequiresDriver }
     *     
     * @see #getRequiresDriver()
     */
    public void setRequiresDriver(RequiresDriver value) {
        this.requiresDriver = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "presence",
        "width",
        "direction",
        "modeConstraints",
        "mirroredModeConstraints"
    })
    public static class OnInitiator {

        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         */
        @XmlElement(defaultValue = "optional")
        @XmlSchemaType(name = "string")
        protected PresenceType presence;
        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         */
        protected Wire.OnTarget.Width width;
        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         */
        @XmlElement(defaultValue = "out")
        @XmlSchemaType(name = "token")
        protected Direction direction;
        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType modeConstraints;
        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType mirroredModeConstraints;

        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         * @return
         *     possible object is
         *     {@link PresenceType }
         *     
         */
        public PresenceType getPresence() {
            return presence;
        }

        /**
         * Sets the value of the presence property.
         * 
         * @param value
         *     allowed object is
         *     {@link PresenceType }
         *     
         * @see #getPresence()
         */
        public void setPresence(PresenceType value) {
            this.presence = value;
        }

        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         * @return
         *     possible object is
         *     {@link Wire.OnTarget.Width }
         *     
         */
        public Wire.OnTarget.Width getWidth() {
            return width;
        }

        /**
         * Sets the value of the width property.
         * 
         * @param value
         *     allowed object is
         *     {@link Wire.OnTarget.Width }
         *     
         * @see #getWidth()
         */
        public void setWidth(Wire.OnTarget.Width value) {
            this.width = value;
        }

        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         * @return
         *     possible object is
         *     {@link Direction }
         *     
         */
        public Direction getDirection() {
            return direction;
        }

        /**
         * Sets the value of the direction property.
         * 
         * @param value
         *     allowed object is
         *     {@link Direction }
         *     
         * @see #getDirection()
         */
        public void setDirection(Direction value) {
            this.direction = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getModeConstraints() {
            return modeConstraints;
        }

        /**
         * Sets the value of the modeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getModeConstraints()
         */
        public void setModeConstraints(AbstractionDefPortConstraintsType value) {
            this.modeConstraints = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
            return mirroredModeConstraints;
        }

        /**
         * Sets the value of the mirroredModeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getMirroredModeConstraints()
         */
        public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
            this.mirroredModeConstraints = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="group" type="{http://www.w3.org/2001/XMLSchema}Name"/>
     *         <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
     *       </sequence>
     *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "group",
        "presence",
        "width",
        "direction",
        "modeConstraints",
        "mirroredModeConstraints"
    })
    public static class OnSystem {

        /**
         * Used to group system ports into different groups within a common bus.
         * 
         */
        @XmlElement(required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "Name")
        protected String group;
        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         */
        @XmlElement(defaultValue = "optional")
        @XmlSchemaType(name = "string")
        protected PresenceType presence;
        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         */
        protected Wire.OnTarget.Width width;
        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         */
        @XmlElement(defaultValue = "out")
        @XmlSchemaType(name = "token")
        protected Direction direction;
        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType modeConstraints;
        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType mirroredModeConstraints;
        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         */
        @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Used to group system ports into different groups within a common bus.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getGroup() {
            return group;
        }

        /**
         * Sets the value of the group property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getGroup()
         */
        public void setGroup(String value) {
            this.group = value;
        }

        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         * @return
         *     possible object is
         *     {@link PresenceType }
         *     
         */
        public PresenceType getPresence() {
            return presence;
        }

        /**
         * Sets the value of the presence property.
         * 
         * @param value
         *     allowed object is
         *     {@link PresenceType }
         *     
         * @see #getPresence()
         */
        public void setPresence(PresenceType value) {
            this.presence = value;
        }

        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         * @return
         *     possible object is
         *     {@link Wire.OnTarget.Width }
         *     
         */
        public Wire.OnTarget.Width getWidth() {
            return width;
        }

        /**
         * Sets the value of the width property.
         * 
         * @param value
         *     allowed object is
         *     {@link Wire.OnTarget.Width }
         *     
         * @see #getWidth()
         */
        public void setWidth(Wire.OnTarget.Width value) {
            this.width = value;
        }

        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         * @return
         *     possible object is
         *     {@link Direction }
         *     
         */
        public Direction getDirection() {
            return direction;
        }

        /**
         * Sets the value of the direction property.
         * 
         * @param value
         *     allowed object is
         *     {@link Direction }
         *     
         * @see #getDirection()
         */
        public void setDirection(Direction value) {
            this.direction = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getModeConstraints() {
            return modeConstraints;
        }

        /**
         * Sets the value of the modeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getModeConstraints()
         */
        public void setModeConstraints(AbstractionDefPortConstraintsType value) {
            this.modeConstraints = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
            return mirroredModeConstraints;
        }

        /**
         * Sets the value of the mirroredModeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getMirroredModeConstraints()
         */
        public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
            this.mirroredModeConstraints = value;
        }

        /**
         * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getId()
         */
        public void setId(String value) {
            this.id = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePort"/>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "presence",
        "width",
        "direction",
        "modeConstraints",
        "mirroredModeConstraints"
    })
    public static class OnTarget {

        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         */
        @XmlElement(defaultValue = "optional")
        @XmlSchemaType(name = "string")
        protected PresenceType presence;
        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         */
        protected Wire.OnTarget.Width width;
        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         */
        @XmlElement(defaultValue = "out")
        @XmlSchemaType(name = "token")
        protected Direction direction;
        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType modeConstraints;
        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         */
        protected AbstractionDefPortConstraintsType mirroredModeConstraints;

        /**
         * If this element is present, the
         *             existance of the port is controlled by the specified
         *             value. valid values are 'illegal', 'required' and
         *             'optional'.
         * 
         * @return
         *     possible object is
         *     {@link PresenceType }
         *     
         */
        public PresenceType getPresence() {
            return presence;
        }

        /**
         * Sets the value of the presence property.
         * 
         * @param value
         *     allowed object is
         *     {@link PresenceType }
         *     
         * @see #getPresence()
         */
        public void setPresence(PresenceType value) {
            this.presence = value;
        }

        /**
         * Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.
         * 
         * @return
         *     possible object is
         *     {@link Wire.OnTarget.Width }
         *     
         */
        public Wire.OnTarget.Width getWidth() {
            return width;
        }

        /**
         * Sets the value of the width property.
         * 
         * @param value
         *     allowed object is
         *     {@link Wire.OnTarget.Width }
         *     
         * @see #getWidth()
         */
        public void setWidth(Wire.OnTarget.Width value) {
            this.width = value;
        }

        /**
         * If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.
         * 
         * @return
         *     possible object is
         *     {@link Direction }
         *     
         */
        public Direction getDirection() {
            return direction;
        }

        /**
         * Sets the value of the direction property.
         * 
         * @param value
         *     allowed object is
         *     {@link Direction }
         *     
         * @see #getDirection()
         */
        public void setDirection(Direction value) {
            this.direction = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getModeConstraints() {
            return modeConstraints;
        }

        /**
         * Sets the value of the modeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getModeConstraints()
         */
        public void setModeConstraints(AbstractionDefPortConstraintsType value) {
            this.modeConstraints = value;
        }

        /**
         * Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface.
         * 
         * @return
         *     possible object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         */
        public AbstractionDefPortConstraintsType getMirroredModeConstraints() {
            return mirroredModeConstraints;
        }

        /**
         * Sets the value of the mirroredModeConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractionDefPortConstraintsType }
         *     
         * @see #getMirroredModeConstraints()
         */
        public void setMirroredModeConstraints(AbstractionDefPortConstraintsType value) {
            this.mirroredModeConstraints = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <simpleContent>
         *     <extension base="<http://www.accellera.org/XMLSchema/IPXACT/1685-2022>unsignedPositiveIntExpression">
         *       <attribute name="allBits" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
         *       <anyAttribute processContents='lax' namespace='##other'/>
         *     </extension>
         *   </simpleContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Width
            extends UnsignedPositiveIntExpression
        {

            /**
             * false: mapping is optional, any number of bits can be mapped.
             * true: mapping is required  the full width is supposed to be mapped.
             * 
             */
            @XmlAttribute(name = "allBits")
            protected Boolean allBits;

            /**
             * false: mapping is optional, any number of bits can be mapped.
             * true: mapping is required  the full width is supposed to be mapped.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public boolean isAllBits() {
                if (allBits == null) {
                    return false;
                } else {
                    return allBits;
                }
            }

            /**
             * Sets the value of the allBits property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             * @see #isAllBits()
             */
            public void setAllBits(Boolean value) {
                this.allBits = value;
            }

        }

    }

}
