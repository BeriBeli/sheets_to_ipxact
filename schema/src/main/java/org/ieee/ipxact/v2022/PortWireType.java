//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2022;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Wire port type for a component.
 * 
 * <p>Java class for portWireType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="portWireType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="direction" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}componentPortDirectionType"/>
 *         <element name="qualifier" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}qualifierType" minOccurs="0"/>
 *         <element name="vectors" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}extendedVectorsType" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wireTypeDefs" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}domainTypeDefs" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}signalTypeDefs" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}drivers" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}constraintSets" minOccurs="0"/>
 *         <element name="powerConstraints" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element name="powerConstraint" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePowerConstraintType" maxOccurs="unbounded"/>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *       <attribute name="allLogicalDirectionsAllowed" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "portWireType", propOrder = {
    "direction",
    "qualifier",
    "vectors",
    "wireTypeDefs",
    "domainTypeDefs",
    "signalTypeDefs",
    "drivers",
    "constraintSets",
    "powerConstraints"
})
@XmlSeeAlso({
    AbstractorPortWireType.class
})
public class PortWireType {

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     */
    @XmlElement(required = true)
    @XmlSchemaType(name = "token")
    protected ComponentPortDirectionType direction;
    /**
     * The type of information this port carries a wire port can carry both address and data, but may not mix this with a clock or reset.
     * 
     */
    protected QualifierType qualifier;
    /**
     * Vectored information.
     * 
     */
    protected ExtendedVectorsType vectors;
    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     */
    protected WireTypeDefs wireTypeDefs;
    /**
     * The group of domain type definitions.
     * 
     */
    protected DomainTypeDefs domainTypeDefs;
    /**
     * The group of signal type definitions.
     * 
     */
    protected SignalTypeDefs signalTypeDefs;
    /**
     * Container for wire port driver elements.
     * 
     */
    protected Drivers drivers;
    /**
     * List of constraintSet elements for a component port.
     * 
     */
    protected ConstraintSets constraintSets;
    /**
     * Wire port power constraints.
     * 
     */
    protected PortWireType.PowerConstraints powerConstraints;
    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     */
    @XmlAttribute(name = "allLogicalDirectionsAllowed")
    protected Boolean allLogicalDirectionsAllowed;

    /**
     * The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
     * A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.
     * 
     * @return
     *     possible object is
     *     {@link ComponentPortDirectionType }
     *     
     */
    public ComponentPortDirectionType getDirection() {
        return direction;
    }

    /**
     * Sets the value of the direction property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComponentPortDirectionType }
     *     
     * @see #getDirection()
     */
    public void setDirection(ComponentPortDirectionType value) {
        this.direction = value;
    }

    /**
     * The type of information this port carries a wire port can carry both address and data, but may not mix this with a clock or reset.
     * 
     * @return
     *     possible object is
     *     {@link QualifierType }
     *     
     */
    public QualifierType getQualifier() {
        return qualifier;
    }

    /**
     * Sets the value of the qualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link QualifierType }
     *     
     * @see #getQualifier()
     */
    public void setQualifier(QualifierType value) {
        this.qualifier = value;
    }

    /**
     * Vectored information.
     * 
     * @return
     *     possible object is
     *     {@link ExtendedVectorsType }
     *     
     */
    public ExtendedVectorsType getVectors() {
        return vectors;
    }

    /**
     * Sets the value of the vectors property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExtendedVectorsType }
     *     
     * @see #getVectors()
     */
    public void setVectors(ExtendedVectorsType value) {
        this.vectors = value;
    }

    /**
     * The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.
     * 
     * @return
     *     possible object is
     *     {@link WireTypeDefs }
     *     
     */
    public WireTypeDefs getWireTypeDefs() {
        return wireTypeDefs;
    }

    /**
     * Sets the value of the wireTypeDefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link WireTypeDefs }
     *     
     * @see #getWireTypeDefs()
     */
    public void setWireTypeDefs(WireTypeDefs value) {
        this.wireTypeDefs = value;
    }

    /**
     * The group of domain type definitions.
     * 
     * @return
     *     possible object is
     *     {@link DomainTypeDefs }
     *     
     */
    public DomainTypeDefs getDomainTypeDefs() {
        return domainTypeDefs;
    }

    /**
     * Sets the value of the domainTypeDefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link DomainTypeDefs }
     *     
     * @see #getDomainTypeDefs()
     */
    public void setDomainTypeDefs(DomainTypeDefs value) {
        this.domainTypeDefs = value;
    }

    /**
     * The group of signal type definitions.
     * 
     * @return
     *     possible object is
     *     {@link SignalTypeDefs }
     *     
     */
    public SignalTypeDefs getSignalTypeDefs() {
        return signalTypeDefs;
    }

    /**
     * Sets the value of the signalTypeDefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link SignalTypeDefs }
     *     
     * @see #getSignalTypeDefs()
     */
    public void setSignalTypeDefs(SignalTypeDefs value) {
        this.signalTypeDefs = value;
    }

    /**
     * Container for wire port driver elements.
     * 
     * @return
     *     possible object is
     *     {@link Drivers }
     *     
     */
    public Drivers getDrivers() {
        return drivers;
    }

    /**
     * Sets the value of the drivers property.
     * 
     * @param value
     *     allowed object is
     *     {@link Drivers }
     *     
     * @see #getDrivers()
     */
    public void setDrivers(Drivers value) {
        this.drivers = value;
    }

    /**
     * List of constraintSet elements for a component port.
     * 
     * @return
     *     possible object is
     *     {@link ConstraintSets }
     *     
     */
    public ConstraintSets getConstraintSets() {
        return constraintSets;
    }

    /**
     * Sets the value of the constraintSets property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConstraintSets }
     *     
     * @see #getConstraintSets()
     */
    public void setConstraintSets(ConstraintSets value) {
        this.constraintSets = value;
    }

    /**
     * Wire port power constraints.
     * 
     * @return
     *     possible object is
     *     {@link PortWireType.PowerConstraints }
     *     
     */
    public PortWireType.PowerConstraints getPowerConstraints() {
        return powerConstraints;
    }

    /**
     * Sets the value of the powerConstraints property.
     * 
     * @param value
     *     allowed object is
     *     {@link PortWireType.PowerConstraints }
     *     
     * @see #getPowerConstraints()
     */
    public void setPowerConstraints(PortWireType.PowerConstraints value) {
        this.powerConstraints = value;
    }

    /**
     * True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isAllLogicalDirectionsAllowed() {
        if (allLogicalDirectionsAllowed == null) {
            return false;
        } else {
            return allLogicalDirectionsAllowed;
        }
    }

    /**
     * Sets the value of the allLogicalDirectionsAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     * @see #isAllLogicalDirectionsAllowed()
     */
    public void setAllLogicalDirectionsAllowed(Boolean value) {
        this.allLogicalDirectionsAllowed = value;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element name="powerConstraint" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}wirePowerConstraintType" maxOccurs="unbounded"/>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "powerConstraint"
    })
    public static class PowerConstraints {

        /**
         * Single wire port set of power constraints.
         * 
         */
        @XmlElement(required = true)
        protected List<WirePowerConstraintType> powerConstraint;

        /**
         * Single wire port set of power constraints.
         * 
         * Gets the value of the powerConstraint property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the powerConstraint property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getPowerConstraint().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link WirePowerConstraintType }
         * </p>
         * 
         * 
         * @return
         *     The value of the powerConstraint property.
         */
        public List<WirePowerConstraintType> getPowerConstraint() {
            if (powerConstraint == null) {
                powerConstraint = new ArrayList<>();
            }
            return this.powerConstraint;
        }

    }

}
