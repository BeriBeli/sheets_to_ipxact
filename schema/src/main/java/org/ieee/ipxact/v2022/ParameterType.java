//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ieee.ipxact.v2022;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for parameterType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="parameterType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <group ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}nameGroupString"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}vectors" minOccurs="0"/>
 *         <element name="arrays" type="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}configurableArrays" minOccurs="0"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}value"/>
 *         <element ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}vendorExtensions" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}id.att"/>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}any.att"/>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}parameter.att"/>
 *       <attGroup ref="{http://www.accellera.org/XMLSchema/IPXACT/1685-2022}parameter.resolve.att"/>
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "parameterType", propOrder = {
    "name",
    "displayName",
    "shortDescription",
    "description",
    "vectors",
    "arrays",
    "value",
    "vendorExtensions"
})
public class ParameterType {

    /**
     * Unique name
     * 
     */
    @XmlElement(required = true)
    protected String name;
    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     */
    protected String displayName;
    /**
     * Brief description suitable for titles, software comments and pop-up windows. Being a SystemVerilog expression the text can be constructed using parameters, e.g, by concatentation or $sformatf().
     * 
     */
    protected String shortDescription;
    /**
     * Full description string, typically for documentation
     * 
     */
    protected String description;
    /**
     * Vectored information.
     * 
     */
    protected Vectors vectors;
    protected ConfigurableArrays arrays;
    /**
     * The value of the parameter.
     * 
     */
    @XmlElement(required = true)
    protected StringExpression value;
    /**
     * Container for vendor specific extensions.
     * 
     */
    protected VendorExtensions vendorExtensions;
    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     */
    @XmlAttribute(name = "id", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    /**
     * ID attribute for uniquely identifying a parameter within its document. Attribute is used to refer to this from a configurable element.
     * 
     */
    @XmlAttribute(name = "parameterId")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String parameterId;
    /**
     * Provides a string used to prompt the user for user-resolved property values.
     * 
     */
    @XmlAttribute(name = "prompt")
    protected String prompt;
    /**
     * For user defined properties, refers the choice element enumerating the values to choose from.
     * 
     */
    @XmlAttribute(name = "choiceRef")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "Name")
    protected String choiceRef;
    /**
     * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
     * 
     */
    @XmlAttribute(name = "order")
    protected Float order;
    /**
     * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
     * 
     */
    @XmlAttribute(name = "configGroups")
    @XmlSchemaType(name = "NMTOKENS")
    protected List<String> configGroups;
    /**
     * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.
     * 
     */
    @XmlAttribute(name = "minimum")
    protected String minimum;
    /**
     * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.
     * 
     */
    @XmlAttribute(name = "maximum")
    protected String maximum;
    /**
     * Specifies the type of the value of the parameter. A parameter of type byte is resolved to an 8-bit integer value, shortint is resolved to a 16-bit integer value, int is resolved to a 32-bit integer value, longint is resolved to a 64-bit integer value, shortreal is resolved to a 32-bit floating point value, real is resolved to a 64-bit floating point value, bit is by default resolved to a one bit value, unless a vector size has been specified and the string type is resolved to a string value.
     * 
     */
    @XmlAttribute(name = "type")
    protected FormatType type;
    /**
     * Specify the signedness explicitly. The data types byte, shortint, int, longint default to signed. The data type bit defaults to unsigned. When setting this values for the data types string, real and shortreal the setting is ignored.
     * 
     */
    @XmlAttribute(name = "sign")
    protected SignType sign;
    /**
     * Defines the prefix that precedes the unit of a value. The prefix is not applied to the value (e.g. in calculations).
     * 
     */
    @XmlAttribute(name = "prefix")
    protected String prefix;
    /**
     * Defines the unit of the value.
     * 
     */
    @XmlAttribute(name = "unit")
    protected String unit;
    /**
     * Determines how a property value can be configured.
     * 
     */
    @XmlAttribute(name = "resolve")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String resolve;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * Unique name
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDisplayName()
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Brief description suitable for titles, software comments and pop-up windows. Being a SystemVerilog expression the text can be constructed using parameters, e.g, by concatentation or $sformatf().
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShortDescription() {
        return shortDescription;
    }

    /**
     * Sets the value of the shortDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getShortDescription()
     */
    public void setShortDescription(String value) {
        this.shortDescription = value;
    }

    /**
     * Full description string, typically for documentation
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Vectored information.
     * 
     * @return
     *     possible object is
     *     {@link Vectors }
     *     
     */
    public Vectors getVectors() {
        return vectors;
    }

    /**
     * Sets the value of the vectors property.
     * 
     * @param value
     *     allowed object is
     *     {@link Vectors }
     *     
     * @see #getVectors()
     */
    public void setVectors(Vectors value) {
        this.vectors = value;
    }

    /**
     * Gets the value of the arrays property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurableArrays }
     *     
     */
    public ConfigurableArrays getArrays() {
        return arrays;
    }

    /**
     * Sets the value of the arrays property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurableArrays }
     *     
     */
    public void setArrays(ConfigurableArrays value) {
        this.arrays = value;
    }

    /**
     * The value of the parameter.
     * 
     * @return
     *     possible object is
     *     {@link StringExpression }
     *     
     */
    public StringExpression getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link StringExpression }
     *     
     * @see #getValue()
     */
    public void setValue(StringExpression value) {
        this.value = value;
    }

    /**
     * Container for vendor specific extensions.
     * 
     * @return
     *     possible object is
     *     {@link VendorExtensions }
     *     
     */
    public VendorExtensions getVendorExtensions() {
        return vendorExtensions;
    }

    /**
     * Sets the value of the vendorExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link VendorExtensions }
     *     
     * @see #getVendorExtensions()
     */
    public void setVendorExtensions(VendorExtensions value) {
        this.vendorExtensions = value;
    }

    /**
     * A generic mechanism for annotating elements with unique identifiers. See: http://www.w3.org/TR/xml-id/ for more information.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getId()
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * ID attribute for uniquely identifying a parameter within its document. Attribute is used to refer to this from a configurable element.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getParameterId() {
        return parameterId;
    }

    /**
     * Sets the value of the parameterId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getParameterId()
     */
    public void setParameterId(String value) {
        this.parameterId = value;
    }

    /**
     * Provides a string used to prompt the user for user-resolved property values.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrompt() {
        return prompt;
    }

    /**
     * Sets the value of the prompt property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getPrompt()
     */
    public void setPrompt(String value) {
        this.prompt = value;
    }

    /**
     * For user defined properties, refers the choice element enumerating the values to choose from.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getChoiceRef() {
        return choiceRef;
    }

    /**
     * Sets the value of the choiceRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getChoiceRef()
     */
    public void setChoiceRef(String value) {
        this.choiceRef = value;
    }

    /**
     * For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    public Float getOrder() {
        return order;
    }

    /**
     * Sets the value of the order property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     * @see #getOrder()
     */
    public void setOrder(Float value) {
        this.order = value;
    }

    /**
     * Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.
     * 
     * Gets the value of the configGroups property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the configGroups property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getConfigGroups().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * </p>
     * 
     * 
     * @return
     *     The value of the configGroups property.
     */
    public List<String> getConfigGroups() {
        if (configGroups == null) {
            configGroups = new ArrayList<>();
        }
        return this.configGroups;
    }

    /**
     * For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMinimum() {
        return minimum;
    }

    /**
     * Sets the value of the minimum property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getMinimum()
     */
    public void setMinimum(String value) {
        this.minimum = value;
    }

    /**
     * For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMaximum() {
        return maximum;
    }

    /**
     * Sets the value of the maximum property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getMaximum()
     */
    public void setMaximum(String value) {
        this.maximum = value;
    }

    /**
     * Specifies the type of the value of the parameter. A parameter of type byte is resolved to an 8-bit integer value, shortint is resolved to a 16-bit integer value, int is resolved to a 32-bit integer value, longint is resolved to a 64-bit integer value, shortreal is resolved to a 32-bit floating point value, real is resolved to a 64-bit floating point value, bit is by default resolved to a one bit value, unless a vector size has been specified and the string type is resolved to a string value.
     * 
     * @return
     *     possible object is
     *     {@link FormatType }
     *     
     */
    public FormatType getType() {
        if (type == null) {
            return FormatType.STRING;
        } else {
            return type;
        }
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link FormatType }
     *     
     * @see #getType()
     */
    public void setType(FormatType value) {
        this.type = value;
    }

    /**
     * Specify the signedness explicitly. The data types byte, shortint, int, longint default to signed. The data type bit defaults to unsigned. When setting this values for the data types string, real and shortreal the setting is ignored.
     * 
     * @return
     *     possible object is
     *     {@link SignType }
     *     
     */
    public SignType getSign() {
        return sign;
    }

    /**
     * Sets the value of the sign property.
     * 
     * @param value
     *     allowed object is
     *     {@link SignType }
     *     
     * @see #getSign()
     */
    public void setSign(SignType value) {
        this.sign = value;
    }

    /**
     * Defines the prefix that precedes the unit of a value. The prefix is not applied to the value (e.g. in calculations).
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrefix() {
        return prefix;
    }

    /**
     * Sets the value of the prefix property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getPrefix()
     */
    public void setPrefix(String value) {
        this.prefix = value;
    }

    /**
     * Defines the unit of the value.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUnit() {
        return unit;
    }

    /**
     * Sets the value of the unit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getUnit()
     */
    public void setUnit(String value) {
        this.unit = value;
    }

    /**
     * Determines how a property value can be configured.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getResolve() {
        if (resolve == null) {
            return "immediate";
        } else {
            return resolve;
        }
    }

    /**
     * Sets the value of the resolve property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getResolve()
     */
    public void setResolve(String value) {
        this.resolve = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
